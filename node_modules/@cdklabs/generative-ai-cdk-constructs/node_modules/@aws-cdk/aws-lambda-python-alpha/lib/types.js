"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0eXBlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXNzZXRIYXNoVHlwZSwgQnVuZGxpbmdGaWxlQWNjZXNzLCBEb2NrZXJJbWFnZSwgRG9ja2VyUnVuT3B0aW9ucyB9IGZyb20gJ2F3cy1jZGstbGliL2NvcmUnO1xuXG4vKipcbiAqIE9wdGlvbnMgZm9yIGJ1bmRsaW5nXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQnVuZGxpbmdPcHRpb25zIGV4dGVuZHMgRG9ja2VyUnVuT3B0aW9ucyB7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gZXhwb3J0IFBvZXRyeSBkZXBlbmRlbmNpZXMgd2l0aCBoYXNoZXMuIE5vdGUgdGhhdCB0aGlzIGNhbiBjYXVzZSBidWlsZHMgdG8gZmFpbCBpZiBub3QgYWxsIGRlcGVuZGVuY2llc1xuICAgKiBleHBvcnQgd2l0aCBhIGhhc2guXG4gICAqXG4gICAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2F3cy9hd3MtY2RrL2lzc3Vlcy8xOTIzMlxuICAgKiBAZGVmYXVsdCBIYXNoZXMgYXJlIE5PVCBpbmNsdWRlZCBpbiB0aGUgZXhwb3J0ZWQgYHJlcXVpcmVtZW50cy50eHRgIGZpbGVcbiAgICovXG4gIHJlYWRvbmx5IHBvZXRyeUluY2x1ZGVIYXNoZXM/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIGV4cG9ydCBQb2V0cnkgZGVwZW5kZW5jaWVzIHdpdGggc291cmNlIHJlcG9zaXRvcnkgdXJscy5cbiAgICpcbiAgICogQGRlZmF1bHQgVVJMcyBhcmUgaW5jbHVkZWQgaW4gdGhlIGV4cG9ydGVkIGByZXF1aXJlbWVudHMudHh0YCBmaWxlLlxuICAgKi9cbiAgcmVhZG9ubHkgcG9ldHJ5V2l0aG91dFVybHM/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBMaXN0IG9mIGZpbGUgcGF0dGVybnMgdG8gZXhjbHVkZSB3aGVuIGNvcHlpbmcgYXNzZXRzIGZyb20gc291cmNlIGZvciBidW5kbGluZy5cbiAgICpcbiAgICogQGRlZmF1bHQgLSBFbXB0eSBsaXN0XG4gICAqL1xuICByZWFkb25seSBhc3NldEV4Y2x1ZGVzPzogc3RyaW5nW107XG5cbiAgLyoqXG4gICAqIE91dHB1dCBwYXRoIHN1ZmZpeDogdGhlIHN1ZmZpeCBmb3IgdGhlIGRpcmVjdG9yeSBpbnRvIHdoaWNoIHRoZSBidW5kbGVkIG91dHB1dCBpcyB3cml0dGVuLlxuICAgKlxuICAgKiBAZGVmYXVsdCAtICdweXRob24nIGZvciBhIGxheWVyLCBlbXB0eSBzdHJpbmcgb3RoZXJ3aXNlLlxuICAgKi9cbiAgcmVhZG9ubHkgb3V0cHV0UGF0aFN1ZmZpeD86IHN0cmluZztcblxuICAvKipcbiAgICogRG9ja2VyIGltYWdlIHRvIHVzZSBmb3IgYnVuZGxpbmcuIElmIG5vIG9wdGlvbnMgYXJlIHByb3ZpZGVkLCB0aGUgZGVmYXVsdCBidW5kbGluZyBpbWFnZVxuICAgKiB3aWxsIGJlIHVzZWQuIERlcGVuZGVuY2llcyB3aWxsIGJlIGluc3RhbGxlZCB1c2luZyB0aGUgZGVmYXVsdCBwYWNrYWdpbmcgY29tbWFuZHNcbiAgICogYW5kIGNvcGllZCBvdmVyIGZyb20gaW50byB0aGUgTGFtYmRhIGFzc2V0LlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIERlZmF1bHQgYnVuZGxpbmcgaW1hZ2UuXG4gICAqL1xuICByZWFkb25seSBpbWFnZT86IERvY2tlckltYWdlO1xuXG4gIC8qKlxuICAgKiBPcHRpb25hbCBidWlsZCBhcmd1bWVudHMgdG8gcGFzcyB0byB0aGUgZGVmYXVsdCBjb250YWluZXIuIFRoaXMgY2FuIGJlIHVzZWQgdG8gY3VzdG9taXplXG4gICAqIHRoZSBpbmRleCBVUkxzIHVzZWQgZm9yIGluc3RhbGxpbmcgZGVwZW5kZW5jaWVzLlxuICAgKiBUaGlzIGlzIG5vdCB1c2VkIGlmIGEgY3VzdG9tIGltYWdlIGlzIHByb3ZpZGVkLlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIE5vIGJ1aWxkIGFyZ3VtZW50cy5cbiAgICovXG4gIHJlYWRvbmx5IGJ1aWxkQXJncz86IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH07XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgaG93IGFzc2V0IGhhc2ggaXMgY2FsY3VsYXRlZC4gQXNzZXRzIHdpbGwgZ2V0IHJlYnVpbGQgYW5kXG4gICAqIHVwbG9hZGVkIG9ubHkgaWYgdGhlaXIgaGFzaCBoYXMgY2hhbmdlZC5cbiAgICpcbiAgICogSWYgYXNzZXQgaGFzaCBpcyBzZXQgdG8gYFNPVVJDRWAgKGRlZmF1bHQpLCB0aGVuIG9ubHkgY2hhbmdlcyB0byB0aGUgc291cmNlXG4gICAqIGRpcmVjdG9yeSB3aWxsIGNhdXNlIHRoZSBhc3NldCB0byByZWJ1aWxkLiBUaGlzIG1lYW5zLCBmb3IgZXhhbXBsZSwgdGhhdCBpblxuICAgKiBvcmRlciB0byBwaWNrIHVwIGEgbmV3IGRlcGVuZGVuY3kgdmVyc2lvbiwgYSBjaGFuZ2UgbXVzdCBiZSBtYWRlIHRvIHRoZVxuICAgKiBzb3VyY2UgdHJlZS4gSWRlYWxseSwgdGhpcyBjYW4gYmUgaW1wbGVtZW50ZWQgYnkgaW5jbHVkaW5nIGEgZGVwZW5kZW5jeVxuICAgKiBsb2NrZmlsZSBpbiB5b3VyIHNvdXJjZSB0cmVlIG9yIHVzaW5nIGZpeGVkIGRlcGVuZGVuY2llcy5cbiAgICpcbiAgICogSWYgdGhlIGFzc2V0IGhhc2ggaXMgc2V0IHRvIGBPVVRQVVRgLCB0aGUgaGFzaCBpcyBjYWxjdWxhdGVkIGFmdGVyXG4gICAqIGJ1bmRsaW5nLiBUaGlzIG1lYW5zIHRoYXQgYW55IGNoYW5nZSBpbiB0aGUgb3V0cHV0IHdpbGwgY2F1c2UgdGhlIGFzc2V0IHRvXG4gICAqIGJlIGludmFsaWRhdGVkIGFuZCB1cGxvYWRlZC4gQmVhciBpbiBtaW5kIHRoYXQgYHBpcGAgYWRkcyB0aW1lc3RhbXBzIHRvXG4gICAqIGRlcGVuZGVuY2llcyBpdCBpbnN0YWxscywgd2hpY2ggaW1wbGllcyB0aGF0IGluIHRoaXMgbW9kZSBQeXRob24gYnVuZGxlc1xuICAgKiB3aWxsIF9hbHdheXNfIGdldCByZWJ1aWxkIGFuZCB1cGxvYWRlZC4gTm9ybWFsbHkgdGhpcyBpcyBhbiBhbnRpLXBhdHRlcm5cbiAgICogc2luY2UgYnVpbGRcbiAgICpcbiAgICogQGRlZmF1bHQgQXNzZXRIYXNoVHlwZS5TT1VSQ0UgQnkgZGVmYXVsdCwgaGFzaCBpcyBjYWxjdWxhdGVkIGJhc2VkIG9uIHRoZVxuICAgKiBjb250ZW50cyBvZiB0aGUgc291cmNlIGRpcmVjdG9yeS4gVGhpcyBtZWFucyB0aGF0IG9ubHkgdXBkYXRlcyB0byB0aGVcbiAgICogc291cmNlIHdpbGwgY2F1c2UgdGhlIGFzc2V0IHRvIHJlYnVpbGQuXG4gICAqL1xuXG4gIHJlYWRvbmx5IGFzc2V0SGFzaFR5cGU/OiBBc3NldEhhc2hUeXBlO1xuXG4gIC8qKlxuICAgKiBTcGVjaWZ5IGEgY3VzdG9tIGhhc2ggZm9yIHRoaXMgYXNzZXQuIElmIGBhc3NldEhhc2hUeXBlYCBpcyBzZXQgaXQgbXVzdFxuICAgKiBiZSBzZXQgdG8gYEFzc2V0SGFzaFR5cGUuQ1VTVE9NYC4gRm9yIGNvbnNpc3RlbmN5LCB0aGlzIGN1c3RvbSBoYXNoIHdpbGxcbiAgICogYmUgU0hBMjU2IGhhc2hlZCBhbmQgZW5jb2RlZCBhcyBoZXguIFRoZSByZXN1bHRpbmcgaGFzaCB3aWxsIGJlIHRoZSBhc3NldFxuICAgKiBoYXNoLlxuICAgKlxuICAgKiBOT1RFOiB0aGUgaGFzaCBpcyB1c2VkIGluIG9yZGVyIHRvIGlkZW50aWZ5IGEgc3BlY2lmaWMgcmV2aXNpb24gb2YgdGhlIGFzc2V0LCBhbmRcbiAgICogdXNlZCBmb3Igb3B0aW1pemluZyBhbmQgY2FjaGluZyBkZXBsb3ltZW50IGFjdGl2aXRpZXMgcmVsYXRlZCB0byB0aGlzIGFzc2V0IHN1Y2ggYXNcbiAgICogcGFja2FnaW5nLCB1cGxvYWRpbmcgdG8gQW1hem9uIFMzLCBldGMuIElmIHlvdSBjaG9zZSB0byBjdXN0b21pemUgdGhlIGhhc2gsIHlvdSB3aWxsXG4gICAqIG5lZWQgdG8gbWFrZSBzdXJlIGl0IGlzIHVwZGF0ZWQgZXZlcnkgdGltZSB0aGUgYXNzZXQgY2hhbmdlcywgb3Igb3RoZXJ3aXNlIGl0IGlzXG4gICAqIHBvc3NpYmxlIHRoYXQgc29tZSBkZXBsb3ltZW50cyB3aWxsIG5vdCBiZSBpbnZhbGlkYXRlZC5cbiAgICpcbiAgICogQGRlZmF1bHQgLSBCYXNlZCBvbiBgYXNzZXRIYXNoVHlwZWBcbiAgICovXG4gIHJlYWRvbmx5IGFzc2V0SGFzaD86IHN0cmluZztcblxuICAvKipcbiAgICogQ29tbWFuZCBob29rc1xuICAgKlxuICAgKiBAZGVmYXVsdCAtIGRvIG5vdCBydW4gYWRkaXRpb25hbCBjb21tYW5kc1xuICAgKi9cbiAgcmVhZG9ubHkgY29tbWFuZEhvb2tzPzogSUNvbW1hbmRIb29rcztcblxuICAvKipcbiAgICogV2hpY2ggb3B0aW9uIHRvIHVzZSB0byBjb3B5IHRoZSBzb3VyY2UgZmlsZXMgdG8gdGhlIGRvY2tlciBjb250YWluZXIgYW5kIG91dHB1dCBmaWxlcyBiYWNrXG4gICAqIEBkZWZhdWx0IC0gQnVuZGxpbmdGaWxlQWNjZXNzLkJJTkRfTU9VTlRcbiAgICovXG4gIHJlYWRvbmx5IGJ1bmRsaW5nRmlsZUFjY2Vzcz86IEJ1bmRsaW5nRmlsZUFjY2Vzcztcbn1cblxuLyoqXG4gKiBDb21tYW5kIGhvb2tzXG4gKlxuICogVGhlc2UgY29tbWFuZHMgd2lsbCBydW4gaW4gdGhlIGVudmlyb25tZW50IGluIHdoaWNoIGJ1bmRsaW5nIG9jY3VyczogaW5zaWRlXG4gKiB0aGUgY29udGFpbmVyIGZvciBEb2NrZXIgYnVuZGxpbmcgb3Igb24gdGhlIGhvc3QgT1MgZm9yIGxvY2FsIGJ1bmRsaW5nLlxuICpcbiAqIENvbW1hbmRzIGFyZSBjaGFpbmVkIHdpdGggYCYmYC5cbiAqXG4gKiBgYGB0ZXh0XG4gKiB7XG4gKiAgIC8vIFJ1biB0ZXN0cyBwcmlvciB0byBidW5kbGluZ1xuICogICBiZWZvcmVCdW5kbGluZyhpbnB1dERpcjogc3RyaW5nLCBvdXRwdXREaXI6IHN0cmluZyk6IHN0cmluZ1tdIHtcbiAqICAgICByZXR1cm4gW2BweXRlc3RgXTtcbiAqICAgfVxuICogICAvLyAuLi5cbiAqIH1cbiAqIGBgYFxuICovXG5leHBvcnQgaW50ZXJmYWNlIElDb21tYW5kSG9va3Mge1xuICAvKipcbiAgICogUmV0dXJucyBjb21tYW5kcyB0byBydW4gYmVmb3JlIGJ1bmRsaW5nLlxuICAgKlxuICAgKiBDb21tYW5kcyBhcmUgY2hhaW5lZCB3aXRoIGAmJmAuXG4gICAqL1xuICBiZWZvcmVCdW5kbGluZyhpbnB1dERpcjogc3RyaW5nLCBvdXRwdXREaXI6IHN0cmluZyk6IHN0cmluZ1tdO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGNvbW1hbmRzIHRvIHJ1biBhZnRlciBidW5kbGluZy5cbiAgICpcbiAgICogQ29tbWFuZHMgYXJlIGNoYWluZWQgd2l0aCBgJiZgLlxuICAgKi9cbiAgYWZ0ZXJCdW5kbGluZyhpbnB1dERpcjogc3RyaW5nLCBvdXRwdXREaXI6IHN0cmluZyk6IHN0cmluZ1tdO1xufVxuIl19