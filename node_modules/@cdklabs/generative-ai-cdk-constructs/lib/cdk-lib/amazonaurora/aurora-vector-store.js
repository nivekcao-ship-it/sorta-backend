"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AmazonAuroraVectorStore = exports.ExistingAmazonAuroraVectorStore = exports.SupportedPostgreSQLVersions = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const path = require("path");
const cdk = require("aws-cdk-lib");
const ec2 = require("aws-cdk-lib/aws-ec2");
const iam = require("aws-cdk-lib/aws-iam");
const rds = require("aws-cdk-lib/aws-rds");
const cdk_nag_1 = require("cdk-nag");
const constructs_1 = require("constructs");
const custom_resource_provider_helper_1 = require("../../common/helpers/custom-resource-provider-helper");
const utils_1 = require("../../common/helpers/utils");
const vpc_helper_1 = require("../../common/helpers/vpc-helper");
/******************************************************************************
 *                              ENUMS
 *****************************************************************************/
/**
 * List of supported versions of PostgreSQL for Aurora cluster.
 */
exports.SupportedPostgreSQLVersions = {
    AURORA_POSTGRESQL_V12_16: rds.AuroraPostgresEngineVersion.VER_12_16,
    AURORA_POSTGRESQL_V13_12: rds.AuroraPostgresEngineVersion.VER_13_12,
    AURORA_POSTGRESQL_V14_9: rds.AuroraPostgresEngineVersion.VER_14_9,
    AURORA_POSTGRESQL_V15_4: rds.AuroraPostgresEngineVersion.VER_15_4,
    AURORA_POSTGRESQL_V15_5: rds.AuroraPostgresEngineVersion.VER_15_5,
    AURORA_POSTGRESQL_V15_6: rds.AuroraPostgresEngineVersion.VER_15_6,
    AURORA_POSTGRESQL_V15_7: rds.AuroraPostgresEngineVersion.VER_15_7,
    AURORA_POSTGRESQL_V15_8: rds.AuroraPostgresEngineVersion.VER_15_8,
    AURORA_POSTGRESQL_V16_1: rds.AuroraPostgresEngineVersion.VER_16_1,
    AURORA_POSTGRESQL_V16_2: rds.AuroraPostgresEngineVersion.VER_16_2,
    AURORA_POSTGRESQL_V16_3: rds.AuroraPostgresEngineVersion.VER_16_3,
};
/**
 * Base class for Amazon Aurora Vector Store.
 * Handles both the creation of a new Aurora Vector Store or the usage of an existing Aurora Vector Store.
 */
class BaseAmazonAuroraVectorStore extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        /**
         * Setup databaseName based on if it is provided in the props or not
         * and based on whether it is an existing Aurora Vector Store or not.
         */
        this.databaseName =
            'clusterIdentifier' in props ? props.databaseName : props.databaseName ?? 'bedrock_vector_db';
        this.schemaName = props.schemaName ?? 'bedrock_integration';
        this.vectorField = props.vectorField ?? 'embedding';
        this.textField = props.textField ?? 'chunks';
        this.metadataField = props.metadataField ?? 'metadata';
        this.tableName = props.tableName ?? 'bedrock_kb';
        this.primaryKeyField = props.primaryKeyField ?? 'id';
        this.embeddingsModelVectorDimension = props.embeddingsModelVectorDimension;
    }
    createAuroraPgCRPolicy(clusterIdentifier) {
        const crPolicy = new iam.ManagedPolicy(this, 'AuroraPgPolicy', {
            managedPolicyName: (0, utils_1.generatePhysicalNameV2)(this, 'AuroraPgPolicy', {
                maxLength: 32,
                lower: true,
            }),
            statements: [
                new iam.PolicyStatement({
                    actions: [
                        'ec2:DescribeInstances',
                        'ec2:CreateNetworkInterface',
                        'ec2:AttachNetworkInterface',
                        'ec2:DescribeNetworkInterfaces',
                        'autoscaling:CompleteLifecycleAction',
                        'ec2:DeleteNetworkInterface',
                    ],
                    resources: ['*'],
                }),
                new iam.PolicyStatement({
                    actions: ['rds:DescribeDBClusters'],
                    resources: [
                        cdk.Stack.of(this).formatArn({
                            service: 'rds',
                            resource: 'cluster',
                            resourceName: clusterIdentifier,
                            arnFormat: cdk.ArnFormat.COLON_RESOURCE_NAME,
                            account: cdk.Stack.of(this).account,
                            region: cdk.Stack.of(this).region,
                        }),
                    ],
                }),
            ],
        });
        cdk_nag_1.NagSuppressions.addResourceSuppressions(crPolicy, [
            {
                id: 'AwsSolutions-IAM4',
                reason: 'The AWSLambdaBasicExecutionRole managed policy is required for ' +
                    'the Lambda function to write logs to CloudWatch.',
            },
            {
                id: 'AwsSolutions-IAM5',
                reason: 'This policy is required to allow the custom resource to create a ' +
                    'network interface for the Aurora cluster and it has to be wildcard.',
            },
        ], true);
        return crPolicy;
    }
    generateResourceArn(clusterIdentifier) {
        return cdk.Stack.of(this).formatArn({
            service: 'rds',
            resource: 'cluster',
            resourceName: clusterIdentifier,
            region: cdk.Stack.of(this).region,
            account: cdk.Stack.of(this).account,
            arnFormat: cdk.ArnFormat.COLON_RESOURCE_NAME,
        });
    }
    setupDatabaseClusterResources(vpc, secret, clusterIdentifier, auroraSecurityGroup) {
        const resourceArn = this.generateResourceArn(clusterIdentifier);
        return {
            vpc,
            secret,
            resourceArn,
            auroraSecurityGroup,
            clusterIdentifier,
        };
    }
    createLambdaSecurityGroup(vpc) {
        return new ec2.SecurityGroup(this, 'LambdaSecurityGroup', {
            vpc,
            securityGroupName: 'lambda-security-group',
            description: 'Security group for Lambda access to Aurora',
        });
    }
    addIngressRuleToAuroraSecurityGroup(lambdaSecurityGroup, auroraSecurityGroup) {
        auroraSecurityGroup.addIngressRule(lambdaSecurityGroup, ec2.Port.tcp(5432), 'Allow PostgreSQL access from Lambda security group');
    }
    setupCustomResource(databaseClusterResources, lambdaSecurityGroup, auroraPgCRPolicy) {
        const customResource = (0, custom_resource_provider_helper_1.buildCustomResourceProvider)({
            providerName: 'AmazonAuroraPgVectorCRProvider',
            vpc: databaseClusterResources.vpc,
            securityGroup: lambdaSecurityGroup,
            codePath: path.join(__dirname, '../../../lambda/amazon-aurora-pgvector-custom-resources'),
            handler: 'custom_resources.on_event',
            runtime: cdk.aws_lambda.Runtime.PYTHON_3_12,
        });
        const crProvider = customResource.getProvider(this);
        crProvider.role.addManagedPolicy(auroraPgCRPolicy);
        databaseClusterResources.secret.grantRead(crProvider.role);
        const auroraPgVector = new cdk.CustomResource(this, 'AuroraPgVector', {
            resourceType: 'Custom::AmazonAuroraPgVector',
            serviceToken: crProvider.serviceToken,
            properties: {
                SecretName: databaseClusterResources.secret.secretName || '',
                ClusterIdentifier: databaseClusterResources.clusterIdentifier,
                DatabaseName: this.databaseName,
                TableName: this.tableName,
                VectorDimensions: this.embeddingsModelVectorDimension,
                PrimaryKeyField: this.primaryKeyField,
                SchemaName: this.schemaName,
                VectorField: this.vectorField,
                TextField: this.textField,
                MetadataField: this.metadataField,
            },
        });
        auroraPgVector.node.addDependency(auroraPgCRPolicy);
        return auroraPgVector;
    }
}
class ExistingAmazonAuroraVectorStore extends BaseAmazonAuroraVectorStore {
    constructor(scope, id, props) {
        super(scope, id, props);
        const databaseClusterResources = this.setupDatabaseClusterResources(props.vpc, props.secret, props.clusterIdentifier, props.auroraSecurityGroup);
        const auroraPgCRPolicy = this.createAuroraPgCRPolicy(databaseClusterResources.clusterIdentifier);
        const lambdaSecurityGroup = this.createLambdaSecurityGroup(databaseClusterResources.vpc);
        this.addIngressRuleToAuroraSecurityGroup(lambdaSecurityGroup, databaseClusterResources.auroraSecurityGroup);
        this.resourceArn = this.generateResourceArn(databaseClusterResources.clusterIdentifier);
        this.credentialsSecretArn = databaseClusterResources.secret.secretArn;
        this.vpc = databaseClusterResources.vpc;
        (0, vpc_helper_1.AddAwsServiceEndpoint)(scope, this.vpc, [
            vpc_helper_1.ServiceEndpointTypeEnum.SECRETS_MANAGER,
            vpc_helper_1.ServiceEndpointTypeEnum.BEDROCK_RUNTIME,
        ]);
        this.setupCustomResource(databaseClusterResources, lambdaSecurityGroup, auroraPgCRPolicy);
    }
}
exports.ExistingAmazonAuroraVectorStore = ExistingAmazonAuroraVectorStore;
_a = JSII_RTTI_SYMBOL_1;
ExistingAmazonAuroraVectorStore[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.amazonaurora.ExistingAmazonAuroraVectorStore", version: "0.1.309" };
class AmazonAuroraVectorStore extends BaseAmazonAuroraVectorStore {
    /**
     * Creates an instance of AmazonAuroraVectorStore using existing Aurora Vector Store properties.
     * You need to provide your existing Aurora Vector Store properties
     * such as `databaseName`, `clusterIdentifier`, `vpc` where database is deployed,
     * `secret` containing username and password for authentication to database,
     * and `auroraSecurityGroup` with the ecurity group that was used for the database.
     *
     * @param scope - The scope in which to define the construct.
     * @param id - The ID of the construct.
     * @param props - The properties of the existing Aurora Vector Store.
     * @returns An instance of AmazonAuroraVectorStore.
     */
    static fromExistingAuroraVectorStore(scope, id, props) {
        return new ExistingAmazonAuroraVectorStore(scope, id, props);
    }
    constructor(scope, id, props) {
        super(scope, id, props);
        const databaseClusterResources = this.createDatabaseCluster(props.postgreSQLVersion ?? exports.SupportedPostgreSQLVersions.AURORA_POSTGRESQL_V15_5, props.vpc, props.clusterId);
        const auroraPgCRPolicy = this.createAuroraPgCRPolicy(databaseClusterResources.clusterIdentifier);
        const lambdaSecurityGroup = this.createLambdaSecurityGroup(databaseClusterResources.vpc);
        this.addIngressRuleToAuroraSecurityGroup(lambdaSecurityGroup, databaseClusterResources.auroraSecurityGroup);
        this.resourceArn = databaseClusterResources.resourceArn;
        this.credentialsSecretArn = databaseClusterResources.secret.secretArn;
        this.vpc = databaseClusterResources.vpc;
        (0, vpc_helper_1.AddAwsServiceEndpoint)(scope, this.vpc, [
            vpc_helper_1.ServiceEndpointTypeEnum.SECRETS_MANAGER,
            vpc_helper_1.ServiceEndpointTypeEnum.BEDROCK_RUNTIME,
        ]);
        const auroraPgVector = this.setupCustomResource(databaseClusterResources, lambdaSecurityGroup, auroraPgCRPolicy);
        auroraPgVector.node.addDependency(databaseClusterResources.auroraCluster);
    }
    createDatabaseCluster(postgreSQLVersion, existingVpc, clusterIdentifier) {
        const vpc = (0, vpc_helper_1.buildVpc)(this, {
            existingVpc: existingVpc,
            vpcName: `${this.node.id}-vpc`,
        });
        vpc.addFlowLog('VpcFlowLog', {
            destination: ec2.FlowLogDestination.toCloudWatchLogs(),
        });
        const auroraSecurityGroup = new ec2.SecurityGroup(this, 'AuroraSecurityGroup', {
            vpc,
            securityGroupName: 'aurora-security-group',
            description: 'Security group for access to Aurora from Lambda',
        });
        const auroraCluster = new rds.DatabaseCluster(this, 'AuroraCluster', {
            engine: rds.DatabaseClusterEngine.auroraPostgres({
                version: postgreSQLVersion,
            }),
            credentials: rds.Credentials.fromGeneratedSecret('postgres'),
            clusterIdentifier: clusterIdentifier ??
                (0, utils_1.generatePhysicalNameV2)(this, 'aurora-serverless', {
                    maxLength: 63,
                    lower: true,
                    separator: '-',
                }),
            defaultDatabaseName: this.databaseName,
            vpc,
            vpcSubnets: { subnetType: ec2.SubnetType.PRIVATE_ISOLATED },
            securityGroups: [auroraSecurityGroup],
            iamAuthentication: true,
            storageEncrypted: true,
            serverlessV2MinCapacity: 0.5,
            serverlessV2MaxCapacity: 4,
            writer: rds.ClusterInstance.serverlessV2('AuroraServerlessWriter'),
            readers: [
                rds.ClusterInstance.serverlessV2('AuroraServerlessReader', { scaleWithWriter: true }),
            ],
            removalPolicy: cdk.RemovalPolicy.DESTROY,
        });
        const resourceArn = cdk.Stack.of(this).formatArn({
            service: 'rds',
            resource: 'cluster',
            resourceName: auroraCluster.clusterIdentifier,
            arnFormat: cdk.ArnFormat.COLON_RESOURCE_NAME,
        });
        auroraCluster.addRotationSingleUser();
        const cfnDbCluster = auroraCluster.node.defaultChild;
        cfnDbCluster.addOverride('Properties.EnableHttpEndpoint', true);
        cdk_nag_1.NagSuppressions.addResourceSuppressions(auroraCluster, [
            {
                id: 'AwsSolutions-RDS10',
                reason: 'Deletion protection is disabled to make sure a customer can stop ' +
                    'incurring charges if they want to delete the construct.',
            },
        ], true);
        return {
            vpc,
            auroraCluster,
            resourceArn,
            secret: auroraCluster.secret,
            auroraSecurityGroup,
            clusterIdentifier: auroraCluster.clusterIdentifier,
        };
    }
}
exports.AmazonAuroraVectorStore = AmazonAuroraVectorStore;
_b = JSII_RTTI_SYMBOL_1;
AmazonAuroraVectorStore[_b] = { fqn: "@cdklabs/generative-ai-cdk-constructs.amazonaurora.AmazonAuroraVectorStore", version: "0.1.309" };
//# sourceMappingURL=data:application/json;base64,