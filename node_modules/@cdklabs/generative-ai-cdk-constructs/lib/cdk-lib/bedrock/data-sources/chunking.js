"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChunkingStrategy = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 * Knowledge base can split your source data into chunks. A chunk refers to an
 * excerpt from a data source that is returned when the knowledge base that it
 * belongs to is queried. You have the following options for chunking your
 * data. If you opt for NONE, then you may want to pre-process your files by
 * splitting them up such that each file corresponds to a chunk.
 */
var ChunkingStrategyType;
(function (ChunkingStrategyType) {
    /**
     * Amazon Bedrock splits your source data into chunks of the approximate size
     * that you set in the `fixedSizeChunkingConfiguration`.
     */
    ChunkingStrategyType["FIXED_SIZE"] = "FIXED_SIZE";
    /**
     * Splits documents into layers of chunks where the first layer contains large
     * chunks, and the second layer contains smaller chunks derived from the first
     * layer. You set the maximum parent chunk token size and the maximum child
     * chunk token size. You also set the absolute number of overlap tokens between
     * consecutive parent chunks and consecutive child chunks.
     */
    ChunkingStrategyType["HIERARCHICAL"] = "HIERARCHICAL";
    /**
     * Splits documents into semantically similar text chunks or groups of
     * sentences by using a foundation model. Note that there are additional
     * costs to using semantic chunking due to its use of a foundation model.
     */
    ChunkingStrategyType["SEMANTIC"] = "SEMANTIC";
    /**
     * Amazon Bedrock treats each file as one chunk. If you choose this option,
     * you may want to pre-process your documents by splitting them into separate
     * files.
     */
    ChunkingStrategyType["NONE"] = "NONE";
})(ChunkingStrategyType || (ChunkingStrategyType = {}));
class ChunkingStrategy {
    // ------------------------------------------------------
    // Static Methods for Customization
    // ------------------------------------------------------
    /** Method for customizing a fixed sized chunking strategy. */
    static fixedSize(props) {
        return {
            configuration: {
                chunkingStrategy: ChunkingStrategyType.FIXED_SIZE,
                fixedSizeChunkingConfiguration: props,
            },
        };
    }
    /**
     * Method for customizing a hierarchical chunking strategy.
     * For custom chunking, the maximum token chunk size depends on the model.
     * - Amazon Titan Text Embeddings: 8192
     * - Cohere Embed models: 512
    */
    static hierarchical(props) {
        return {
            configuration: {
                chunkingStrategy: ChunkingStrategyType.HIERARCHICAL,
                hierarchicalChunkingConfiguration: {
                    overlapTokens: props.overlapTokens,
                    levelConfigurations: [
                        { maxTokens: props.maxParentTokenSize },
                        { maxTokens: props.maxChildTokenSize },
                    ],
                },
            },
        };
    }
    /**
     * Method for customizing a semantic chunking strategy.
     * For custom chunking, the maximum token chunk size depends on the model.
     * - Amazon Titan Text Embeddings: 8192
     * - Cohere Embed models: 512
    */
    static semantic(props) {
        return {
            configuration: {
                chunkingStrategy: ChunkingStrategyType.SEMANTIC,
                semanticChunkingConfiguration: props,
            },
        };
    }
    /** Method for defining a no chunking strategy. */
    static noChunking() {
        return {
            configuration: {
                chunkingStrategy: ChunkingStrategyType.NONE,
            },
        };
    }
    constructor() { }
}
exports.ChunkingStrategy = ChunkingStrategy;
_a = JSII_RTTI_SYMBOL_1;
ChunkingStrategy[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.ChunkingStrategy", version: "0.1.309" };
// ------------------------------------------------------
// Static Constants for Easy Customization
// ------------------------------------------------------
/**
 * Fixed Sized Chunking with the default chunk size of 300 tokens and 20% overlap.
 */
ChunkingStrategy.DEFAULT = ChunkingStrategy.fixedSize({ maxTokens: 300, overlapPercentage: 20 });
/**
 * Fixed Sized Chunking with the default chunk size of 300 tokens and 20% overlap.
 * You can adjust these values based on your specific requirements using the
 * `ChunkingStrategy.fixedSize(params)` method.
 */
ChunkingStrategy.FIXED_SIZE = ChunkingStrategy.fixedSize({ maxTokens: 300, overlapPercentage: 20 });
/**
 * Hierarchical Chunking with the default for Cohere Models.
 * - Overlap tokens: 30
 * - Max parent token size: 500
 * - Max child token size: 100
 */
ChunkingStrategy.HIERARCHICAL_COHERE = ChunkingStrategy.hierarchical({ overlapTokens: 60, maxParentTokenSize: 500, maxChildTokenSize: 300 });
/**
 * Hierarchical Chunking with the default for Titan Models.
 * - Overlap tokens: 60
 * - Max parent token size: 1500
 * - Max child token size: 300
 */
ChunkingStrategy.HIERARCHICAL_TITAN = ChunkingStrategy.hierarchical({ overlapTokens: 60, maxParentTokenSize: 1500, maxChildTokenSize: 300 });
/**
 * Semantic Chunking with the default of bufferSize: 0,
 * breakpointPercentileThreshold: 95, and maxTokens: 300.
 * You can adjust these values based on your specific requirements using the
 * `ChunkingStrategy.semantic(params)` method.
 */
ChunkingStrategy.SEMANTIC = ChunkingStrategy.semantic({ bufferSize: 0, breakpointPercentileThreshold: 95, maxTokens: 300 });
/**
 * Amazon Bedrock treats each file as one chunk. Suitable for documents that
 * are already pre-processed or text split.
 */
ChunkingStrategy.NONE = ChunkingStrategy.noChunking();
//# sourceMappingURL=data:application/json;base64,