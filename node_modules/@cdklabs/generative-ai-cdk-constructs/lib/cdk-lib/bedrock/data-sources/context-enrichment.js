"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContextEnrichment = exports.EnrichmentStrategyConfigurationType = exports.ContextEnrichmentType = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
/**
 * Enum representing the type of context enrichment.
 */
var ContextEnrichmentType;
(function (ContextEnrichmentType) {
    /**
     * Uses a Bedrock Foundation Model for context enrichment.
     */
    ContextEnrichmentType["BEDROCK_FOUNDATION_MODEL"] = "BEDROCK_FOUNDATION_MODEL";
})(ContextEnrichmentType || (exports.ContextEnrichmentType = ContextEnrichmentType = {}));
/**
 * Enum representing the method to be used for enrichment strategy.
 */
var EnrichmentStrategyConfigurationType;
(function (EnrichmentStrategyConfigurationType) {
    EnrichmentStrategyConfigurationType["CHUNK_ENTITY_EXTRACTION"] = "CHUNK_ENTITY_EXTRACTION";
})(EnrichmentStrategyConfigurationType || (exports.EnrichmentStrategyConfigurationType = EnrichmentStrategyConfigurationType = {}));
/**
 * Abstract class representing a context enrichment strategy.
 * The enrichment stategy used to provide additional context.
 * For example, Neptune GraphRAG uses Amazon Bedrock foundation
 * models to perform chunk entity extraction.
 */
class ContextEnrichment {
    // ------------------------------------------------------
    // FM Enrichment Strategy
    // ------------------------------------------------------
    /**
     * Creates a Foundation Model-based enrichment strategy used to provide additional context
     * to the RAG application.
     */
    static foundationModel(props) {
        class FoundationModelContextEnrichment extends ContextEnrichment {
            constructor() {
                super(...arguments);
                this.configuration = {
                    type: ContextEnrichmentType.BEDROCK_FOUNDATION_MODEL,
                    bedrockFoundationModelConfiguration: {
                        modelArn: props.enrichmentModel.invokableArn,
                        enrichmentStrategyConfiguration: {
                            method: EnrichmentStrategyConfigurationType.CHUNK_ENTITY_EXTRACTION,
                        },
                    },
                };
            }
            generatePolicyStatements() {
                return [
                    new aws_iam_1.PolicyStatement({
                        actions: ['bedrock:InvokeModel*'],
                        resources: [props.enrichmentModel.invokableArn],
                    }),
                ];
            }
        }
        return new FoundationModelContextEnrichment();
    }
}
exports.ContextEnrichment = ContextEnrichment;
_a = JSII_RTTI_SYMBOL_1;
ContextEnrichment[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.ContextEnrichment", version: "0.1.309" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGV4dC1lbnJpY2htZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2Nkay1saWIvYmVkcm9jay9kYXRhLXNvdXJjZXMvY29udGV4dC1lbnJpY2htZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBY0EsaURBQXNEO0FBR3REOztHQUVHO0FBQ0gsSUFBWSxxQkFLWDtBQUxELFdBQVkscUJBQXFCO0lBQy9COztPQUVHO0lBQ0gsOEVBQXFELENBQUE7QUFDdkQsQ0FBQyxFQUxXLHFCQUFxQixxQ0FBckIscUJBQXFCLFFBS2hDO0FBRUQ7O0dBRUc7QUFDSCxJQUFZLG1DQUVYO0FBRkQsV0FBWSxtQ0FBbUM7SUFDN0MsMEZBQW1ELENBQUE7QUFDckQsQ0FBQyxFQUZXLG1DQUFtQyxtREFBbkMsbUNBQW1DLFFBRTlDO0FBWUQ7Ozs7O0dBS0c7QUFDSCxNQUFzQixpQkFBaUI7SUFDckMseURBQXlEO0lBQ3pELHlCQUF5QjtJQUN6Qix5REFBeUQ7SUFDekQ7OztPQUdHO0lBQ0ksTUFBTSxDQUFDLGVBQWUsQ0FBQyxLQUE0QztRQUN4RSxNQUFNLGdDQUFpQyxTQUFRLGlCQUFpQjtZQUFoRTs7Z0JBQ2tCLGtCQUFhLEdBQUc7b0JBQzlCLElBQUksRUFBRSxxQkFBcUIsQ0FBQyx3QkFBd0I7b0JBQ3BELG1DQUFtQyxFQUFFO3dCQUNuQyxRQUFRLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQyxZQUFZO3dCQUM1QywrQkFBK0IsRUFBRTs0QkFDL0IsTUFBTSxFQUFFLG1DQUFtQyxDQUFDLHVCQUF1Qjt5QkFDcEU7cUJBQ0Y7aUJBQ0YsQ0FBQztZQVVKLENBQUM7WUFSUSx3QkFBd0I7Z0JBQzdCLE9BQU87b0JBQ0wsSUFBSSx5QkFBZSxDQUFDO3dCQUNsQixPQUFPLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQzt3QkFDakMsU0FBUyxFQUFFLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxZQUFZLENBQUM7cUJBQ2hELENBQUM7aUJBQ0gsQ0FBQztZQUNKLENBQUM7U0FDRjtRQUVELE9BQU8sSUFBSSxnQ0FBZ0MsRUFBRSxDQUFDO0lBQ2hELENBQUM7O0FBL0JILDhDQXVDQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogIENvcHlyaWdodCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpLiBZb3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiAgd2l0aCB0aGUgTGljZW5zZS4gQSBjb3B5IG9mIHRoZSBMaWNlbnNlIGlzIGxvY2F0ZWQgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqICBvciBpbiB0aGUgJ2xpY2Vuc2UnIGZpbGUgYWNjb21wYW55aW5nIHRoaXMgZmlsZS4gVGhpcyBmaWxlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICdBUyBJUycgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFU1xuICogIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zXG4gKiAgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENmbkRhdGFTb3VyY2UgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtYmVkcm9jayc7XG5pbXBvcnQgeyBQb2xpY3lTdGF0ZW1lbnQgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtaWFtJztcbmltcG9ydCB7IElJbnZva2FibGUgfSBmcm9tICcuLi9tb2RlbHMnO1xuXG4vKipcbiAqIEVudW0gcmVwcmVzZW50aW5nIHRoZSB0eXBlIG9mIGNvbnRleHQgZW5yaWNobWVudC5cbiAqL1xuZXhwb3J0IGVudW0gQ29udGV4dEVucmljaG1lbnRUeXBlIHtcbiAgLyoqXG4gICAqIFVzZXMgYSBCZWRyb2NrIEZvdW5kYXRpb24gTW9kZWwgZm9yIGNvbnRleHQgZW5yaWNobWVudC5cbiAgICovXG4gIEJFRFJPQ0tfRk9VTkRBVElPTl9NT0RFTCA9ICdCRURST0NLX0ZPVU5EQVRJT05fTU9ERUwnLFxufVxuXG4vKipcbiAqIEVudW0gcmVwcmVzZW50aW5nIHRoZSBtZXRob2QgdG8gYmUgdXNlZCBmb3IgZW5yaWNobWVudCBzdHJhdGVneS5cbiAqL1xuZXhwb3J0IGVudW0gRW5yaWNobWVudFN0cmF0ZWd5Q29uZmlndXJhdGlvblR5cGUge1xuICBDSFVOS19FTlRJVFlfRVhUUkFDVElPTiA9ICdDSFVOS19FTlRJVFlfRVhUUkFDVElPTicsXG59XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgY29uZmlndXJpbmcgYSBGb3VuZGF0aW9uIE1vZGVsIGVucmljaG1lbnQgc3RyYXRlZ3kuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRm91bmRhdGlvbk1vZGVsQ29udGV4dEVucmljaG1lbnRQcm9wcyB7XG4gIC8qKlxuICAgKiBUaGUgQmVkcm9jayBGb3VuZGF0aW9uIE1vZGVsIGNvbmZpZ3VyYXRpb24gZm9yIGNvbnRleHQgZW5yaWNobWVudC5cbiAgICovXG4gIHJlYWRvbmx5IGVucmljaG1lbnRNb2RlbDogSUludm9rYWJsZTtcbn1cblxuLyoqXG4gKiBBYnN0cmFjdCBjbGFzcyByZXByZXNlbnRpbmcgYSBjb250ZXh0IGVucmljaG1lbnQgc3RyYXRlZ3kuXG4gKiBUaGUgZW5yaWNobWVudCBzdGF0ZWd5IHVzZWQgdG8gcHJvdmlkZSBhZGRpdGlvbmFsIGNvbnRleHQuXG4gKiBGb3IgZXhhbXBsZSwgTmVwdHVuZSBHcmFwaFJBRyB1c2VzIEFtYXpvbiBCZWRyb2NrIGZvdW5kYXRpb25cbiAqIG1vZGVscyB0byBwZXJmb3JtIGNodW5rIGVudGl0eSBleHRyYWN0aW9uLlxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ29udGV4dEVucmljaG1lbnQge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gRk0gRW5yaWNobWVudCBTdHJhdGVneVxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBGb3VuZGF0aW9uIE1vZGVsLWJhc2VkIGVucmljaG1lbnQgc3RyYXRlZ3kgdXNlZCB0byBwcm92aWRlIGFkZGl0aW9uYWwgY29udGV4dFxuICAgKiB0byB0aGUgUkFHIGFwcGxpY2F0aW9uLlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBmb3VuZGF0aW9uTW9kZWwocHJvcHM6IEZvdW5kYXRpb25Nb2RlbENvbnRleHRFbnJpY2htZW50UHJvcHMpOiBDb250ZXh0RW5yaWNobWVudCB7XG4gICAgY2xhc3MgRm91bmRhdGlvbk1vZGVsQ29udGV4dEVucmljaG1lbnQgZXh0ZW5kcyBDb250ZXh0RW5yaWNobWVudCB7XG4gICAgICBwdWJsaWMgcmVhZG9ubHkgY29uZmlndXJhdGlvbiA9IHtcbiAgICAgICAgdHlwZTogQ29udGV4dEVucmljaG1lbnRUeXBlLkJFRFJPQ0tfRk9VTkRBVElPTl9NT0RFTCxcbiAgICAgICAgYmVkcm9ja0ZvdW5kYXRpb25Nb2RlbENvbmZpZ3VyYXRpb246IHtcbiAgICAgICAgICBtb2RlbEFybjogcHJvcHMuZW5yaWNobWVudE1vZGVsLmludm9rYWJsZUFybixcbiAgICAgICAgICBlbnJpY2htZW50U3RyYXRlZ3lDb25maWd1cmF0aW9uOiB7XG4gICAgICAgICAgICBtZXRob2Q6IEVucmljaG1lbnRTdHJhdGVneUNvbmZpZ3VyYXRpb25UeXBlLkNIVU5LX0VOVElUWV9FWFRSQUNUSU9OLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9O1xuXG4gICAgICBwdWJsaWMgZ2VuZXJhdGVQb2xpY3lTdGF0ZW1lbnRzKCk6IFBvbGljeVN0YXRlbWVudFtdIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICBuZXcgUG9saWN5U3RhdGVtZW50KHtcbiAgICAgICAgICAgIGFjdGlvbnM6IFsnYmVkcm9jazpJbnZva2VNb2RlbConXSxcbiAgICAgICAgICAgIHJlc291cmNlczogW3Byb3BzLmVucmljaG1lbnRNb2RlbC5pbnZva2FibGVBcm5dLFxuICAgICAgICAgIH0pLFxuICAgICAgICBdO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgRm91bmRhdGlvbk1vZGVsQ29udGV4dEVucmljaG1lbnQoKTtcbiAgfVxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gUHJvcGVydGllc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLyoqIFRoZSBDbG91ZEZvcm1hdGlvbiBwcm9wZXJ0eSByZXByZXNlbnRhdGlvbiBvZiB0aGlzIGNvbmZpZ3VyYXRpb24gKi9cbiAgcHVibGljIGFic3RyYWN0IGNvbmZpZ3VyYXRpb246IENmbkRhdGFTb3VyY2UuQ29udGV4dEVucmljaG1lbnRDb25maWd1cmF0aW9uUHJvcGVydHk7XG5cbiAgcHVibGljIGFic3RyYWN0IGdlbmVyYXRlUG9saWN5U3RhdGVtZW50cygpOiBQb2xpY3lTdGF0ZW1lbnRbXTtcbn1cbiJdfQ==