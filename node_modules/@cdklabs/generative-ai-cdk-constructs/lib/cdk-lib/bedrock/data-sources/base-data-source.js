"use strict";
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataSource = exports.DataSourceNew = exports.DataSourceBase = exports.DataSourceType = exports.DataDeletionPolicy = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const aws_cdk_lib_1 = require("aws-cdk-lib");
/**
 * Specifies the policy for handling data when a data source resource is deleted.
 * This policy affects the vector embeddings created from the data source.
 */
var DataDeletionPolicy;
(function (DataDeletionPolicy) {
    /**
     * Deletes all vector embeddings derived from the data source upon deletion
     * of a data source resource.
     */
    DataDeletionPolicy["DELETE"] = "DELETE";
    /**
     * Retains all vector embeddings derived from the data source even after
     * deletion of a data source resource.
     */
    DataDeletionPolicy["RETAIN"] = "RETAIN";
})(DataDeletionPolicy || (exports.DataDeletionPolicy = DataDeletionPolicy = {}));
/**
 * Represents the types of data sources that can be associated to an Knowledge Base.
 */
var DataSourceType;
(function (DataSourceType) {
    /**
     * Amazon S3 Bucket data source.
     */
    DataSourceType["S3"] = "S3";
    /**
     * Confluence Cloud Instance data source.
     */
    DataSourceType["CONFLUENCE"] = "CONFLUENCE";
    /**
     * Salesforce instance data source.
     */
    DataSourceType["SALESFORCE"] = "SALESFORCE";
    /**
     * Microsoft SharePoint instance data source.
     */
    DataSourceType["SHAREPOINT"] = "SHAREPOINT";
    /**
     * Web Crawler data source.
     * Extracts content from authorized public web pages using a crawler.
     */
    DataSourceType["WEB_CRAWLER"] = "WEB";
    /**
     * Custom data source.
     * A custom data source allows the flexibility to automatically ingest documents
     * into your vector database directly.
     */
    DataSourceType["CUSTOM"] = "CUSTOM";
    /**
     * Redshift Metadata data source.
     */
    DataSourceType["REDSHIFT_METADATA"] = "REDSHIFT_METADATA";
})(DataSourceType || (exports.DataSourceType = DataSourceType = {}));
/**
 * Specifies the base class for all data source resources (imported and new).
 */
class DataSourceBase extends aws_cdk_lib_1.Resource {
}
exports.DataSourceBase = DataSourceBase;
_a = JSII_RTTI_SYMBOL_1;
DataSourceBase[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.DataSourceBase", version: "0.1.309" };
/**
 * Specifies the base class for all NEW data source resources of ANY type.
 */
class DataSourceNew extends DataSourceBase {
    // ------------------------------------------------------
    // Common methods for ALL NEW data sources
    // ------------------------------------------------------
    /**
     * Adds appropriate permissions to the KB execution role needed by the data source.
     */
    handleCommonPermissions(props) {
        let statementsToAdd = [];
        // Parsing strategy requires access to the parsing FM, so be sure to add permissions
        if (props.parsingStrategy) {
            statementsToAdd.push(...props.parsingStrategy.generatePolicyStatements());
        }
        // Custom transformation requires invoke permissions for the Lambda
        if (props.customTransformation) {
            statementsToAdd.push(...props.customTransformation.generatePolicyStatements(this));
        }
        // Context Enrichment requires invoke permissions for the enriching FM
        if (props.contextEnrichment) {
            statementsToAdd.push(...props.contextEnrichment.generatePolicyStatements());
        }
        // Add the permission statements to the KB execution role
        statementsToAdd.forEach((statement) => {
            this.knowledgeBase.role.addToPrincipalPolicy(statement);
        });
    }
    /**
     * Formats the data source configuration properties for CloudFormation.
     */
    formatAsCfnProps(props, dataSourceConfiguration) {
        return {
            dataDeletionPolicy: props.dataDeletionPolicy,
            dataSourceConfiguration: dataSourceConfiguration,
            description: props.description,
            knowledgeBaseId: this.knowledgeBase.knowledgeBaseId,
            name: this.dataSourceName,
            serverSideEncryptionConfiguration: props.kmsKey
                ? {
                    kmsKeyArn: props.kmsKey.keyArn,
                }
                : undefined,
            vectorIngestionConfiguration: props.chunkingStrategy ||
                props.parsingStrategy ||
                props.customTransformation ||
                props.contextEnrichment
                ? {
                    chunkingConfiguration: props.chunkingStrategy?.configuration,
                    parsingConfiguration: props.parsingStrategy?.configuration,
                    customTransformationConfiguration: props.customTransformation?.configuration,
                    contextEnrichmentConfiguration: props.contextEnrichment?.configuration,
                }
                : undefined,
        };
    }
}
exports.DataSourceNew = DataSourceNew;
_b = JSII_RTTI_SYMBOL_1;
DataSourceNew[_b] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.DataSourceNew", version: "0.1.309" };
class DataSource extends DataSourceBase {
    static fromDataSourceId(scope, id, dataSourceId) {
        return new DataSource(scope, id, dataSourceId);
    }
    constructor(scope, id, dataSourceId) {
        super(scope, id);
        this.dataSourceId = dataSourceId;
    }
}
exports.DataSource = DataSource;
_c = JSII_RTTI_SYMBOL_1;
DataSource[_c] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.DataSource", version: "0.1.309" };
//# sourceMappingURL=data:application/json;base64,