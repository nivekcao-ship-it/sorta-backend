"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SalesforceDataSource = exports.SalesforceObjectType = exports.SalesforceDataSourceAuthType = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const aws_bedrock_1 = require("aws-cdk-lib/aws-bedrock");
const base_data_source_1 = require("./base-data-source");
const utils_1 = require("../../../common/helpers/utils");
/**
 * Represents the authentication types available for connecting to a Salesforce data source.
 */
var SalesforceDataSourceAuthType;
(function (SalesforceDataSourceAuthType) {
    /**
     * Your secret authentication credentials in AWS Secrets Manager should include:
     * - `consumerKey` (app client ID)
     * - `consumerSecret` (client secret)
     * - `authenticationUrl`
     */
    SalesforceDataSourceAuthType["OAUTH2_CLIENT_CREDENTIALS"] = "OAUTH2_CLIENT_CREDENTIALS";
})(SalesforceDataSourceAuthType || (exports.SalesforceDataSourceAuthType = SalesforceDataSourceAuthType = {}));
/**
 * Represents the Salesforce object types that can be accessed by the data source connector.
 */
var SalesforceObjectType;
(function (SalesforceObjectType) {
    SalesforceObjectType["ACCOUNT"] = "Account";
    SalesforceObjectType["ATTACHMENT"] = "Attachment";
    SalesforceObjectType["CAMPAIGN"] = "Campaign";
    SalesforceObjectType["CONTENT_VERSION"] = "ContentVersion";
    SalesforceObjectType["PARTNER"] = "Partner";
    SalesforceObjectType["PRICEBOOK_2"] = "Pricebook2";
    SalesforceObjectType["CASE"] = "Case";
    SalesforceObjectType["CONTACT"] = "Contact";
    SalesforceObjectType["CONTRACT"] = "Contract";
    SalesforceObjectType["DOCUMENT"] = "Document";
    SalesforceObjectType["IDEA"] = "Idea";
    SalesforceObjectType["LEAD"] = "Lead";
    SalesforceObjectType["OPPORTUNITY"] = "Opportunity";
    SalesforceObjectType["PRODUCT_2"] = "Product2";
    SalesforceObjectType["SOLUTION"] = "Solution";
    SalesforceObjectType["TASK"] = "Task";
    SalesforceObjectType["FEED_ITEM"] = "FeedItem";
    SalesforceObjectType["FEED_COMMENT"] = "FeedComment";
    SalesforceObjectType["KNOWLEDGE_KAV"] = "Knowledge__kav";
    SalesforceObjectType["USER"] = "User";
    SalesforceObjectType["COLLABORATION_GROUP"] = "CollaborationGroup";
})(SalesforceObjectType || (exports.SalesforceObjectType = SalesforceObjectType = {}));
/**
 * Sets up an data source to be added to a knowledge base.
 */
class SalesforceDataSource extends base_data_source_1.DataSourceNew {
    constructor(scope, id, props) {
        super(scope, id);
        // Assign attributes
        this.knowledgeBase = props.knowledgeBase;
        this.dataSourceType = base_data_source_1.DataSourceType.SALESFORCE;
        this.dataSourceName =
            props.dataSourceName ?? (0, utils_1.generatePhysicalNameV2)(this, 'sfdc-ds', { maxLength: 40, lower: true, separator: '-' });
        this.endpoint = props.endpoint;
        this.authSecret = props.authSecret;
        this.kmsKey = props.kmsKey;
        // ------------------------------------------------------
        // Manage permissions for the data source
        // ------------------------------------------------------
        this.handleCommonPermissions(props);
        this.authSecret.grantRead(this.knowledgeBase.role);
        // ------------------------------------------------------
        // ------------------------------------------------------
        // L1 Instantiation
        // ------------------------------------------------------
        this.__resource = new aws_bedrock_1.CfnDataSource(this, 'DataSource', {
            ...this.formatAsCfnProps(props, {
                type: this.dataSourceType,
                salesforceConfiguration: {
                    sourceConfiguration: {
                        authType: SalesforceDataSourceAuthType.OAUTH2_CLIENT_CREDENTIALS,
                        credentialsSecretArn: this.authSecret.secretArn,
                        hostUrl: this.endpoint,
                    },
                    crawlerConfiguration: props.filters
                        ? {
                            filterConfiguration: {
                                type: 'PATTERN',
                                patternObjectFilter: {
                                    filters: props.filters?.map(item => ({
                                        objectType: item.objectType,
                                        inclusionFilters: item.includePatterns,
                                        exclusionFilters: item.excludePatterns,
                                    })),
                                },
                            },
                        }
                        : undefined,
                },
            }),
        });
        this.dataSourceId = this.__resource.attrDataSourceId;
    }
}
exports.SalesforceDataSource = SalesforceDataSource;
_a = JSII_RTTI_SYMBOL_1;
SalesforceDataSource[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.SalesforceDataSource", version: "0.1.309" };
//# sourceMappingURL=data:application/json;base64,