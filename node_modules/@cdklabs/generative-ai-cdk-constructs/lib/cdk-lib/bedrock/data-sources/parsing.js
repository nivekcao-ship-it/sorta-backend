"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParsingStrategy = exports.ParsingStrategyType = exports.ParsingModality = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const default_parsing_prompt_1 = require("./default-parsing-prompt");
var ParsingModality;
(function (ParsingModality) {
    /**
     * Specifies whether to enable parsing of multimodal data, including both text and/or images.
     */
    ParsingModality["MULTIMODAL"] = "MULTIMODAL";
})(ParsingModality || (exports.ParsingModality = ParsingModality = {}));
/**
 * Enum representing the types of parsing strategies available for Amazon Bedrock Knowledge Bases.
 * @see https://docs.aws.amazon.com/bedrock/latest/userguide/kb-advanced-parsing.html
 */
var ParsingStrategyType;
(function (ParsingStrategyType) {
    /**
     * Uses a Bedrock Foundation Model for advanced parsing of non-textual information from documents.
     */
    ParsingStrategyType["FOUNDATION_MODEL"] = "BEDROCK_FOUNDATION_MODEL";
    /**
     * Processes multimodal data using Bedrock Data Automation (BDA). It leverages
     * generative AI to automate the transformation of multi-modal data into structured formats.
     * If you choose a foundation model or Amazon Bedrock Data Automation for parsing and it fails
     * to parse a file, the Amazon Bedrock default parser is used instead.
     */
    ParsingStrategyType["DATA_AUTOMATION"] = "BEDROCK_DATA_AUTOMATION";
})(ParsingStrategyType || (exports.ParsingStrategyType = ParsingStrategyType = {}));
/**
 * Represents an advanced parsing strategy configuration for Knowledge Base ingestion.
 * @see https://docs.aws.amazon.com/bedrock/latest/userguide/kb-chunking-parsing.html#kb-advanced-parsing
 */
class ParsingStrategy {
    // ------------------------------------------------------
    // FM Parsing Strategy
    // ------------------------------------------------------
    /**
     * Creates a Foundation Model-based parsing strategy for extracting non-textual information
     * from documents such as tables and charts.
     * - Additional costs apply when using advanced parsing due to foundation model usage.
     * - There are limits on file types (PDF) and total data that can be parsed using advanced parsing.
     * @see https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-ds.html#kb-ds-supported-doc-formats-limits
     */
    static foundationModel(props) {
        class FoundationModelTransformation extends ParsingStrategy {
            constructor() {
                super(...arguments);
                /** The CloudFormation property representation of this configuration */
                this.configuration = {
                    bedrockFoundationModelConfiguration: {
                        modelArn: props.parsingModel.invokableArn,
                        parsingPrompt: {
                            parsingPromptText: props.parsingPrompt ?? default_parsing_prompt_1.DEFAULT_PARSING_PROMPT,
                        },
                    },
                    parsingStrategy: ParsingStrategyType.FOUNDATION_MODEL,
                };
            }
            generatePolicyStatements() {
                return [
                    new aws_iam_1.PolicyStatement({
                        actions: ['bedrock:InvokeModel'],
                        resources: [props.parsingModel.invokableArn],
                    }),
                ];
            }
        }
        return new FoundationModelTransformation();
    }
    /**
     * Creates a Bedrock Data Automation-based parsing strategy for processing multimodal data.
     * It leverages generative AI to automate the transformation of multi-modal data into structured formats.
     * If the parsing fails, the Amazon Bedrock default parser is used instead.
     */
    static bedrockDataAutomation() {
        class BedrockDataAutomationTransformation extends ParsingStrategy {
            constructor() {
                super(...arguments);
                /** The CloudFormation property representation of this configuration */
                this.configuration = {
                    bedrockDataAutomationConfiguration: {
                        parsingModality: ParsingModality.MULTIMODAL,
                    },
                    parsingStrategy: ParsingStrategyType.DATA_AUTOMATION,
                };
            }
            generatePolicyStatements() {
                return [
                    new aws_iam_1.PolicyStatement({
                        actions: ['bedrock:InvokeDataAutomationAsync'],
                        resources: [
                            `arn:${aws_cdk_lib_1.Aws.PARTITION}:bedrock:${aws_cdk_lib_1.Aws.REGION}:${aws_cdk_lib_1.Aws.PARTITION}:data-automation-project/public-rag-default`,
                            `arn:${aws_cdk_lib_1.Aws.PARTITION}:bedrock:*:${aws_cdk_lib_1.Aws.ACCOUNT_ID}:data-automation-profile/us.data-automation-v1`, // see https://docs.aws.amazon.com/bedrock/latest/userguide/bda-cris.html
                        ],
                    }),
                    new aws_iam_1.PolicyStatement({
                        actions: ['bedrock:GetDataAutomationStatus'],
                        resources: [
                            `arn:${aws_cdk_lib_1.Aws.PARTITION}:bedrock:${aws_cdk_lib_1.Aws.REGION}:${aws_cdk_lib_1.Aws.ACCOUNT_ID}:data-automation-invocation/*`,
                        ],
                    }),
                ];
            }
        }
        return new BedrockDataAutomationTransformation();
    }
}
exports.ParsingStrategy = ParsingStrategy;
_a = JSII_RTTI_SYMBOL_1;
ParsingStrategy[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.ParsingStrategy", version: "0.1.309" };
//# sourceMappingURL=data:application/json;base64,