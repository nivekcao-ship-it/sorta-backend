"use strict";
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.GuardrailVersion = exports.GuardrailVersionBase = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_bedrock_1 = require("aws-cdk-lib/aws-bedrock");
const helpers_internal_1 = require("aws-cdk-lib/core/lib/helpers-internal");
const guardrails_1 = require("./guardrails");
/******************************************************************************
 *                        ABSTRACT BASE CLASS
 *****************************************************************************/
/**
 * Abstract base class for a Guardrail Version.
 * Contains methods and attributes valid for Guardrail Versions either created
 * with CDK or imported.
 */
class GuardrailVersionBase extends aws_cdk_lib_1.Resource {
    constructor(scope, id) {
        super(scope, id);
    }
}
exports.GuardrailVersionBase = GuardrailVersionBase;
/******************************************************************************
 *                        NEW CONSTRUCT DEFINITION
 *****************************************************************************/
/**
 * Class to create a Guardrail Version with CDK.
 * @cloudformationResource AWS::Bedrock::GuardrailVersion
 */
class GuardrailVersion extends GuardrailVersionBase {
    /**
     * Import a Guardrail Version from its attributes.
     */
    static fromGuardrailVersionAttributes(scope, id, attrs) {
        class Import extends GuardrailVersionBase {
            constructor() {
                super(...arguments);
                this.guardrail = guardrails_1.Guardrail.fromGuardrailAttributes(scope, `Guardrail-${id}`, {
                    guardrailArn: attrs.guardrailArn,
                    guardrailVersion: attrs.guardrailVersion,
                });
                this.guardrailVersion = attrs.guardrailVersion;
            }
        }
        return new Import(scope, id);
    }
    /**
     *
     */
    constructor(scope, id, props) {
        super(scope, id);
        this.guardrail = props.guardrail;
        // Compute hash from guardrail, to recreate the resource when guardrail has changed
        const hash = (0, helpers_internal_1.md5hash)(props.guardrail.lastUpdated ?? 'Default');
        this._resource = new aws_bedrock_1.CfnGuardrailVersion(this, `GuardrailVersion-${hash.slice(0, 16)}`, {
            guardrailIdentifier: this.guardrail.guardrailId,
            description: props.description,
        });
        this.guardrailVersion = this._resource.attrVersion;
    }
}
exports.GuardrailVersion = GuardrailVersion;
//# sourceMappingURL=data:application/json;base64,