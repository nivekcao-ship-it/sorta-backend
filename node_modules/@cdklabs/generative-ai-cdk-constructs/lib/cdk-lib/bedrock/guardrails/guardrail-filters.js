"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContextualGroundingFilterType = exports.GuardrailAction = exports.PIIType = exports.ManagedWordFilterType = exports.Topic = exports.ContentFilterType = exports.ModalityType = exports.ContentFilterStrength = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
/******************************************************************************
 *                             CONTENT FILTERS
 *****************************************************************************/
/**
 * The strength of the content filter. As you increase the filter strength,
 * the likelihood of filtering harmful content increases and the probability
 * of seeing harmful content in your application reduces.
 */
var ContentFilterStrength;
(function (ContentFilterStrength) {
    ContentFilterStrength["NONE"] = "NONE";
    ContentFilterStrength["LOW"] = "LOW";
    ContentFilterStrength["MEDIUM"] = "MEDIUM";
    ContentFilterStrength["HIGH"] = "HIGH";
})(ContentFilterStrength || (exports.ContentFilterStrength = ContentFilterStrength = {}));
/**
 * The type of modality that can be used in content filters.
 */
var ModalityType;
(function (ModalityType) {
    /**
     * Text modality for content filters.
     */
    ModalityType["TEXT"] = "TEXT";
    /**
     * Image modality for content filters.
     */
    ModalityType["IMAGE"] = "IMAGE";
})(ModalityType || (exports.ModalityType = ModalityType = {}));
/**
 * The type of harmful category usable in a content filter.
 */
var ContentFilterType;
(function (ContentFilterType) {
    /**
     * Describes input prompts and model responses that indicates sexual interest, activity,
     * or arousal using direct or indirect references to body parts, physical traits, or sex.
     */
    ContentFilterType["SEXUAL"] = "SEXUAL";
    /**
     * Describes input prompts and model responses that includes glorification of or threats
     * to inflict physical pain, hurt, or injury toward a person, group or thing.
     */
    ContentFilterType["VIOLENCE"] = "VIOLENCE";
    /**
     * Describes input prompts and model responses that discriminate, criticize, insult,
     * denounce, or dehumanize a person or group on the basis of an identity (such as race,
     * ethnicity, gender, religion, sexual orientation, ability, and national origin).
     */
    ContentFilterType["HATE"] = "HATE";
    /**
     * Describes input prompts and model responses that includes demeaning, humiliating,
     * mocking, insulting, or belittling language. This type of language is also labeled
     * as bullying.
     */
    ContentFilterType["INSULTS"] = "INSULTS";
    /**
     * Describes input prompts and model responses that seeks or provides information
     * about engaging in misconduct activity, or harming, defrauding, or taking advantage
     * of a person, group or institution.
     */
    ContentFilterType["MISCONDUCT"] = "MISCONDUCT";
    /**
     * Enable to detect and block user inputs attempting to override system instructions.
     * To avoid misclassifying system prompts as a prompt attack and ensure that the filters
     * are selectively applied to user inputs, use input tagging.
     */
    ContentFilterType["PROMPT_ATTACK"] = "PROMPT_ATTACK";
})(ContentFilterType || (exports.ContentFilterType = ContentFilterType = {}));
/**
 * Defines a topic to deny.
 */
class Topic {
    static custom(props) {
        return new Topic(props);
    }
    constructor(props) {
        (this.name = props.name), (this.definition = props.definition), (this.examples = props.examples);
    }
}
exports.Topic = Topic;
_a = JSII_RTTI_SYMBOL_1;
Topic[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.Topic", version: "0.1.309" };
Topic.FINANCIAL_ADVICE = new Topic({
    name: 'Financial_Advice',
    definition: "'Discussions that involve providing guidance, recommendations, or suggestions related to managing, investing, or handling finances, investments, or assets.",
    examples: [
        'Can you suggest some good stocks to invest in right now?',
        "What's the best way to save for retirement?",
        'Should I put my money in a high-risk investment?',
        'How can I maximize my returns on investments?',
        'Is it a good time to buy real estate?',
    ],
});
Topic.POLITICAL_ADVICE = new Topic({
    name: 'Political_Advice',
    definition: 'Conversations that express views, opinions, or endorsements related to political parties, political ideologies, elections, or political figures.',
    examples: [
        "What's your stance on the current government policies?",
        'Do you support party X or Y in the upcoming election?',
        'Can you tell me which political party is better?',
        'What do you think about the new policy introduced by the president?',
        'Should I vote for this candidate?',
    ],
});
Topic.MEDICAL_ADVICE = new Topic({
    name: 'Medical_Advice',
    definition: 'Providing recommendations, diagnosis, treatment options, or guidance on medical conditions, symptoms, medications, or health-related issues.',
    examples: [
        'What should I do to treat a persistent cough?',
        'Can you recommend some medication for my headache?',
        'What are the symptoms of a specific medical condition?',
        'Is this drug effective for treating my illness?',
        "Do I need to see a doctor for this pain I'm experiencing?",
    ],
});
Topic.INAPPROPRIATE_CONTENT = new Topic({
    name: 'Inappropriate_Content',
    definition: 'Any discussions or references that include hate speech, discriminatory remarks, sexual content, or explicit language.',
    examples: [
        'Why are people from X country so [discriminatory remark]?',
        'Can you tell me a dirty joke?',
        '[Use of explicit language]',
        'This service is as bad as [hate speech].',
        'Do you have any adult content or products?',
    ],
});
Topic.LEGAL_ADVICE = new Topic({
    name: 'Legal_Advice',
    definition: 'Offering guidance or suggestions on legal matters, legal actions, interpretation of laws, or legal rights and responsibilities.',
    examples: [
        'Can I sue someone for this?',
        'What are my legal rights in this situation?',
        'Is this action against the law?',
        'What should I do to file a legal complaint?',
        'Can you explain this law to me?',
    ],
});
var ManagedWordFilterType;
(function (ManagedWordFilterType) {
    ManagedWordFilterType["PROFANITY"] = "PROFANITY";
})(ManagedWordFilterType || (exports.ManagedWordFilterType = ManagedWordFilterType = {}));
/******************************************************************************
 *                   SENSITIVE INFORMATION FILTERS - PII
 *****************************************************************************/
var PIIType;
(function (PIIType) {
    /**
     * Types of PII that are general, and not domain-specific.
     */
    let General;
    (function (General) {
        /**
         * A physical address, such as "100 Main Street, Anytown, USA" or "Suite #12,
         * Building 123". An address can include information such as the street, building,
         * location, city, state, country, county, zip code, precinct, and neighborhood.
         */
        General["ADDRESS"] = "ADDRESS";
        /**
         * An individual's age, including the quantity and unit of time.
         */
        General["AGE"] = "AGE";
        /**
         * The number assigned to a driver's license, which is an official document
         * permitting an individual to operate one or more motorized vehicles on a
         * public road. A driver's license number consists of alphanumeric characters.
         */
        General["DRIVER_ID"] = "DRIVER_ID";
        /**
         * An email address, such as marymajor@email.com.
         */
        General["EMAIL"] = "EMAIL";
        /**
         * A license plate for a vehicle is issued by the state or country where the
         * vehicle is registered. The format for passenger vehicles is typically five
         * to eight digits, consisting of upper-case letters and numbers. The format
         * varies depending on the location of the issuing state or country.
         */
        General["LICENSE_PLATE"] = "LICENSE_PLATE";
        /**
         * An individual's name. This entity type does not include titles, such as Dr.,
         *  Mr., Mrs., or Miss.
         */
        General["NAME"] = "NAME";
        /**
         * An alphanumeric string that is used as a password, such as "*very20special#pass*".
         */
        General["PASSWORD"] = "PASSWORD";
        /**
         * A phone number. This entity type also includes fax and pager numbers.
         */
        General["PHONE"] = "PHONE";
        /**
         * A user name that identifies an account, such as a login name, screen name,
         * nick name, or handle.
         */
        General["USERNAME"] = "USERNAME";
        /**
         * A Vehicle Identification Number (VIN) uniquely identifies a vehicle. VIN
         * content and format are defined in the ISO 3779 specification. Each country
         * has specific codes and formats for VINs.
         */
        General["VEHICLE_IDENTIFICATION_NUMBER"] = "VEHICLE_IDENTIFICATION_NUMBER";
    })(General = PIIType.General || (PIIType.General = {}));
    /**
     * Types of PII in the domain of Finance.
     */
    let Finance;
    (function (Finance) {
        /**
         * A three-digit card verification code (CVV) that is present on VISA, MasterCard,
         * and Discover credit and debit cards. For American Express credit or debit cards,
         * the CVV is a four-digit numeric code.
         */
        Finance["CREDIT_DEBIT_CARD_CVV"] = "CREDIT_DEBIT_CARD_CVV";
        /**
         * The expiration date for a credit or debit card. This number is usually four digits
         * long and is often formatted as month/year or MM/YY. Guardrails recognizes expiration
         * dates such as 01/21, 01/2021, and Jan 2021.
         */
        Finance["CREDIT_DEBIT_CARD_EXPIRY"] = "CREDIT_DEBIT_CARD_EXPIRY";
        /**
         * The number for a credit or debit card. These numbers can vary from 13 to 16 digits
         * in length.
         */
        Finance["CREDIT_DEBIT_CARD_NUMBER"] = "CREDIT_DEBIT_CARD_NUMBER";
        /**
         * A four-digit personal identification number (PIN) with which you can access your
         * bank account.
         */
        Finance["PIN"] = "PIN";
        /**
         * A SWIFT code is a standard format of Bank Identifier Code (BIC) used to specify a
         * particular bank or branch. Banks use these codes for money transfers such as
         * international wire transfers. SWIFT codes consist of eight or 11 characters.
         */
        Finance["SWIFT_CODE"] = "SWIFT_CODE";
        /**
         * An International Bank Account Number (IBAN). It has specific formats in each country.
         */
        Finance["INTERNATIONAL_BANK_ACCOUNT_NUMBER"] = "INTERNATIONAL_BANK_ACCOUNT_NUMBER";
    })(Finance = PIIType.Finance || (PIIType.Finance = {}));
    /**
     * Types of PII in the domain of IT (Information Technology).
     */
    let InformationTechnology;
    (function (InformationTechnology) {
        /**
         * A web address, such as www.example.com.
         */
        InformationTechnology["URL"] = "URL";
        /**
         * An IPv4 address, such as 198.51.100.0.
         */
        InformationTechnology["IP_ADDRESS"] = "IP_ADDRESS";
        /**
         * A media access control (MAC) address assigned to a network interface.
         */
        InformationTechnology["MAC_ADDRESS"] = "MAC_ADDRESS";
        /**
         * A unique identifier that's associated with a secret access key. You use
         * the access key ID and secret access key to sign programmatic AWS requests
         * cryptographically.
         */
        InformationTechnology["AWS_ACCESS_KEY"] = "AWS_ACCESS_KEY";
        /**
         * A unique identifier that's associated with a secret access key. You use
         * the access key ID and secret access key to sign programmatic AWS requests
         * cryptographically.
         */
        InformationTechnology["AWS_SECRET_KEY"] = "AWS_SECRET_KEY";
    })(InformationTechnology = PIIType.InformationTechnology || (PIIType.InformationTechnology = {}));
    /**
     * Types of PII specific to the USA.
     */
    let USASpecific;
    (function (USASpecific) {
        /**
         * A US bank account number, which is typically 10 to 12 digits long.
         */
        USASpecific["US_BANK_ACCOUNT_NUMBER"] = "US_BANK_ACCOUNT_NUMBER";
        /**
         * A US bank account routing number. These are typically nine digits long.
         */
        USASpecific["US_BANK_ROUTING_NUMBER"] = "US_BANK_ROUTING_NUMBER";
        /**
         * A US Individual Taxpayer Identification Number (ITIN) is a nine-digit number
         * that starts with a "9" and contain a "7" or "8" as the fourth digit.
         */
        USASpecific["US_INDIVIDUAL_TAX_IDENTIFICATION_NUMBER"] = "US_INDIVIDUAL_TAX_IDENTIFICATION_NUMBER";
        /**
         * A US passport number. Passport numbers range from six to nine alphanumeric characters.
         */
        USASpecific["US_PASSPORT_NUMBER"] = "US_PASSPORT_NUMBER";
        /**
         * A US Social Security Number (SSN) is a nine-digit number that is issued to US citizens,
         * permanent residents, and temporary working residents.
         */
        USASpecific["US_SOCIAL_SECURITY_NUMBER"] = "US_SOCIAL_SECURITY_NUMBER";
    })(USASpecific = PIIType.USASpecific || (PIIType.USASpecific = {}));
    /**
     * Types of PII specific to Canada.
     */
    let CanadaSpecific;
    (function (CanadaSpecific) {
        /**
         * A Canadian Health Service Number is a 10-digit unique identifier,
         * required for individuals to access healthcare benefits.
         */
        CanadaSpecific["CA_HEALTH_NUMBER"] = "CA_HEALTH_NUMBER";
        /**
         * A Canadian Social Insurance Number (SIN) is a nine-digit unique identifier,
         * required for individuals to access government programs and benefits.
         */
        CanadaSpecific["CA_SOCIAL_INSURANCE_NUMBER"] = "CA_SOCIAL_INSURANCE_NUMBER";
    })(CanadaSpecific = PIIType.CanadaSpecific || (PIIType.CanadaSpecific = {}));
    /**
     * Types of PII specific to the United Kingdom (UK).
     */
    let UKSpecific;
    (function (UKSpecific) {
        /**
         * A UK National Health Service Number is a 10-17 digit number, such as 485 777 3456.
         */
        UKSpecific["UK_NATIONAL_HEALTH_SERVICE_NUMBER"] = "UK_NATIONAL_HEALTH_SERVICE_NUMBER";
        /**
         * A UK National Insurance Number (NINO) provides individuals with access to National
         * Insurance (social security) benefits. It is also used for some purposes in the UK
         * tax system.
         */
        UKSpecific["UK_NATIONAL_INSURANCE_NUMBER"] = "UK_NATIONAL_INSURANCE_NUMBER";
        /**
         * A UK Unique Taxpayer Reference (UTR) is a 10-digit number that identifies a
         * taxpayer or a business.
         */
        UKSpecific["UK_UNIQUE_TAXPAYER_REFERENCE_NUMBER"] = "UK_UNIQUE_TAXPAYER_REFERENCE_NUMBER";
    })(UKSpecific = PIIType.UKSpecific || (PIIType.UKSpecific = {}));
})(PIIType || (exports.PIIType = PIIType = {}));
/**
 * Guardrail action when a sensitive entity is detected.
 */
var GuardrailAction;
(function (GuardrailAction) {
    /**
     * If sensitive information is detected in the prompt or response, the guardrail
     * blocks all the content and returns a message that you configure.
     */
    GuardrailAction["BLOCK"] = "BLOCK";
    /**
     * If sensitive information is detected in the model response, the guardrail masks
     * it with an identifier, the sensitive information is masked and replaced with
     * identifier tags (for example: [NAME-1], [NAME-2], [EMAIL-1], etc.).
     */
    GuardrailAction["ANONYMIZE"] = "ANONYMIZE";
    /**
     * Do not take any action.
     */
    GuardrailAction["NONE"] = "NONE";
})(GuardrailAction || (exports.GuardrailAction = GuardrailAction = {}));
/******************************************************************************
 *                      CONTEXTUAL GROUNDING FILTERS
 *****************************************************************************/
/**
 * The type of contextual grounding filter.
 */
var ContextualGroundingFilterType;
(function (ContextualGroundingFilterType) {
    /**
     * Grounding score represents the confidence that the model response is factually
     * correct and grounded in the source. If the model response has a lower score than
     * the defined threshold, the response will be blocked and the configured blocked
     * message will be returned to the user. A higher threshold level blocks more responses.
     */
    ContextualGroundingFilterType["GROUNDING"] = "GROUNDING";
    /**
     * Relevance score represents the confidence that the model response is relevant
     * to the user's query. If the model response has a lower score than the defined
     * threshold, the response will be blocked and the configured blocked message will
     * be returned to the user. A higher threshold level blocks more responses.
     */
    ContextualGroundingFilterType["RELEVANCE"] = "RELEVANCE";
})(ContextualGroundingFilterType || (exports.ContextualGroundingFilterType = ContextualGroundingFilterType = {}));
//# sourceMappingURL=data:application/json;base64,