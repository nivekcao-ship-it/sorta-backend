"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Prompt = exports.PromptBase = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const helpers_internal_1 = require("aws-cdk-lib/core/lib/helpers-internal");
const constructs_1 = require("constructs");
/**
 * Abstract base class for a Prompt.
 * Contains methods and attributes valid for Promtps either created with CDK or imported.
 */
class PromptBase extends aws_cdk_lib_1.Resource {
    /**
     * Grant the given identity permissions to get the prompt.
     */
    grantGet(grantee) {
        return aws_iam_1.Grant.addToPrincipal({
            grantee,
            resourceArns: [this.promptArn],
            actions: ['bedrock:GetPrompt'],
            scope: this,
        });
    }
}
exports.PromptBase = PromptBase;
_a = JSII_RTTI_SYMBOL_1;
PromptBase[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.PromptBase", version: "0.1.309" };
/******************************************************************************
 *                        NEW CONSTRUCT DEFINITION
 *****************************************************************************/
/**
 * Prompts are a specific set of inputs that guide FMs on Amazon Bedrock to
 * generate an appropriate response or output for a given task or instruction.
 * You can optimize the prompt for specific use cases and models.
 * @resource AWS::Bedrock::Prompt
 * @see https://docs.aws.amazon.com/bedrock/latest/userguide/prompt-management.html
 */
class Prompt extends constructs_1.Construct {
    // ------------------------------------------------------
    // Import Methods
    // ------------------------------------------------------
    static fromPromptAttributes(scope, id, attrs) {
        const formattedArn = aws_cdk_lib_1.Arn.split(attrs.promptArn, aws_cdk_lib_1.ArnFormat.SLASH_RESOURCE_NAME);
        class Import extends PromptBase {
            constructor() {
                super(...arguments);
                this.promptArn = attrs.promptArn;
                this.promptId = formattedArn.resourceName;
                this.promptVersion = attrs.promptVersion ?? 'DRAFT';
                this.kmsKey = attrs.kmsKey;
            }
        }
        return new Import(scope, id);
    }
    // ------------------------------------------------------
    // Constructor
    // ------------------------------------------------------
    constructor(scope, id, props) {
        super(scope, id);
        // ------------------------------------------------------
        // Set properties or defaults
        // ------------------------------------------------------
        this.promptName = props.promptName;
        this.kmsKey = props.kmsKey;
        this.variants = props.variants ?? [];
        // ------------------------------------------------------
        // Validation
        // ------------------------------------------------------
        this.node.addValidation({ validate: () => this.validatePromptName() });
        this.node.addValidation({ validate: () => this.validatePromptVariants() });
        // ------------------------------------------------------
        // CFN Props - With Lazy support
        // ------------------------------------------------------
        let cfnProps = {
            customerEncryptionKeyArn: this.kmsKey?.keyArn,
            defaultVariant: props.defaultVariant?.name,
            description: props.description,
            name: props.promptName,
            variants: aws_cdk_lib_1.Lazy.any({
                produce: () => this.variants,
            }),
        };
        // Hash calculation useful for versioning
        this._hash = (0, helpers_internal_1.md5hash)(JSON.stringify(cfnProps));
        // ------------------------------------------------------
        // L1 Instantiation
        // ------------------------------------------------------
        this._resource = new aws_cdk_lib_1.aws_bedrock.CfnPrompt(this, 'Prompt', cfnProps);
        this.promptArn = this._resource.attrArn;
        this.promptId = this._resource.attrId;
        this.promptVersion = this._resource.attrVersion;
    }
    // ------------------------------------------------------
    // Validation Methods
    // ------------------------------------------------------
    /**
     * Validates whether the prompt name is valid according to the specification.
     * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-bedrock-prompt.html#cfn-bedrock-prompt-name
     */
    validatePromptName() {
        const errors = [];
        const matchesPattern = /^([0-9a-zA-Z][_-]?){1,100}$/.test(this.promptName);
        if (!matchesPattern) {
            errors.push('Valid characters are a-z, A-Z, 0-9, _ (underscore) and - (hyphen). And must not begin with a hyphen');
        }
        if (errors.length > 0) {
            errors.unshift(`Invalid prompt name (value: ${this.promptName})`);
        }
        return errors;
    }
    /**
     * Validates whether the number of prompt variants is respected.
     */
    validatePromptVariants() {
        const MAX_VARIANTS = 3;
        const errors = [];
        if (this.variants.length > MAX_VARIANTS) {
            errors.push(`Error: Too many variants specified. The maximum allowed is ${MAX_VARIANTS}, but you have provided ${this.variants.length} variants.`);
        }
        return errors;
    }
    // ------------------------------------------------------
    // Helper Methods
    // ------------------------------------------------------
    /**
     * Creates a prompt version, a static snapshot of your prompt that can be
     * deployed to production.
     */
    createVersion(description) {
        const version = new aws_cdk_lib_1.aws_bedrock.CfnPromptVersion(this, `PromptVersion-${this._hash}`, {
            promptArn: this.promptArn,
            description,
        });
        this.promptVersion = version.attrVersion;
        return this.promptVersion;
    }
    /**
     * Adds a prompt variant.
     */
    addVariant(variant) {
        this.variants.push(variant);
    }
}
exports.Prompt = Prompt;
_b = JSII_RTTI_SYMBOL_1;
Prompt[_b] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.Prompt", version: "0.1.309" };
//# sourceMappingURL=data:application/json;base64,