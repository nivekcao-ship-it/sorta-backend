/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
import { aws_bedrock as bedrock } from 'aws-cdk-lib';
import { CfnPrompt } from 'aws-cdk-lib/aws-bedrock';
import { IAgentAlias } from '../agents/agent-alias';
import { IInvokable } from '../models';
export declare enum PromptTemplateType {
    TEXT = "TEXT",
    CHAT = "CHAT"
}
export interface CommonPromptVariantProps {
    /**
     * The name of the prompt variant.
     */
    readonly variantName: string;
    /**
     * The model which is used to run the prompt. The model could be a foundation
     * model, a custom model, or a provisioned model.
     */
    readonly model: IInvokable;
    /**
     * The variables in the prompt template that can be filled in at runtime.
     */
    readonly promptVariables?: string[];
}
export interface TextPromptVariantProps extends CommonPromptVariantProps {
    /**
     * Inference configuration for the Text Prompt
     */
    readonly inferenceConfiguration?: bedrock.CfnPrompt.PromptModelInferenceConfigurationProperty;
    /**
     * The text prompt. Variables are used by enclosing its name with double curly braces
     * as in `{{variable_name}}`.
     */
    readonly promptText: string;
}
export interface ChatPromptVariantProps extends CommonPromptVariantProps {
    /**
     * Inference configuration for the Chat Prompt.
     * Must include at least one User Message.
     * The messages should alternate between User and Assistant.
     */
    readonly messages: ChatMessage[];
    /**
     * Context or instructions for the model to consider before generating a response.
     */
    readonly system?: string;
    /**
     * The configuration with available tools to the model and how it must use them.
     */
    readonly toolConfiguration?: ToolConfiguration;
    /**
     * Inference configuration for the Text Prompt
     */
    readonly inferenceConfiguration?: bedrock.CfnPrompt.PromptModelInferenceConfigurationProperty;
}
export declare enum ChatMessageRole {
    /**
     * This role represents the human user in the conversation. Inputs from the
     * user guide  the conversation and prompt responses from the assistant.
     */
    USER = "user",
    /**
     * This is the role of the model itself, responding to user inputs based on
     * the context set by the system.
     */
    ASSISTANT = "assistant"
}
export declare class ChatMessage {
    static user(text: string): ChatMessage;
    static assistant(text: string): ChatMessage;
    readonly role: ChatMessageRole;
    readonly text: string;
    constructor(role: ChatMessageRole, text: string);
    /**
     * Renders as Cfn Property
     * @internal This is an internal core function and should not be called directly.
     */
    __render(): CfnPrompt.MessageProperty;
}
export interface ToolConfiguration {
    readonly toolChoice: ToolChoice;
    readonly tools: CfnPrompt.ToolProperty[];
}
export declare class ToolChoice {
    /** The model must request at least one tool (no text is generated) */
    static readonly ANY: ToolChoice;
    /** (Default). The Model automatically decides if a tool should be called or whether to generate text instead.*/
    static readonly AUTO: ToolChoice;
    /** The Model must request the specified tool. Only supported by some models like Anthropic Claude 3 models. */
    static specificTool(toolName: string): ToolChoice;
    readonly any?: any;
    readonly auto?: any;
    readonly tool?: string;
    constructor(any: any, auto: any, tool?: string);
    /**
     *
     * @internal
     */
    __render(): CfnPrompt.ToolChoiceProperty;
}
export interface AgentPromptVariantProps extends CommonPromptVariantProps {
    /**
     * An alias pointing to the agent version to be used.
     */
    readonly agentAlias: IAgentAlias;
    /**
     * The text prompt. Variables are used by enclosing its name with double curly braces
     * as in `{{variable_name}}`.
     */
    readonly promptText: string;
}
/**
 * Variants are specific sets of inputs that guide FMs on Amazon Bedrock to
 * generate an appropriate response or output for a given task or instruction.
 * You can optimize the prompt for specific use cases and models.
 */
export declare abstract class PromptVariant {
    /**
     * Static method to create a text template
     */
    static text(props: TextPromptVariantProps): PromptVariant;
    /**
     * Static method to create a chat template. Use this template type when
     * the model supports the Converse API or the AnthropicClaude Messages API.
     * This allows you to include a System prompt and previous User messages
     * and Assistant messages for context.
     */
    static chat(props: ChatPromptVariantProps): PromptVariant;
    /**
     * Static method to create an agent prompt template.
     */
    static agent(props: AgentPromptVariantProps): PromptVariant;
    /**
     * The name of the prompt variant.
     */
    abstract name: string;
    /**
     * The type of prompt template.
     */
    abstract templateType: PromptTemplateType;
    /**
     * The inference configuration.
     */
    abstract inferenceConfiguration?: bedrock.CfnPrompt.PromptInferenceConfigurationProperty;
    /**
     * The unique identifier of the model with which to run inference on the prompt.
     */
    abstract modelId?: string;
    /**
     * The template configuration.
     */
    abstract templateConfiguration: bedrock.CfnPrompt.PromptTemplateConfigurationProperty;
    /**
     * The template configuration.
     */
    abstract genAiResource?: bedrock.CfnPrompt.PromptGenAiResourceProperty;
    protected constructor();
}
