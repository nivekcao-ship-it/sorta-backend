"use strict";
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PromptVariant = exports.ToolChoice = exports.ChatMessage = exports.ChatMessageRole = exports.PromptTemplateType = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
// ------------------------------------------------------
// COMMON
// ------------------------------------------------------
var PromptTemplateType;
(function (PromptTemplateType) {
    PromptTemplateType["TEXT"] = "TEXT";
    PromptTemplateType["CHAT"] = "CHAT";
})(PromptTemplateType || (exports.PromptTemplateType = PromptTemplateType = {}));
var ChatMessageRole;
(function (ChatMessageRole) {
    /**
     * This role represents the human user in the conversation. Inputs from the
     * user guide  the conversation and prompt responses from the assistant.
     */
    ChatMessageRole["USER"] = "user";
    /**
     * This is the role of the model itself, responding to user inputs based on
     * the context set by the system.
     */
    ChatMessageRole["ASSISTANT"] = "assistant";
})(ChatMessageRole || (exports.ChatMessageRole = ChatMessageRole = {}));
class ChatMessage {
    static user(text) {
        return new ChatMessage(ChatMessageRole.USER, text);
    }
    static assistant(text) {
        return new ChatMessage(ChatMessageRole.ASSISTANT, text);
    }
    constructor(role, text) {
        (this.role = role), (this.text = text);
    }
    /**
     * Renders as Cfn Property
     * @internal This is an internal core function and should not be called directly.
     */
    __render() {
        return {
            role: this.role,
            content: [
                {
                    text: this.text,
                },
            ],
        };
    }
}
exports.ChatMessage = ChatMessage;
_a = JSII_RTTI_SYMBOL_1;
ChatMessage[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.ChatMessage", version: "0.1.309" };
class ToolChoice {
    /** The Model must request the specified tool. Only supported by some models like Anthropic Claude 3 models. */
    static specificTool(toolName) {
        return new ToolChoice(undefined, undefined, toolName);
    }
    constructor(any, auto, tool) {
        (this.any = any), (this.auto = auto), (this.tool = tool);
    }
    /**
     *
     * @internal
     */
    __render() {
        return {
            any: this.any,
            auto: this.auto,
            tool: this.tool ? { name: this.tool } : undefined,
        };
    }
}
exports.ToolChoice = ToolChoice;
_b = JSII_RTTI_SYMBOL_1;
ToolChoice[_b] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.ToolChoice", version: "0.1.309" };
/** The model must request at least one tool (no text is generated) */
ToolChoice.ANY = new ToolChoice({}, undefined, undefined);
/** (Default). The Model automatically decides if a tool should be called or whether to generate text instead.*/
ToolChoice.AUTO = new ToolChoice(undefined, {}, undefined);
// ------------------------------------------------------
// VARIANTS
// ------------------------------------------------------
/**
 * Variants are specific sets of inputs that guide FMs on Amazon Bedrock to
 * generate an appropriate response or output for a given task or instruction.
 * You can optimize the prompt for specific use cases and models.
 */
class PromptVariant {
    // ------------------------------------------------------
    // Static Methods
    // ------------------------------------------------------
    /**
     * Static method to create a text template
     */
    static text(props) {
        return {
            name: props.variantName,
            templateType: PromptTemplateType.TEXT,
            modelId: props.model.invokableArn,
            inferenceConfiguration: {
                text: { ...props.inferenceConfiguration },
            },
            templateConfiguration: {
                text: {
                    inputVariables: props.promptVariables?.flatMap((variable) => {
                        return { name: variable };
                    }),
                    text: props.promptText,
                },
            },
        };
    }
    /**
     * Static method to create a chat template. Use this template type when
     * the model supports the Converse API or the AnthropicClaude Messages API.
     * This allows you to include a System prompt and previous User messages
     * and Assistant messages for context.
     */
    static chat(props) {
        return {
            name: props.variantName,
            templateType: PromptTemplateType.CHAT,
            modelId: props.model.invokableArn,
            inferenceConfiguration: {
                text: { ...props.inferenceConfiguration },
            },
            templateConfiguration: {
                chat: {
                    inputVariables: props.promptVariables?.flatMap((variable) => {
                        return { name: variable };
                    }),
                    messages: props.messages?.flatMap(m => m.__render()),
                    system: props.system ? [{ text: props.system }] : undefined,
                    toolConfiguration: props.toolConfiguration
                        ? {
                            toolChoice: props.toolConfiguration.toolChoice.__render(),
                            tools: props.toolConfiguration.tools,
                        }
                        : undefined,
                },
            },
        };
    }
    /**
     * Static method to create an agent prompt template.
     */
    static agent(props) {
        return {
            name: props.variantName,
            templateType: PromptTemplateType.TEXT,
            genAiResource: {
                agent: {
                    agentIdentifier: props.agentAlias.aliasArn,
                },
            },
            templateConfiguration: {
                text: {
                    inputVariables: props.promptVariables?.flatMap((variable) => {
                        return { name: variable };
                    }),
                    text: props.promptText,
                },
            },
        };
    }
    // ------------------------------------------------------
    // Constructor
    // ------------------------------------------------------
    constructor() { }
}
exports.PromptVariant = PromptVariant;
_c = JSII_RTTI_SYMBOL_1;
PromptVariant[_c] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.PromptVariant", version: "0.1.309" };
//# sourceMappingURL=data:application/json;base64,