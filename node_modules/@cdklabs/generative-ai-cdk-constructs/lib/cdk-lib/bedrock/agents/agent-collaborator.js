"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AgentCollaborator = exports.RelayConversationHistoryType = exports.AgentCollaboratorType = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 * Enum for collaborator's relay conversation history types.
 */
var AgentCollaboratorType;
(function (AgentCollaboratorType) {
    /**
     * Supervisor agent.
     */
    AgentCollaboratorType["SUPERVISOR"] = "SUPERVISOR";
    /**
     * Disabling collaboration.
     */
    AgentCollaboratorType["DISABLED"] = "DISABLED";
    /**
     * Supervisor router.
     */
    AgentCollaboratorType["SUPERVISOR_ROUTER"] = "SUPERVISOR_ROUTER";
})(AgentCollaboratorType || (exports.AgentCollaboratorType = AgentCollaboratorType = {}));
/**
 * Enum for collaborator's relay conversation history types.
 */
var RelayConversationHistoryType;
(function (RelayConversationHistoryType) {
    /**
       * Sending to the collaborator.
       */
    RelayConversationHistoryType["TO_COLLABORATOR"] = "TO_COLLABORATOR";
    /**
       * Disabling relay of conversation history to the collaborator.
       */
    RelayConversationHistoryType["DISABLED"] = "DISABLED";
})(RelayConversationHistoryType || (exports.RelayConversationHistoryType = RelayConversationHistoryType = {}));
/******************************************************************************
 *                         DEF - Agent Collaborator Class
 *****************************************************************************/
class AgentCollaborator {
    constructor(props) {
        // Validate Props
        this.validateProps(props);
        // ------------------------------------------------------
        // Set attributes or defaults
        // ------------------------------------------------------
        this.agentAlias = props.agentAlias;
        this.collaborationInstruction = props.collaborationInstruction;
        this.collaboratorName = props.collaboratorName;
        this.relayConversationHistory = props.relayConversationHistory;
    }
    validateProps(props) {
        // Validate required properties
        if (!props.agentAlias) {
            throw new Error('agentAlias is required for AgentCollaborator');
        }
        if (props.agentAlias.aliasId === 'TSTALIASID') {
            throw new Error('Agent cannot collaborate with TSTALIASID alias of another agent. Use a different alias to collaborate with.');
        }
        if (!props.collaborationInstruction || props.collaborationInstruction.trim() === '') {
            throw new Error('collaborationInstruction is required and cannot be empty for AgentCollaborator');
        }
        if (!props.collaboratorName || props.collaboratorName.trim() === '') {
            throw new Error('collaboratorName is required and cannot be empty for AgentCollaborator');
        }
    }
    /**
   * Format as CFN properties
   *
   * @internal This is an internal core function and should not be called directly.
   */
    _render() {
        return {
            agentDescriptor: {
                aliasArn: this.agentAlias.aliasArn,
            },
            collaborationInstruction: this.collaborationInstruction,
            collaboratorName: this.collaboratorName,
            relayConversationHistory: this.relayConversationHistory ? RelayConversationHistoryType.TO_COLLABORATOR : RelayConversationHistoryType.DISABLED,
        };
    }
    /**
   * Grants the specified principal permissions to get the agent alias and invoke the agent
   * from this collaborator.
   *
   * @param grantee The principal to grant permissions to
   * @returns The Grant object
   */
    grant(grantee) {
        const grant1 = this.agentAlias.grantInvoke(grantee);
        const combinedGrant = grant1.combine(this.agentAlias.grantGet(grantee));
        return combinedGrant;
    }
}
exports.AgentCollaborator = AgentCollaborator;
_a = JSII_RTTI_SYMBOL_1;
AgentCollaborator[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.AgentCollaborator", version: "0.1.309" };
//# sourceMappingURL=data:application/json;base64,