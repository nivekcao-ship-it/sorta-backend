"use strict";
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.S3ApiSchema = exports.InlineApiSchema = exports.ApiSchema = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const fs = require("fs");
/******************************************************************************
 *                       API SCHEMA CLASS
 *****************************************************************************/
/**
 * Represents the concept of an API Schema for a Bedrock Agent Action Group.
 */
class ApiSchema {
    /**
     * Creates an API Schema from a local file.
     * @param path - the path to the local file containing the OpenAPI schema for the action group
     */
    static fromLocalAsset(path) {
        return new InlineApiSchema(fs.readFileSync(path, 'utf8'));
    }
    /**
     * Creates an API Schema from an inline string.
     * @param schema - the JSON or YAML payload defining the OpenAPI schema for the action group
     */
    static fromInline(schema) {
        return new InlineApiSchema(schema);
    }
    /**
     * Creates an API Schema from an S3 File
     * @param bucket - the bucket containing the local file containing the OpenAPI schema for the action group
     * @param objectKey - object key in the bucket
     */
    static fromS3File(bucket, objectKey) {
        return new S3ApiSchema({
            bucketName: bucket.bucketName,
            objectKey: objectKey,
        });
    }
    /**
     * Constructor accessible only to extending classes.
     */
    constructor(s3File, inlineSchema) {
        this.s3File = s3File;
        this.inlineSchema = inlineSchema;
    }
}
exports.ApiSchema = ApiSchema;
_a = JSII_RTTI_SYMBOL_1;
ApiSchema[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.ApiSchema", version: "0.1.309" };
// ------------------------------------------------------
// Inline Definition
// ------------------------------------------------------
class InlineApiSchema extends ApiSchema {
    constructor(schema) {
        super(undefined, schema);
        this.schema = schema;
    }
    /**
     * @internal This is an internal core function and should not be called directly.
     */
    _render() {
        return {
            payload: this.schema,
        };
    }
}
exports.InlineApiSchema = InlineApiSchema;
_b = JSII_RTTI_SYMBOL_1;
InlineApiSchema[_b] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.InlineApiSchema", version: "0.1.309" };
// ------------------------------------------------------
// S3 File
// ------------------------------------------------------
/**
 * Class to define an API Schema from an S3 object.
 */
class S3ApiSchema extends ApiSchema {
    constructor(location) {
        super(location, undefined);
        this.location = location;
    }
    /**
     * @internal This is an internal core function and should not be called directly.
     */
    _render() {
        return {
            s3: {
                s3BucketName: this.location.bucketName,
                s3ObjectKey: this.location.objectKey,
            },
        };
    }
}
exports.S3ApiSchema = S3ApiSchema;
_c = JSII_RTTI_SYMBOL_1;
S3ApiSchema[_c] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.S3ApiSchema", version: "0.1.309" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLXNjaGVtYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jZGstbGliL2JlZHJvY2svYWdlbnRzL2FwaS1zY2hlbWEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7R0FXRztBQUVILHlCQUF5QjtBQUl6Qjs7K0VBRStFO0FBQy9FOztHQUVHO0FBQ0gsTUFBc0IsU0FBUztJQUM3Qjs7O09BR0c7SUFDSSxNQUFNLENBQUMsY0FBYyxDQUFDLElBQVk7UUFDdkMsT0FBTyxJQUFJLGVBQWUsQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFRDs7O09BR0c7SUFDSSxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQWM7UUFDckMsT0FBTyxJQUFJLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBZSxFQUFFLFNBQWlCO1FBQ3pELE9BQU8sSUFBSSxXQUFXLENBQUM7WUFDckIsVUFBVSxFQUFFLE1BQU0sQ0FBQyxVQUFVO1lBQzdCLFNBQVMsRUFBRSxTQUFTO1NBQ3JCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFLRDs7T0FFRztJQUNILFlBQXNCLE1BQWlCLEVBQUUsWUFBcUI7UUFDNUQsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7SUFDbkMsQ0FBQzs7QUF0Q0gsOEJBOENDOzs7QUFFRCx5REFBeUQ7QUFDekQsb0JBQW9CO0FBQ3BCLHlEQUF5RDtBQUN6RCxNQUFhLGVBQWdCLFNBQVEsU0FBUztJQUM1QyxZQUE2QixNQUFjO1FBQ3pDLEtBQUssQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFERSxXQUFNLEdBQU4sTUFBTSxDQUFRO0lBRTNDLENBQUM7SUFFRDs7T0FFRztJQUNJLE9BQU87UUFDWixPQUFPO1lBQ0wsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNO1NBQ3JCLENBQUM7SUFDSixDQUFDOztBQVpILDBDQWFDOzs7QUFFRCx5REFBeUQ7QUFDekQsVUFBVTtBQUNWLHlEQUF5RDtBQUN6RDs7R0FFRztBQUNILE1BQWEsV0FBWSxTQUFRLFNBQVM7SUFDeEMsWUFBNkIsUUFBa0I7UUFDN0MsS0FBSyxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQztRQURBLGFBQVEsR0FBUixRQUFRLENBQVU7SUFFL0MsQ0FBQztJQUNEOztPQUVHO0lBQ0ksT0FBTztRQUNaLE9BQU87WUFDTCxFQUFFLEVBQUU7Z0JBQ0YsWUFBWSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVTtnQkFDdEMsV0FBVyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUzthQUNyQztTQUNGLENBQUM7SUFDSixDQUFDOztBQWRILGtDQWVDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiAgQ29weXJpZ2h0IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIikuIFlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqICB3aXRoIHRoZSBMaWNlbnNlLiBBIGNvcHkgb2YgdGhlIExpY2Vuc2UgaXMgbG9jYXRlZCBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogIG9yIGluIHRoZSAnbGljZW5zZScgZmlsZSBhY2NvbXBhbnlpbmcgdGhpcyBmaWxlLiBUaGlzIGZpbGUgaXMgZGlzdHJpYnV0ZWQgb24gYW4gJ0FTIElTJyBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTXG4gKiAgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnNcbiAqICBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IHsgQ2ZuQWdlbnQgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtYmVkcm9jayc7XG5pbXBvcnQgeyBJQnVja2V0LCBMb2NhdGlvbiB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1zMyc7XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqICAgICAgICAgICAgICAgICAgICAgICBBUEkgU0NIRU1BIENMQVNTXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIGNvbmNlcHQgb2YgYW4gQVBJIFNjaGVtYSBmb3IgYSBCZWRyb2NrIEFnZW50IEFjdGlvbiBHcm91cC5cbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFwaVNjaGVtYSB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIEFQSSBTY2hlbWEgZnJvbSBhIGxvY2FsIGZpbGUuXG4gICAqIEBwYXJhbSBwYXRoIC0gdGhlIHBhdGggdG8gdGhlIGxvY2FsIGZpbGUgY29udGFpbmluZyB0aGUgT3BlbkFQSSBzY2hlbWEgZm9yIHRoZSBhY3Rpb24gZ3JvdXBcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZnJvbUxvY2FsQXNzZXQocGF0aDogc3RyaW5nKTogSW5saW5lQXBpU2NoZW1hIHtcbiAgICByZXR1cm4gbmV3IElubGluZUFwaVNjaGVtYShmcy5yZWFkRmlsZVN5bmMocGF0aCwgJ3V0ZjgnKSk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBBUEkgU2NoZW1hIGZyb20gYW4gaW5saW5lIHN0cmluZy5cbiAgICogQHBhcmFtIHNjaGVtYSAtIHRoZSBKU09OIG9yIFlBTUwgcGF5bG9hZCBkZWZpbmluZyB0aGUgT3BlbkFQSSBzY2hlbWEgZm9yIHRoZSBhY3Rpb24gZ3JvdXBcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZnJvbUlubGluZShzY2hlbWE6IHN0cmluZyk6IElubGluZUFwaVNjaGVtYSB7XG4gICAgcmV0dXJuIG5ldyBJbmxpbmVBcGlTY2hlbWEoc2NoZW1hKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIEFQSSBTY2hlbWEgZnJvbSBhbiBTMyBGaWxlXG4gICAqIEBwYXJhbSBidWNrZXQgLSB0aGUgYnVja2V0IGNvbnRhaW5pbmcgdGhlIGxvY2FsIGZpbGUgY29udGFpbmluZyB0aGUgT3BlbkFQSSBzY2hlbWEgZm9yIHRoZSBhY3Rpb24gZ3JvdXBcbiAgICogQHBhcmFtIG9iamVjdEtleSAtIG9iamVjdCBrZXkgaW4gdGhlIGJ1Y2tldFxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBmcm9tUzNGaWxlKGJ1Y2tldDogSUJ1Y2tldCwgb2JqZWN0S2V5OiBzdHJpbmcpOiBTM0FwaVNjaGVtYSB7XG4gICAgcmV0dXJuIG5ldyBTM0FwaVNjaGVtYSh7XG4gICAgICBidWNrZXROYW1lOiBidWNrZXQuYnVja2V0TmFtZSxcbiAgICAgIG9iamVjdEtleTogb2JqZWN0S2V5LFxuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIHJlYWRvbmx5IHMzRmlsZT86IExvY2F0aW9uO1xuICBwdWJsaWMgcmVhZG9ubHkgaW5saW5lU2NoZW1hPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvciBhY2Nlc3NpYmxlIG9ubHkgdG8gZXh0ZW5kaW5nIGNsYXNzZXMuXG4gICAqL1xuICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoczNGaWxlPzogTG9jYXRpb24sIGlubGluZVNjaGVtYT86IHN0cmluZykge1xuICAgIHRoaXMuczNGaWxlID0gczNGaWxlO1xuICAgIHRoaXMuaW5saW5lU2NoZW1hID0gaW5saW5lU2NoZW1hO1xuICB9XG5cbiAgLyoqXG4gICAqIEZvcm1hdCBhcyBDRk4gcHJvcGVydGllc1xuICAgKlxuICAgKiBAaW50ZXJuYWwgVGhpcyBpcyBhbiBpbnRlcm5hbCBjb3JlIGZ1bmN0aW9uIGFuZCBzaG91bGQgbm90IGJlIGNhbGxlZCBkaXJlY3RseS5cbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBfcmVuZGVyKCk6IENmbkFnZW50LkFQSVNjaGVtYVByb3BlcnR5O1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIElubGluZSBEZWZpbml0aW9uXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmV4cG9ydCBjbGFzcyBJbmxpbmVBcGlTY2hlbWEgZXh0ZW5kcyBBcGlTY2hlbWEge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IHNjaGVtYTogc3RyaW5nKSB7XG4gICAgc3VwZXIodW5kZWZpbmVkLCBzY2hlbWEpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbCBUaGlzIGlzIGFuIGludGVybmFsIGNvcmUgZnVuY3Rpb24gYW5kIHNob3VsZCBub3QgYmUgY2FsbGVkIGRpcmVjdGx5LlxuICAgKi9cbiAgcHVibGljIF9yZW5kZXIoKTogQ2ZuQWdlbnQuQVBJU2NoZW1hUHJvcGVydHkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXlsb2FkOiB0aGlzLnNjaGVtYSxcbiAgICB9O1xuICB9XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUzMgRmlsZVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vKipcbiAqIENsYXNzIHRvIGRlZmluZSBhbiBBUEkgU2NoZW1hIGZyb20gYW4gUzMgb2JqZWN0LlxuICovXG5leHBvcnQgY2xhc3MgUzNBcGlTY2hlbWEgZXh0ZW5kcyBBcGlTY2hlbWEge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGxvY2F0aW9uOiBMb2NhdGlvbikge1xuICAgIHN1cGVyKGxvY2F0aW9uLCB1bmRlZmluZWQpO1xuICB9XG4gIC8qKlxuICAgKiBAaW50ZXJuYWwgVGhpcyBpcyBhbiBpbnRlcm5hbCBjb3JlIGZ1bmN0aW9uIGFuZCBzaG91bGQgbm90IGJlIGNhbGxlZCBkaXJlY3RseS5cbiAgICovXG4gIHB1YmxpYyBfcmVuZGVyKCk6IENmbkFnZW50LkFQSVNjaGVtYVByb3BlcnR5IHtcbiAgICByZXR1cm4ge1xuICAgICAgczM6IHtcbiAgICAgICAgczNCdWNrZXROYW1lOiB0aGlzLmxvY2F0aW9uLmJ1Y2tldE5hbWUsXG4gICAgICAgIHMzT2JqZWN0S2V5OiB0aGlzLmxvY2F0aW9uLm9iamVjdEtleSxcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxufVxuIl19