"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Memory = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const validation = require("../../../common/helpers/validation-helpers");
/**
 * Memory options for agent conversational context retention.
 * Memory enables agents to maintain context across multiple sessions and recall past interactions.
 * By default, agents retain context from the current session only.
 */
var MemoryType;
(function (MemoryType) {
    /**
     * Your agent uses memory summarization to enhance accuracy using
     * advanced prompt templates in Amazon Bedrock to call the foundation model with guidelines
     * to summarize all your sessions. You can optionally modify the default prompt template
     * or provide your own custom parser to parse model output.
     *
     * Since the summarization process takes place in an asynchronous flow after a session ends,
     * logs for any failures in summarization due to overridden template or parser will be
     * published to your AWS accounts. For more information on enabling the logging, see
     * Enable memory summarization log delivery.
     */
    MemoryType["SESSION_SUMMARY"] = "SESSION_SUMMARY";
})(MemoryType || (MemoryType = {}));
/**
 * Memory class for managing Bedrock Agent memory configurations. Enables conversational context retention
 * across multiple sessions through session identifiers. Memory context is stored with unique
 * memory IDs per user, allowing access to conversation history and summaries. Supports viewing
 * stored sessions and clearing memory.
 *
 * @see https://docs.aws.amazon.com/bedrock/latest/userguide/agents-memory.html
 */
class Memory {
    /**
     * Creates a session summary memory with custom configuration.
     * @param props Optional memory configuration properties
     * @returns Memory configuration object
     */
    static sessionSummary(props) {
        // Do some checks
        validation.throwIfInvalid(this.validateSessionSummaryMemoryProps, props);
        return {
            enabledMemoryTypes: [MemoryType.SESSION_SUMMARY],
            storageDays: props?.memoryDurationDays ?? 30,
            sessionSummaryConfiguration: {
                maxRecentSessions: props?.maxRecentSessions ?? 20,
            },
        };
    }
    /**
     * Validate at synth time the configuration.
     */
    static validateSessionSummaryMemoryProps(props) {
        let errors = [];
        // Validate storage days is between 0 and 365
        if (props.memoryDurationDays !== undefined) {
            if (props.memoryDurationDays < 1 || props.memoryDurationDays > 365) {
                errors.push('memoryDurationDays must be between 1 and 365');
            }
        }
        if (props.maxRecentSessions !== undefined) {
            if (props.maxRecentSessions < 1) {
                errors.push('maxRecentSessions must be greater than 0');
            }
        }
        return errors;
    }
}
exports.Memory = Memory;
_a = JSII_RTTI_SYMBOL_1;
Memory[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.Memory", version: "0.1.309" };
/**
 * Returns session summary memory with default configuration.
 * @default memoryDurationDays=30, maxRecentSessions=20
 */
Memory.SESSION_SUMMARY = Memory.sessionSummary({ memoryDurationDays: 30, maxRecentSessions: 20 });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVtb3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2Nkay1saWIvYmVkcm9jay9hZ2VudHMvbWVtb3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBY0EseUVBQXlFO0FBQ3pFOzs7O0dBSUc7QUFDSCxJQUFLLFVBYUo7QUFiRCxXQUFLLFVBQVU7SUFDYjs7Ozs7Ozs7OztPQVVHO0lBQ0gsaURBQW1DLENBQUE7QUFDckMsQ0FBQyxFQWJJLFVBQVUsS0FBVixVQUFVLFFBYWQ7QUFtQkQ7Ozs7Ozs7R0FPRztBQUNILE1BQWEsTUFBTTtJQU9qQjs7OztPQUlHO0lBQ0ksTUFBTSxDQUFDLGNBQWMsQ0FBQyxLQUFnQztRQUMzRCxpQkFBaUI7UUFDakIsVUFBVSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsaUNBQWlDLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFekUsT0FBTztZQUNMLGtCQUFrQixFQUFFLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQztZQUNoRCxXQUFXLEVBQUUsS0FBSyxFQUFFLGtCQUFrQixJQUFJLEVBQUU7WUFDNUMsMkJBQTJCLEVBQUU7Z0JBQzNCLGlCQUFpQixFQUFFLEtBQUssRUFBRSxpQkFBaUIsSUFBSSxFQUFFO2FBQ2xEO1NBQ0YsQ0FBQztJQUNKLENBQUM7SUFFRDs7T0FFRztJQUNLLE1BQU0sQ0FBQyxpQ0FBaUMsQ0FBQyxLQUFnQztRQUMvRSxJQUFJLE1BQU0sR0FBYSxFQUFFLENBQUM7UUFFMUIsNkNBQTZDO1FBQzdDLElBQUksS0FBSyxDQUFDLGtCQUFrQixLQUFLLFNBQVMsRUFBRSxDQUFDO1lBQzNDLElBQUksS0FBSyxDQUFDLGtCQUFrQixHQUFHLENBQUMsSUFBSSxLQUFLLENBQUMsa0JBQWtCLEdBQUcsR0FBRyxFQUFFLENBQUM7Z0JBQ25FLE1BQU0sQ0FBQyxJQUFJLENBQUMsOENBQThDLENBQUMsQ0FBQztZQUM5RCxDQUFDO1FBQ0gsQ0FBQztRQUNELElBQUksS0FBSyxDQUFDLGlCQUFpQixLQUFLLFNBQVMsRUFBRSxDQUFDO1lBQzFDLElBQUksS0FBSyxDQUFDLGlCQUFpQixHQUFHLENBQUMsRUFBRSxDQUFDO2dCQUNoQyxNQUFNLENBQUMsSUFBSSxDQUFDLDBDQUEwQyxDQUFDLENBQUM7WUFDMUQsQ0FBQztRQUNILENBQUM7UUFFRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDOztBQTVDSCx3QkE2Q0M7OztBQTVDQzs7O0dBR0c7QUFDb0Isc0JBQWUsR0FBRyxNQUFNLENBQUMsY0FBYyxDQUFDLEVBQUUsa0JBQWtCLEVBQUUsRUFBRSxFQUFFLGlCQUFpQixFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqICBDb3B5cmlnaHQgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKS4gWW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogIHdpdGggdGhlIExpY2Vuc2UuIEEgY29weSBvZiB0aGUgTGljZW5zZSBpcyBsb2NhdGVkIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiAgb3IgaW4gdGhlICdsaWNlbnNlJyBmaWxlIGFjY29tcGFueWluZyB0aGlzIGZpbGUuIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAnQVMgSVMnIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVNcbiAqICBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9uc1xuICogIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDZm5BZ2VudCB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1iZWRyb2NrJztcbmltcG9ydCAqIGFzIHZhbGlkYXRpb24gZnJvbSAnLi4vLi4vLi4vY29tbW9uL2hlbHBlcnMvdmFsaWRhdGlvbi1oZWxwZXJzJztcbi8qKlxuICogTWVtb3J5IG9wdGlvbnMgZm9yIGFnZW50IGNvbnZlcnNhdGlvbmFsIGNvbnRleHQgcmV0ZW50aW9uLlxuICogTWVtb3J5IGVuYWJsZXMgYWdlbnRzIHRvIG1haW50YWluIGNvbnRleHQgYWNyb3NzIG11bHRpcGxlIHNlc3Npb25zIGFuZCByZWNhbGwgcGFzdCBpbnRlcmFjdGlvbnMuXG4gKiBCeSBkZWZhdWx0LCBhZ2VudHMgcmV0YWluIGNvbnRleHQgZnJvbSB0aGUgY3VycmVudCBzZXNzaW9uIG9ubHkuXG4gKi9cbmVudW0gTWVtb3J5VHlwZSB7XG4gIC8qKlxuICAgKiBZb3VyIGFnZW50IHVzZXMgbWVtb3J5IHN1bW1hcml6YXRpb24gdG8gZW5oYW5jZSBhY2N1cmFjeSB1c2luZ1xuICAgKiBhZHZhbmNlZCBwcm9tcHQgdGVtcGxhdGVzIGluIEFtYXpvbiBCZWRyb2NrIHRvIGNhbGwgdGhlIGZvdW5kYXRpb24gbW9kZWwgd2l0aCBndWlkZWxpbmVzXG4gICAqIHRvIHN1bW1hcml6ZSBhbGwgeW91ciBzZXNzaW9ucy4gWW91IGNhbiBvcHRpb25hbGx5IG1vZGlmeSB0aGUgZGVmYXVsdCBwcm9tcHQgdGVtcGxhdGVcbiAgICogb3IgcHJvdmlkZSB5b3VyIG93biBjdXN0b20gcGFyc2VyIHRvIHBhcnNlIG1vZGVsIG91dHB1dC5cbiAgICpcbiAgICogU2luY2UgdGhlIHN1bW1hcml6YXRpb24gcHJvY2VzcyB0YWtlcyBwbGFjZSBpbiBhbiBhc3luY2hyb25vdXMgZmxvdyBhZnRlciBhIHNlc3Npb24gZW5kcyxcbiAgICogbG9ncyBmb3IgYW55IGZhaWx1cmVzIGluIHN1bW1hcml6YXRpb24gZHVlIHRvIG92ZXJyaWRkZW4gdGVtcGxhdGUgb3IgcGFyc2VyIHdpbGwgYmVcbiAgICogcHVibGlzaGVkIHRvIHlvdXIgQVdTIGFjY291bnRzLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBlbmFibGluZyB0aGUgbG9nZ2luZywgc2VlXG4gICAqIEVuYWJsZSBtZW1vcnkgc3VtbWFyaXphdGlvbiBsb2cgZGVsaXZlcnkuXG4gICAqL1xuICBTRVNTSU9OX1NVTU1BUlkgPSAnU0VTU0lPTl9TVU1NQVJZJyxcbn1cblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBTZXNzaW9uU3VtbWFyeUNvbmZpZ3VyYXRpb24uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU2Vzc2lvblN1bW1hcnlNZW1vcnlQcm9wcyB7XG4gIC8qKlxuICAgKiBEdXJhdGlvbiBpbiBkYXlzIGZvciB3aGljaCBzZXNzaW9uIHN1bW1hcmllcyBhcmUgcmV0YWluZWQgKDEtMzY1KVxuICAgKiBAZGVmYXVsdCAzMFxuICAgKi9cbiAgcmVhZG9ubHkgbWVtb3J5RHVyYXRpb25EYXlzPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBNYXhpbXVtIG51bWJlciBvZiByZWNlbnQgc2Vzc2lvbiBzdW1tYXJpZXMgdG8gaW5jbHVkZSAobWluIDEpXG4gICAqIEBkZWZhdWx0IDIwXG4gICAqL1xuICByZWFkb25seSBtYXhSZWNlbnRTZXNzaW9ucz86IG51bWJlcjtcbn1cblxuLyoqXG4gKiBNZW1vcnkgY2xhc3MgZm9yIG1hbmFnaW5nIEJlZHJvY2sgQWdlbnQgbWVtb3J5IGNvbmZpZ3VyYXRpb25zLiBFbmFibGVzIGNvbnZlcnNhdGlvbmFsIGNvbnRleHQgcmV0ZW50aW9uXG4gKiBhY3Jvc3MgbXVsdGlwbGUgc2Vzc2lvbnMgdGhyb3VnaCBzZXNzaW9uIGlkZW50aWZpZXJzLiBNZW1vcnkgY29udGV4dCBpcyBzdG9yZWQgd2l0aCB1bmlxdWVcbiAqIG1lbW9yeSBJRHMgcGVyIHVzZXIsIGFsbG93aW5nIGFjY2VzcyB0byBjb252ZXJzYXRpb24gaGlzdG9yeSBhbmQgc3VtbWFyaWVzLiBTdXBwb3J0cyB2aWV3aW5nXG4gKiBzdG9yZWQgc2Vzc2lvbnMgYW5kIGNsZWFyaW5nIG1lbW9yeS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9iZWRyb2NrL2xhdGVzdC91c2VyZ3VpZGUvYWdlbnRzLW1lbW9yeS5odG1sXG4gKi9cbmV4cG9ydCBjbGFzcyBNZW1vcnkge1xuICAvKipcbiAgICogUmV0dXJucyBzZXNzaW9uIHN1bW1hcnkgbWVtb3J5IHdpdGggZGVmYXVsdCBjb25maWd1cmF0aW9uLlxuICAgKiBAZGVmYXVsdCBtZW1vcnlEdXJhdGlvbkRheXM9MzAsIG1heFJlY2VudFNlc3Npb25zPTIwXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFNFU1NJT05fU1VNTUFSWSA9IE1lbW9yeS5zZXNzaW9uU3VtbWFyeSh7IG1lbW9yeUR1cmF0aW9uRGF5czogMzAsIG1heFJlY2VudFNlc3Npb25zOiAyMCB9KTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIHNlc3Npb24gc3VtbWFyeSBtZW1vcnkgd2l0aCBjdXN0b20gY29uZmlndXJhdGlvbi5cbiAgICogQHBhcmFtIHByb3BzIE9wdGlvbmFsIG1lbW9yeSBjb25maWd1cmF0aW9uIHByb3BlcnRpZXNcbiAgICogQHJldHVybnMgTWVtb3J5IGNvbmZpZ3VyYXRpb24gb2JqZWN0XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHNlc3Npb25TdW1tYXJ5KHByb3BzOiBTZXNzaW9uU3VtbWFyeU1lbW9yeVByb3BzKTogQ2ZuQWdlbnQuTWVtb3J5Q29uZmlndXJhdGlvblByb3BlcnR5IHtcbiAgICAvLyBEbyBzb21lIGNoZWNrc1xuICAgIHZhbGlkYXRpb24udGhyb3dJZkludmFsaWQodGhpcy52YWxpZGF0ZVNlc3Npb25TdW1tYXJ5TWVtb3J5UHJvcHMsIHByb3BzKTtcblxuICAgIHJldHVybiB7XG4gICAgICBlbmFibGVkTWVtb3J5VHlwZXM6IFtNZW1vcnlUeXBlLlNFU1NJT05fU1VNTUFSWV0sXG4gICAgICBzdG9yYWdlRGF5czogcHJvcHM/Lm1lbW9yeUR1cmF0aW9uRGF5cyA/PyAzMCxcbiAgICAgIHNlc3Npb25TdW1tYXJ5Q29uZmlndXJhdGlvbjoge1xuICAgICAgICBtYXhSZWNlbnRTZXNzaW9uczogcHJvcHM/Lm1heFJlY2VudFNlc3Npb25zID8/IDIwLFxuICAgICAgfSxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFZhbGlkYXRlIGF0IHN5bnRoIHRpbWUgdGhlIGNvbmZpZ3VyYXRpb24uXG4gICAqL1xuICBwcml2YXRlIHN0YXRpYyB2YWxpZGF0ZVNlc3Npb25TdW1tYXJ5TWVtb3J5UHJvcHMocHJvcHM6IFNlc3Npb25TdW1tYXJ5TWVtb3J5UHJvcHMpOiBzdHJpbmdbXSB7XG4gICAgbGV0IGVycm9yczogc3RyaW5nW10gPSBbXTtcblxuICAgIC8vIFZhbGlkYXRlIHN0b3JhZ2UgZGF5cyBpcyBiZXR3ZWVuIDAgYW5kIDM2NVxuICAgIGlmIChwcm9wcy5tZW1vcnlEdXJhdGlvbkRheXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKHByb3BzLm1lbW9yeUR1cmF0aW9uRGF5cyA8IDEgfHwgcHJvcHMubWVtb3J5RHVyYXRpb25EYXlzID4gMzY1KSB7XG4gICAgICAgIGVycm9ycy5wdXNoKCdtZW1vcnlEdXJhdGlvbkRheXMgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDM2NScpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocHJvcHMubWF4UmVjZW50U2Vzc2lvbnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKHByb3BzLm1heFJlY2VudFNlc3Npb25zIDwgMSkge1xuICAgICAgICBlcnJvcnMucHVzaCgnbWF4UmVjZW50U2Vzc2lvbnMgbXVzdCBiZSBncmVhdGVyIHRoYW4gMCcpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBlcnJvcnM7XG4gIH1cbn1cbiJdfQ==