"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AgentActionGroup = exports.ParentActionGroupSignature = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/******************************************************************************
 *                           Signatures
 *****************************************************************************/
/**
 * AWS Defined signatures for enabling certain capabilities in your agent.
 */
class ParentActionGroupSignature {
    /**
     * Constructor should be used as a temporary solution when a new signature is supported
     * but its implementation in CDK hasn't been added yet.
     */
    constructor(value) {
        this.value = value;
    }
    toString() {
        return this.value;
    }
}
exports.ParentActionGroupSignature = ParentActionGroupSignature;
_a = JSII_RTTI_SYMBOL_1;
ParentActionGroupSignature[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.ParentActionGroupSignature", version: "0.1.309" };
/**
 * Signature that allows your agent to request the user for additional information when trying to complete a task.
 */
ParentActionGroupSignature.USER_INPUT = new ParentActionGroupSignature('AMAZON.UserInput');
/**
 * Signature that allows your agent to generate, run, and troubleshoot code when trying to complete a task.
 */
ParentActionGroupSignature.CODE_INTERPRETER = new ParentActionGroupSignature('AMAZON.CodeInterpreter');
/******************************************************************************
 *                         DEF - Action Group Class
 *****************************************************************************/
class AgentActionGroup {
    // ------------------------------------------------------
    // Static Constructors
    // ------------------------------------------------------
    /**
     * Defines an action group that allows your agent to request the user for
     * additional information when trying to complete a task.
     * @param enabled Specifies whether the action group is available for the agent
     */
    static userInput(enabled) {
        return new AgentActionGroup({
            name: 'UserInputAction',
            enabled: enabled,
            parentActionGroupSignature: ParentActionGroupSignature.USER_INPUT,
        });
    }
    /**
     * Defines an action group that allows your agent to request the user for
     * additional information when trying to complete a task.
     * @param enabled Specifies whether the action group is available for the agent
     */
    static codeInterpreter(enabled) {
        return new AgentActionGroup({
            name: 'CodeInterpreterAction',
            enabled: enabled,
            parentActionGroupSignature: ParentActionGroupSignature.CODE_INTERPRETER,
        });
    }
    constructor(props) {
        // Validate Props
        this.validateProps(props);
        // ------------------------------------------------------
        // Set attributes or defaults
        // ------------------------------------------------------
        this.name = props.name;
        this.description = props.description;
        this.apiSchema = props.apiSchema;
        this.executor = props.executor;
        this.enabled = props.enabled ?? true;
        this.forceDelete = props.forceDelete ?? false;
        this.functionSchema = props.functionSchema;
        this.parentActionGroupSignature = props.parentActionGroupSignature;
    }
    validateProps(props) {
        if (props.parentActionGroupSignature && (props.description || props.apiSchema || props.executor)) {
            throw new Error('When parentActionGroupSignature is specified, you must leave the description, ' +
                'apiSchema, and actionGroupExecutor fields blank for this action group');
        }
    }
    /**
     * Format as CFN properties
     *
     * @internal This is an internal core function and should not be called directly.
     */
    _render() {
        return {
            actionGroupExecutor: this.executor?._render(),
            actionGroupName: this.name,
            actionGroupState: this.enabled ? 'ENABLED' : 'DISABLED',
            apiSchema: this.apiSchema?._render(),
            description: this.description,
            functionSchema: this.functionSchema,
            parentActionGroupSignature: this.parentActionGroupSignature?.toString(),
            skipResourceInUseCheckOnDelete: this.forceDelete,
        };
    }
}
exports.AgentActionGroup = AgentActionGroup;
_b = JSII_RTTI_SYMBOL_1;
AgentActionGroup[_b] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.AgentActionGroup", version: "0.1.309" };
//# sourceMappingURL=data:application/json;base64,