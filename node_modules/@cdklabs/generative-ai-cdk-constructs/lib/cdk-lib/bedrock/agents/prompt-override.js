"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PromptOverrideConfiguration = exports.AgentStepType = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const validation = require("../../../common/helpers/validation-helpers");
/**
 * The step in the agent sequence that this prompt configuration applies to.
 */
var AgentStepType;
(function (AgentStepType) {
    AgentStepType["PRE_PROCESSING"] = "PRE_PROCESSING";
    AgentStepType["ORCHESTRATION"] = "ORCHESTRATION";
    AgentStepType["POST_PROCESSING"] = "POST_PROCESSING";
    AgentStepType["ROUTING_CLASSIFIER"] = "ROUTING_CLASSIFIER";
    AgentStepType["MEMORY_SUMMARIZATION"] = "MEMORY_SUMMARIZATION";
    AgentStepType["KNOWLEDGE_BASE_RESPONSE_GENERATION"] = "KNOWLEDGE_BASE_RESPONSE_GENERATION";
})(AgentStepType || (exports.AgentStepType = AgentStepType = {}));
class PromptOverrideConfiguration {
    static fromSteps(steps) {
        // Create new object
        return new PromptOverrideConfiguration({ steps });
    }
    /**
     * Creates a PromptOverrideConfiguration with a custom Lambda parser function.
     * @param props Configuration including:
     *   - `parser`: Lambda function to use as custom parser
     *   - `steps`: prompt step configurations. At least one of the steps must make use of the custom parser.
     */
    static withCustomParser(props) {
        // Create new object
        return new PromptOverrideConfiguration(props);
    }
    /**
     * Create a new PromptOverrideConfiguration.
     *
     * @internal - This is marked as private so end users leverage it only through static methods
     */
    constructor(props) {
        this.validateInferenceConfig = (config) => {
            const errors = [];
            if (config) {
                if (config.temperature < 0 || config.temperature > 1) {
                    errors.push('Temperature must be between 0 and 1');
                }
                if (config.topP < 0 || config.topP > 1) {
                    errors.push('TopP must be between 0 and 1');
                }
                if (config.topK < 0 || config.topK > 500) {
                    errors.push('TopK must be between 0 and 500');
                }
                if (config.stopSequences.length > 4) {
                    errors.push('Maximum 4 stop sequences allowed');
                }
                if (config.maximumLength < 0 || config.maximumLength > 4096) {
                    errors.push('MaximumLength must be between 0 and 4096');
                }
            }
            return errors;
        };
        this.validateSteps = (steps) => {
            const errors = [];
            if (!steps || steps.length === 0) {
                errors.push('Steps array cannot be empty');
            }
            // Validate each step's inference config
            steps?.forEach(step => {
                const inferenceErrors = this.validateInferenceConfig(step.inferenceConfig);
                if (inferenceErrors.length > 0) {
                    errors.push(`Step ${step.stepType}: ${inferenceErrors.join(', ')}`);
                }
                // Validate foundationModel if provided
                if (step.foundationModel !== undefined) {
                    if (!step.foundationModel.invokableArn) {
                        errors.push(`Step ${step.stepType}: Foundation model must be a valid IInvokable with an invokableArn`);
                    }
                    // Only allow foundation model override for ROUTING_CLASSIFIER
                    if (step.stepType !== AgentStepType.ROUTING_CLASSIFIER) {
                        errors.push(`Step ${step.stepType}: Foundation model can only be specified for ROUTING_CLASSIFIER step type`);
                    }
                }
            });
            return errors;
        };
        this.validateCustomParser = (steps) => {
            const errors = [];
            const hasCustomParser = steps?.some(step => step.useCustomParser);
            if (!hasCustomParser) {
                errors.push('At least one step must use custom parser');
            }
            return errors;
        };
        // Validate props
        validation.throwIfInvalid(this.validateSteps, props.steps);
        if (props.parser) {
            validation.throwIfInvalid(this.validateCustomParser, props.steps);
        }
        this.parser = props.parser;
        this.steps = props.steps;
    }
    /**
     * Format as CfnAgent.PromptOverrideConfigurationProperty
     *
     * @internal This is an internal core function and should not be called directly.
     */
    _render() {
        return {
            overrideLambda: this.parser?.functionArn,
            promptConfigurations: this.steps?.map(step => ({
                // prettier-ignore
                promptType: step.stepType,
                /** Maps stepEnabled (true → 'ENABLED', false → 'DISABLED', undefined → undefined (uses CFN DEFAULT)) */
                promptState: step?.stepEnabled === undefined ? undefined : step.stepEnabled ? 'ENABLED' : 'DISABLED',
                /** Maps stepEnabled (true → 'OVERRIDDEN', false → 'DEFAULT', undefined → undefined (uses CFN DEFAULT)) */
                // prettier-ignore
                parserMode: step?.useCustomParser === undefined
                    ? undefined
                    : step?.useCustomParser ? 'OVERRIDDEN' : 'DEFAULT',
                // Use custom prompt template if provided, otherwise use default
                // prettier-ignore
                promptCreationMode: step?.customPromptTemplate === undefined
                    ? undefined
                    : step?.customPromptTemplate ? 'OVERRIDDEN' : 'DEFAULT',
                basePromptTemplate: step.customPromptTemplate,
                inferenceConfiguration: step.inferenceConfig,
                // Include foundation model if provided
                foundationModel: step.foundationModel?.invokableArn,
            })) || [],
        };
    }
}
exports.PromptOverrideConfiguration = PromptOverrideConfiguration;
_a = JSII_RTTI_SYMBOL_1;
PromptOverrideConfiguration[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.PromptOverrideConfiguration", version: "0.1.309" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvbXB0LW92ZXJyaWRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2Nkay1saWIvYmVkcm9jay9hZ2VudHMvcHJvbXB0LW92ZXJyaWRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBZUEseUVBQXlFO0FBR3pFOztHQUVHO0FBQ0gsSUFBWSxhQU9YO0FBUEQsV0FBWSxhQUFhO0lBQ3ZCLGtEQUFpQyxDQUFBO0lBQ2pDLGdEQUErQixDQUFBO0lBQy9CLG9EQUFtQyxDQUFBO0lBQ25DLDBEQUF5QyxDQUFBO0lBQ3pDLDhEQUE2QyxDQUFBO0lBQzdDLDBGQUF5RSxDQUFBO0FBQzNFLENBQUMsRUFQVyxhQUFhLDZCQUFiLGFBQWEsUUFPeEI7QUF5SEQsTUFBYSwyQkFBMkI7SUFDL0IsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFpQztRQUN2RCxvQkFBb0I7UUFDcEIsT0FBTyxJQUFJLDJCQUEyQixDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBQ0Q7Ozs7O09BS0c7SUFDSSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsS0FBd0I7UUFDckQsb0JBQW9CO1FBQ3BCLE9BQU8sSUFBSSwyQkFBMkIsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBd0JEOzs7O09BSUc7SUFDSCxZQUFvQixLQUF3QjtRQTJDcEMsNEJBQXVCLEdBQUcsQ0FBQyxNQUErQixFQUFZLEVBQUU7WUFDOUUsTUFBTSxNQUFNLEdBQWEsRUFBRSxDQUFDO1lBRTVCLElBQUksTUFBTSxFQUFFLENBQUM7Z0JBQ1gsSUFBSSxNQUFNLENBQUMsV0FBVyxHQUFHLENBQUMsSUFBSSxNQUFNLENBQUMsV0FBVyxHQUFHLENBQUMsRUFBRSxDQUFDO29CQUNyRCxNQUFNLENBQUMsSUFBSSxDQUFDLHFDQUFxQyxDQUFDLENBQUM7Z0JBQ3JELENBQUM7Z0JBQ0QsSUFBSSxNQUFNLENBQUMsSUFBSSxHQUFHLENBQUMsSUFBSSxN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O2dCQUM1Qyx1Q0FBdUM7Z0JBQ3ZDLGVBQWUsRUFBRSxJQUFJLENBQUMsZUFBZSxFQUFFLFlBQVk7YUFDcEQsQ0FBQyxDQUFDLElBQUksRUFBRTtTQUNaLENBQUM7SUFDSixDQUFDOztBQXBGSCxrRUFzSkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqICBDb3B5cmlnaHQgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKS4gWW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogIHdpdGggdGhlIExpY2Vuc2UuIEEgY29weSBvZiB0aGUgTGljZW5zZSBpcyBsb2NhdGVkIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiAgb3IgaW4gdGhlICdsaWNlbnNlJyBmaWxlIGFjY29tcGFueWluZyB0aGlzIGZpbGUuIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAnQVMgSVMnIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVNcbiAqICBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9uc1xuICogIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDZm5BZ2VudCB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1iZWRyb2NrJztcbmltcG9ydCB7IElGdW5jdGlvbiB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1sYW1iZGEnO1xuaW1wb3J0ICogYXMgdmFsaWRhdGlvbiBmcm9tICcuLi8uLi8uLi9jb21tb24vaGVscGVycy92YWxpZGF0aW9uLWhlbHBlcnMnO1xuaW1wb3J0IHsgSUludm9rYWJsZSB9IGZyb20gJy4uL21vZGVscyc7XG5cbi8qKlxuICogVGhlIHN0ZXAgaW4gdGhlIGFnZW50IHNlcXVlbmNlIHRoYXQgdGhpcyBwcm9tcHQgY29uZmlndXJhdGlvbiBhcHBsaWVzIHRvLlxuICovXG5leHBvcnQgZW51bSBBZ2VudFN0ZXBUeXBlIHtcbiAgUFJFX1BST0NFU1NJTkcgPSAnUFJFX1BST0NFU1NJTkcnLFxuICBPUkNIRVNUUkFUSU9OID0gJ09SQ0hFU1RSQVRJT04nLFxuICBQT1NUX1BST0NFU1NJTkcgPSAnUE9TVF9QUk9DRVNTSU5HJyxcbiAgUk9VVElOR19DTEFTU0lGSUVSID0gJ1JPVVRJTkdfQ0xBU1NJRklFUicsXG4gIE1FTU9SWV9TVU1NQVJJWkFUSU9OID0gJ01FTU9SWV9TVU1NQVJJWkFUSU9OJyxcbiAgS05PV0xFREdFX0JBU0VfUkVTUE9OU0VfR0VORVJBVElPTiA9ICdLTk9XTEVER0VfQkFTRV9SRVNQT05TRV9HRU5FUkFUSU9OJyxcbn1cblxuLyoqXG4gKiBMTE0gaW5mZXJlbmNlIGNvbmZpZ3VyYXRpb25cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJbmZlcmVuY2VDb25maWd1cmF0aW9uIHtcbiAgLyoqXG4gICAqIFRoZSBsaWtlbGlob29kIG9mIHRoZSBtb2RlbCBzZWxlY3RpbmcgaGlnaGVyLXByb2JhYmlsaXR5IG9wdGlvbnMgd2hpbGVcbiAgICogZ2VuZXJhdGluZyBhIHJlc3BvbnNlLiBBIGxvd2VyIHZhbHVlIG1ha2VzIHRoZSBtb2RlbCBtb3JlIGxpa2VseSB0byBjaG9vc2VcbiAgICogaGlnaGVyLXByb2JhYmlsaXR5IG9wdGlvbnMsIHdoaWxlIGEgaGlnaGVyIHZhbHVlIG1ha2VzIHRoZSBtb2RlbCBtb3JlXG4gICAqIGxpa2VseSB0byBjaG9vc2UgbG93ZXItcHJvYmFiaWxpdHkgb3B0aW9ucy5cbiAgICpcbiAgICogRmxvYXRpbmcgcG9pbnRcbiAgICpcbiAgICogbWluIDBcbiAgICogbWF4IDFcbiAgICovXG4gIHJlYWRvbmx5IHRlbXBlcmF0dXJlOiBudW1iZXI7XG4gIC8qKlxuICAgKiBXaGlsZSBnZW5lcmF0aW5nIGEgcmVzcG9uc2UsIHRoZSBtb2RlbCBkZXRlcm1pbmVzIHRoZSBwcm9iYWJpbGl0eSBvZiB0aGVcbiAgICogZm9sbG93aW5nIHRva2VuIGF0IGVhY2ggcG9pbnQgb2YgZ2VuZXJhdGlvbi4gVGhlIHZhbHVlIHRoYXQgeW91IHNldCBmb3JcbiAgICogVG9wIFAgZGV0ZXJtaW5lcyB0aGUgbnVtYmVyIG9mIG1vc3QtbGlrZWx5IGNhbmRpZGF0ZXMgZnJvbSB3aGljaCB0aGUgbW9kZWxcbiAgICogY2hvb3NlcyB0aGUgbmV4dCB0b2tlbiBpbiB0aGUgc2VxdWVuY2UuIEZvciBleGFtcGxlLCBpZiB5b3Ugc2V0IHRvcFAgdG9cbiAgICogODAsIHRoZSBtb2RlbCBvbmx5IHNlbGVjdHMgdGhlIG5leHQgdG9rZW4gZnJvbSB0aGUgdG9wIDgwJSBvZiB0aGVcbiAgICogcHJvYmFiaWxpdHkgZGlzdHJpYnV0aW9uIG9mIG5leHQgdG9rZW5zLlxuICAgKlxuICAgKiBGbG9hdGluZyBwb2ludFxuICAgKlxuICAgKiBtaW4gMFxuICAgKiBtYXggMVxuICAgKi9cbiAgcmVhZG9ubHkgdG9wUDogbnVtYmVyO1xuICAvKipcbiAgICogV2hpbGUgZ2VuZXJhdGluZyBhIHJlc3BvbnNlLCB0aGUgbW9kZWwgZGV0ZXJtaW5lcyB0aGUgcHJvYmFiaWxpdHkgb2YgdGhlXG4gICAqIGZvbGxvd2luZyB0b2tlbiBhdCBlYWNoIHBvaW50IG9mIGdlbmVyYXRpb24uIFRoZSB2YWx1ZSB0aGF0IHlvdSBzZXQgZm9yXG4gICAqIHRvcEsgaXMgdGhlIG51bWJlciBvZiBtb3N0LWxpa2VseSBjYW5kaWRhdGVzIGZyb20gd2hpY2ggdGhlIG1vZGVsIGNob29zZXNcbiAgICogdGhlIG5leHQgdG9rZW4gaW4gdGhlIHNlcXVlbmNlLiBGb3IgZXhhbXBsZSwgaWYgeW91IHNldCB0b3BLIHRvIDUwLCB0aGVcbiAgICogbW9kZWwgc2VsZWN0cyB0aGUgbmV4dCB0b2tlbiBmcm9tIGFtb25nIHRoZSB0b3AgNTAgbW9zdCBsaWtlbHkgY2hvaWNlcy5cbiAgICpcbiAgICogSW50ZWdlclxuICAgKlxuICAgKiBtaW4gMFxuICAgKiBtYXggNTAwXG4gICAqL1xuICByZWFkb25seSB0b3BLOiBudW1iZXI7XG4gIC8qKlxuICAgKiBBIGxpc3Qgb2Ygc3RvcCBzZXF1ZW5jZXMuIEEgc3RvcCBzZXF1ZW5jZSBpcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgdGhhdFxuICAgKiBjYXVzZXMgdGhlIG1vZGVsIHRvIHN0b3AgZ2VuZXJhdGluZyB0aGUgcmVzcG9uc2UuXG4gICAqXG4gICAqIGxlbmd0aCAwLTRcbiAgICovXG4gIHJlYWRvbmx5IHN0b3BTZXF1ZW5jZXM6IHN0cmluZ1tdO1xuICAvKipcbiAgICogVGhlIG1heGltdW0gbnVtYmVyIG9mIHRva2VucyB0byBnZW5lcmF0ZSBpbiB0aGUgcmVzcG9uc2UuXG4gICAqXG4gICAqIEludGVnZXJcbiAgICpcbiAgICogbWluIDBcbiAgICogbWF4IDQwOTZcbiAgICovXG4gIHJlYWRvbmx5IG1heGltdW1MZW5ndGg6IG51bWJlcjtcbn1cblxuLyoqXG4gKiBDb250YWlucyBjb25maWd1cmF0aW9ucyB0byBvdmVycmlkZSBhIHByb21wdCB0ZW1wbGF0ZSBpbiBvbmUgcGFydCBvZiBhbiBhZ2VudCBzZXF1ZW5jZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQcm9tcHRTdGVwQ29uZmlndXJhdGlvbiB7XG4gIC8qKlxuICAgKiBUaGUgc3RlcCBpbiB0aGUgYWdlbnQgc2VxdWVuY2Ugd2hlcmUgdG8gc2V0IGEgc3BlY2lmaWMgcHJvbXB0IGNvbmZpZ3VyYXRpb24uXG4gICAqL1xuICByZWFkb25seSBzdGVwVHlwZTogQWdlbnRTdGVwVHlwZTtcbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gZW5hYmxlIG9yIHNraXAgdGhpcyBzdGVwIGluIHRoZSBhZ2VudCBzZXF1ZW5jZS5cbiAgICogQGRlZmF1bHQgLSBUaGUgZGVmYXVsdCBzdGF0ZSBmb3IgZWFjaCBzdGVwIHR5cGUgaXMgYXMgZm9sbG93cy5cbiAgICpcbiAgICogICAgIFBSRV9QUk9DRVNTSU5HIOKAkyBFTkFCTEVEXG4gICAqICAgICBPUkNIRVNUUkFUSU9OIOKAkyBFTkFCTEVEXG4gICAqICAgICBLTk9XTEVER0VfQkFTRV9SRVNQT05TRV9HRU5FUkFUSU9OIOKAkyBFTkFCTEVEXG4gICAqICAgICBQT1NUX1BST0NFU1NJTkcg4oCTIERJU0FCTEVEXG4gICAqL1xuICByZWFkb25seSBzdGVwRW5hYmxlZD86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBUaGUgY3VzdG9tIHByb21wdCB0ZW1wbGF0ZSB0byBiZSB1c2VkLlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIFRoZSBkZWZhdWx0IHByb21wdCB0ZW1wbGF0ZSB3aWxsIGJlIHVzZWQuXG4gICAqIEBzZWUgaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2JlZHJvY2svbGF0ZXN0L3VzZXJndWlkZS9wcm9tcHQtcGxhY2Vob2xkZXJzLmh0bWxcbiAgICovXG4gIHJlYWRvbmx5IGN1c3RvbVByb21wdFRlbXBsYXRlPzogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIGluZmVyZW5jZSBjb25maWd1cmF0aW9uIHBhcmFtZXRlcnMgdG8gdXNlLlxuICAgKi9cbiAgcmVhZG9ubHkgaW5mZXJlbmNlQ29uZmlnPzogSW5mZXJlbmNlQ29uZmlndXJhdGlvbjtcbiAgLyoqXG4gICAqIFRoZSBmb3VuZGF0aW9uIG1vZGVsIHRvIHVzZSBmb3IgdGhpcyBzcGVjaWZpYyBwcm9tcHQgc3RlcC5cbiAgICogVGhpcyBhbGxvd3MgdXNpbmcgZGlmZmVyZW50IG1vZGVscyBmb3IgZGlmZmVyZW50IHN0ZXBzIGluIHRoZSBhZ2VudCBzZXF1ZW5jZS5cbiAgICpcbiAgICogQGRlZmF1bHQgLSBUaGUgYWdlbnQncyBkZWZhdWx0IGZvdW5kYXRpb24gbW9kZWwgd2lsbCBiZSB1c2VkLlxuICAgKi9cbiAgcmVhZG9ubHkgZm91bmRhdGlvbk1vZGVsPzogSUludm9rYWJsZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQcm9tcHRTdGVwQ29uZmlndXJhdGlvbkN1c3RvbVBhcnNlciBleHRlbmRzIFByb21wdFN0ZXBDb25maWd1cmF0aW9uIHtcbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gdXNlIHRoZSBjdXN0b20gTGFtYmRhIHBhcnNlciBkZWZpbmVkIGZvciB0aGUgc2VxdWVuY2UuXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gZmFsc2VcbiAgICovXG4gIHJlYWRvbmx5IHVzZUN1c3RvbVBhcnNlcj86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ3VzdG9tUGFyc2VyUHJvcHMge1xuICAvKlxuICAgKiBMYW1iZGEgZnVuY3Rpb24gdG8gdXNlIGFzIGN1c3RvbSBwYXJzZXJcbiAgICovXG4gIHJlYWRvbmx5IHBhcnNlcj86IElGdW5jdGlvbjtcbiAgLypcbiAgICogcHJvbXB0IHN0ZXAgY29uZmlndXJhdGlvbnMuIEF0IGxlYXN0IG9uZSBvZiB0aGUgc3RlcHMgbXVzdCBtYWtlIHVzZSBvZiB0aGUgY3VzdG9tIHBhcnNlci5cbiAgICovXG4gIHJlYWRvbmx5IHN0ZXBzPzogUHJvbXB0U3RlcENvbmZpZ3VyYXRpb25DdXN0b21QYXJzZXJbXTtcbn1cblxuZXhwb3J0IGNsYXNzIFByb21wdE92ZXJyaWRlQ29uZmlndXJhdGlvbiB7XG4gIHB1YmxpYyBzdGF0aWMgZnJvbVN0ZXBzKHN0ZXBzPzogUHJvbXB0U3RlcENvbmZpZ3VyYXRpb25bXSk6IFByb21wdE92ZXJyaWRlQ29uZmlndXJhdGlvbiB7XG4gICAgLy8gQ3JlYXRlIG5ldyBvYmplY3RcbiAgICByZXR1cm4gbmV3IFByb21wdE92ZXJyaWRlQ29uZmlndXJhdGlvbih7IHN0ZXBzIH0pO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgUHJvbXB0T3ZlcnJpZGVDb25maWd1cmF0aW9uIHdpdGggYSBjdXN0b20gTGFtYmRhIHBhcnNlciBmdW5jdGlvbi5cbiAgICogQHBhcmFtIHByb3BzIENvbmZpZ3VyYXRpb24gaW5jbHVkaW5nOlxuICAgKiAgIC0gYHBhcnNlcmA6IExhbWJkYSBmdW5jdGlvbiB0byB1c2UgYXMgY3VzdG9tIHBhcnNlclxuICAgKiAgIC0gYHN0ZXBzYDogcHJvbXB0IHN0ZXAgY29uZmlndXJhdGlvbnMuIEF0IGxlYXN0IG9uZSBvZiB0aGUgc3RlcHMgbXVzdCBtYWtlIHVzZSBvZiB0aGUgY3VzdG9tIHBhcnNlci5cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgd2l0aEN1c3RvbVBhcnNlcihwcm9wczogQ3VzdG9tUGFyc2VyUHJvcHMpOiBQcm9tcHRPdmVycmlkZUNvbmZpZ3VyYXRpb24ge1xuICAgIC8vIENyZWF0ZSBuZXcgb2JqZWN0XG4gICAgcmV0dXJuIG5ldyBQcm9tcHRPdmVycmlkZUNvbmZpZ3VyYXRpb24ocHJvcHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBjdXN0b20gTGFtYmRhIHBhcnNlciBmdW5jdGlvbiB0byB1c2UuXG4gICAqIFRoZSBMYW1iZGEgcGFyc2VyIHByb2Nlc3NlcyBhbmQgaW50ZXJwcmV0cyB0aGUgcmF3IGZvdW5kYXRpb24gbW9kZWwgb3V0cHV0LlxuICAgKiBJdCByZWNlaXZlcyBhbiBpbnB1dCBldmVudCB3aXRoOlxuICAgKiAtIG1lc3NhZ2VWZXJzaW9uOiBWZXJzaW9uIG9mIG1lc3NhZ2UgZm9ybWF0ICgxLjApXG4gICAqIC0gYWdlbnQ6IEluZm8gYWJvdXQgdGhlIGFnZW50IChuYW1lLCBpZCwgYWxpYXMsIHZlcnNpb24pXG4gICAqIC0gaW52b2tlTW9kZWxSYXdSZXNwb25zZTogUmF3IG1vZGVsIG91dHB1dCB0byBwYXJzZVxuICAgKiAtIHByb21wdFR5cGU6IFR5cGUgb2YgcHJvbXB0IGJlaW5nIHBhcnNlZFxuICAgKiAtIG92ZXJyaWRlVHlwZTogVHlwZSBvZiBvdmVycmlkZSAoT1VUUFVUX1BBUlNFUilcbiAgICpcbiAgICogVGhlIExhbWJkYSBtdXN0IHJldHVybiBhIHJlc3BvbnNlIHRoYXQgdGhlIGFnZW50IHVzZXMgZm9yIG5leHQgYWN0aW9ucy5cbiAgICogQHNlZSBodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vYmVkcm9jay9sYXRlc3QvdXNlcmd1aWRlL2xhbWJkYS1wYXJzZXIuaHRtbFxuICAgKi9cbiAgcmVhZG9ubHkgcGFyc2VyPzogSUZ1bmN0aW9uO1xuXG4gIC8qKlxuICAgKiBUaGUgcHJvbXB0IGNvbmZpZ3VyYXRpb25zIHRvIG92ZXJyaWRlIHRoZSBwcm9tcHQgdGVtcGxhdGVzIGluIHRoZSBhZ2VudCBzZXF1ZW5jZS5cbiAgICpcbiAgICogQGRlZmF1bHQgLSBObyBwcm9tcHQgY29uZmlndXJhdGlvbiB3aWxsIGJlIG92ZXJyaWRkZW4uXG4gICAqL1xuICByZWFkb25seSBzdGVwcz86IFByb21wdFN0ZXBDb25maWd1cmF0aW9uQ3VzdG9tUGFyc2VyW107XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBQcm9tcHRPdmVycmlkZUNvbmZpZ3VyYXRpb24uXG4gICAqXG4gICAqIEBpbnRlcm5hbCAtIFRoaXMgaXMgbWFya2VkIGFzIHByaXZhdGUgc28gZW5kIHVzZXJzIGxldmVyYWdlIGl0IG9ubHkgdGhyb3VnaCBzdGF0aWMgbWV0aG9kc1xuICAgKi9cbiAgcHJpdmF0ZSBjb25zdHJ1Y3Rvcihwcm9wczogQ3VzdG9tUGFyc2VyUHJvcHMpIHtcbiAgICAvLyBWYWxpZGF0ZSBwcm9wc1xuICAgIHZhbGlkYXRpb24udGhyb3dJZkludmFsaWQodGhpcy52YWxpZGF0ZVN0ZXBzLCBwcm9wcy5zdGVwcyk7XG4gICAgaWYgKHByb3BzLnBhcnNlcikge1xuICAgICAgdmFsaWRhdGlvbi50aHJvd0lmSW52YWxpZCh0aGlzLnZhbGlkYXRlQ3VzdG9tUGFyc2VyLCBwcm9wcy5zdGVwcyk7XG4gICAgfVxuICAgIHRoaXMucGFyc2VyID0gcHJvcHMucGFyc2VyO1xuICAgIHRoaXMuc3RlcHMgPSBwcm9wcy5zdGVwcztcbiAgfVxuXG4gIC8qKlxuICAgKiBGb3JtYXQgYXMgQ2ZuQWdlbnQuUHJvbXB0T3ZlcnJpZGVDb25maWd1cmF0aW9uUHJvcGVydHlcbiAgICpcbiAgICogQGludGVybmFsIFRoaXMgaXMgYW4gaW50ZXJuYWwgY29yZSBmdW5jdGlvbiBhbmQgc2hvdWxkIG5vdCBiZSBjYWxsZWQgZGlyZWN0bHkuXG4gICAqL1xuICBwdWJsaWMgX3JlbmRlcigpOiBDZm5BZ2VudC5Qcm9tcHRPdmVycmlkZUNvbmZpZ3VyYXRpb25Qcm9wZXJ0eSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG92ZXJyaWRlTGFtYmRhOiB0aGlzLnBhcnNlcj8uZnVuY3Rpb25Bcm4sXG4gICAgICBwcm9tcHRDb25maWd1cmF0aW9uczpcbiAgICAgICAgdGhpcy5zdGVwcz8ubWFwKHN0ZXAgPT4gKHtcbiAgICAgICAgICAvLyBwcmV0dGllci1pZ25vcmVcbiAgICAgICAgICBwcm9tcHRUeXBlOiBzdGVwLnN0ZXBUeXBlLFxuICAgICAgICAgIC8qKiBNYXBzIHN0ZXBFbmFibGVkICh0cnVlIOKGkiAnRU5BQkxFRCcsIGZhbHNlIOKGkiAnRElTQUJMRUQnLCB1bmRlZmluZWQg4oaSIHVuZGVmaW5lZCAodXNlcyBDRk4gREVGQVVMVCkpICovXG4gICAgICAgICAgcHJvbXB0U3RhdGU6IHN0ZXA/LnN0ZXBFbmFibGVkID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzdGVwLnN0ZXBFbmFibGVkID8gJ0VOQUJMRUQnIDogJ0RJU0FCTEVEJyxcbiAgICAgICAgICAvKiogTWFwcyBzdGVwRW5hYmxlZCAodHJ1ZSDihpIgJ09WRVJSSURERU4nLCBmYWxzZSDihpIgJ0RFRkFVTFQnLCB1bmRlZmluZWQg4oaSIHVuZGVmaW5lZCAodXNlcyBDRk4gREVGQVVMVCkpICovXG4gICAgICAgICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgICAgICAgcGFyc2VyTW9kZTpcbiAgICAgICAgICAgIHN0ZXA/LnVzZUN1c3RvbVBhcnNlciA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gdW5kZWZpbmVkXG4gICAgICAgICAgICAgIDogc3RlcD8udXNlQ3VzdG9tUGFyc2VyID8gJ09WRVJSSURERU4nIDogJ0RFRkFVTFQnLFxuICAgICAgICAgIC8vIFVzZSBjdXN0b20gcHJvbXB0IHRlbXBsYXRlIGlmIHByb3ZpZGVkLCBvdGhlcndpc2UgdXNlIGRlZmF1bHRcbiAgICAgICAgICAvLyBwcmV0dGllci1pZ25vcmVcbiAgICAgICAgICBwcm9tcHRDcmVhdGlvbk1vZGU6IHN0ZXA/LmN1c3RvbVByb21wdFRlbXBsYXRlID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gdW5kZWZpbmVkXG4gICAgICAgICAgICA6IHN0ZXA/LmN1c3RvbVByb21wdFRlbXBsYXRlID8gJ09WRVJSSURERU4nIDogJ0RFRkFVTFQnLFxuICAgICAgICAgIGJhc2VQcm9tcHRUZW1wbGF0ZTogc3RlcC5jdXN0b21Qcm9tcHRUZW1wbGF0ZSxcbiAgICAgICAgICBpbmZlcmVuY2VDb25maWd1cmF0aW9uOiBzdGVwLmluZmVyZW5jZUNvbmZpZyxcbiAgICAgICAgICAvLyBJbmNsdWRlIGZvdW5kYXRpb24gbW9kZWwgaWYgcHJvdmlkZWRcbiAgICAgICAgICBmb3VuZGF0aW9uTW9kZWw6IHN0ZXAuZm91bmRhdGlvbk1vZGVsPy5pbnZva2FibGVBcm4sXG4gICAgICAgIH0pKSB8fCBbXSxcbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSB2YWxpZGF0ZUluZmVyZW5jZUNvbmZpZyA9IChjb25maWc/OiBJbmZlcmVuY2VDb25maWd1cmF0aW9uKTogc3RyaW5nW10gPT4ge1xuICAgIGNvbnN0IGVycm9yczogc3RyaW5nW10gPSBbXTtcblxuICAgIGlmIChjb25maWcpIHtcbiAgICAgIGlmIChjb25maWcudGVtcGVyYXR1cmUgPCAwIHx8IGNvbmZpZy50ZW1wZXJhdHVyZSA+IDEpIHtcbiAgICAgICAgZXJyb3JzLnB1c2goJ1RlbXBlcmF0dXJlIG11c3QgYmUgYmV0d2VlbiAwIGFuZCAxJyk7XG4gICAgICB9XG4gICAgICBpZiAoY29uZmlnLnRvcFAgPCAwIHx8IGNvbmZpZy50b3BQID4gMSkge1xuICAgICAgICBlcnJvcnMucHVzaCgnVG9wUCBtdXN0IGJlIGJldHdlZW4gMCBhbmQgMScpO1xuICAgICAgfVxuICAgICAgaWYgKGNvbmZpZy50b3BLIDwgMCB8fCBjb25maWcudG9wSyA+IDUwMCkge1xuICAgICAgICBlcnJvcnMucHVzaCgnVG9wSyBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNTAwJyk7XG4gICAgICB9XG4gICAgICBpZiAoY29uZmlnLnN0b3BTZXF1ZW5jZXMubGVuZ3RoID4gNCkge1xuICAgICAgICBlcnJvcnMucHVzaCgnTWF4aW11bSA0IHN0b3Agc2VxdWVuY2VzIGFsbG93ZWQnKTtcbiAgICAgIH1cbiAgICAgIGlmIChjb25maWcubWF4aW11bUxlbmd0aCA8IDAgfHwgY29uZmlnLm1heGltdW1MZW5ndGggPiA0MDk2KSB7XG4gICAgICAgIGVycm9ycy5wdXNoKCdNYXhpbXVtTGVuZ3RoIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA0MDk2Jyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGVycm9ycztcbiAgfTtcblxuICBwcml2YXRlIHZhbGlkYXRlU3RlcHMgPSAoc3RlcHM/OiBQcm9tcHRTdGVwQ29uZmlndXJhdGlvbltdKTogc3RyaW5nW10gPT4ge1xuICAgIGNvbnN0IGVycm9yczogc3RyaW5nW10gPSBbXTtcblxuICAgIGlmICghc3RlcHMgfHwgc3RlcHMubGVuZ3RoID09PSAwKSB7XG4gICAgICBlcnJvcnMucHVzaCgnU3RlcHMgYXJyYXkgY2Fubm90IGJlIGVtcHR5Jyk7XG4gICAgfVxuXG4gICAgLy8gVmFsaWRhdGUgZWFjaCBzdGVwJ3MgaW5mZXJlbmNlIGNvbmZpZ1xuICAgIHN0ZXBzPy5mb3JFYWNoKHN0ZXAgPT4ge1xuICAgICAgY29uc3QgaW5mZXJlbmNlRXJyb3JzID0gdGhpcy52YWxpZGF0ZUluZmVyZW5jZUNvbmZpZyhzdGVwLmluZmVyZW5jZUNvbmZpZyk7XG4gICAgICBpZiAoaW5mZXJlbmNlRXJyb3JzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgZXJyb3JzLnB1c2goYFN0ZXAgJHtzdGVwLnN0ZXBUeXBlfTogJHtpbmZlcmVuY2VFcnJvcnMuam9pbignLCAnKX1gKTtcbiAgICAgIH1cblxuICAgICAgLy8gVmFsaWRhdGUgZm91bmRhdGlvbk1vZGVsIGlmIHByb3ZpZGVkXG4gICAgICBpZiAoc3RlcC5mb3VuZGF0aW9uTW9kZWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoIXN0ZXAuZm91bmRhdGlvbk1vZGVsLmludm9rYWJsZUFybikge1xuICAgICAgICAgIGVycm9ycy5wdXNoKGBTdGVwICR7c3RlcC5zdGVwVHlwZX06IEZvdW5kYXRpb24gbW9kZWwgbXVzdCBiZSBhIHZhbGlkIElJbnZva2FibGUgd2l0aCBhbiBpbnZva2FibGVBcm5gKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBPbmx5IGFsbG93IGZvdW5kYXRpb24gbW9kZWwgb3ZlcnJpZGUgZm9yIFJPVVRJTkdfQ0xBU1NJRklFUlxuICAgICAgICBpZiAoc3RlcC5zdGVwVHlwZSAhPT0gQWdlbnRTdGVwVHlwZS5ST1VUSU5HX0NMQVNTSUZJRVIpIHtcbiAgICAgICAgICBlcnJvcnMucHVzaChgU3RlcCAke3N0ZXAuc3RlcFR5cGV9OiBGb3VuZGF0aW9uIG1vZGVsIGNhbiBvbmx5IGJlIHNwZWNpZmllZCBmb3IgUk9VVElOR19DTEFTU0lGSUVSIHN0ZXAgdHlwZWApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICB9KTtcblxuICAgIHJldHVybiBlcnJvcnM7XG4gIH07XG5cbiAgcHJpdmF0ZSB2YWxpZGF0ZUN1c3RvbVBhcnNlciA9IChzdGVwcz86IFByb21wdFN0ZXBDb25maWd1cmF0aW9uQ3VzdG9tUGFyc2VyW10pOiBzdHJpbmdbXSA9PiB7XG4gICAgY29uc3QgZXJyb3JzOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgY29uc3QgaGFzQ3VzdG9tUGFyc2VyID0gc3RlcHM/LnNvbWUoc3RlcCA9PiBzdGVwLnVzZUN1c3RvbVBhcnNlcik7XG4gICAgaWYgKCFoYXNDdXN0b21QYXJzZXIpIHtcbiAgICAgIGVycm9ycy5wdXNoKCdBdCBsZWFzdCBvbmUgc3RlcCBtdXN0IHVzZSBjdXN0b20gcGFyc2VyJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVycm9ycztcbiAgfTtcbn1cbiJdfQ==