"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrchestrationExecutor = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/******************************************************************************
 *                           Orchestration Executor
 *****************************************************************************/
/**
 * Contains details about the Lambda function containing the orchestration logic carried
 * out upon invoking the custom orchestration.
 */
class OrchestrationExecutor {
    /**
     * Defines an orchestration executor with a Lambda function containing the business logic.
     * @param lambdaFunction - Lambda function to be called by the orchestration.
     */
    static fromlambdaFunction(lambdaFunction) {
        return new OrchestrationExecutor(lambdaFunction);
    }
    constructor(lambdaFunction) {
        this.lambdaFunction = lambdaFunction;
    }
    /**
     * Format as CFN properties
     *
     * @internal This is an internal core function and should not be called directly.
     */
    _render() {
        return {
            lambda: this.lambdaFunction?.functionArn,
        };
    }
}
exports.OrchestrationExecutor = OrchestrationExecutor;
_a = JSII_RTTI_SYMBOL_1;
OrchestrationExecutor[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.OrchestrationExecutor", version: "0.1.309" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JjaGVzdHJhdGlvbi1leGVjdXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jZGstbGliL2JlZHJvY2svYWdlbnRzL29yY2hlc3RyYXRpb24tZXhlY3V0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFnQkE7OytFQUUrRTtBQUMvRTs7O0dBR0c7QUFDSCxNQUFhLHFCQUFxQjtJQUNoQzs7O09BR0c7SUFDSSxNQUFNLENBQUMsa0JBQWtCLENBQUMsY0FBeUI7UUFDeEQsT0FBTyxJQUFJLHFCQUFxQixDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFJRCxZQUFvQixjQUF5QjtRQUMzQyxJQUFJLENBQUMsY0FBYyxHQUFHLGNBQWMsQ0FBQztJQUN2QyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLE9BQU87UUFDWixPQUFPO1lBQ0wsTUFBTSxFQUFFLElBQUksQ0FBQyxjQUFjLEVBQUUsV0FBVztTQUN6QyxDQUFDO0lBQ0osQ0FBQzs7QUF4Qkgsc0RBeUJDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiAgQ29weXJpZ2h0IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIikuIFlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqICB3aXRoIHRoZSBMaWNlbnNlLiBBIGNvcHkgb2YgdGhlIExpY2Vuc2UgaXMgbG9jYXRlZCBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogIG9yIGluIHRoZSAnbGljZW5zZScgZmlsZSBhY2NvbXBhbnlpbmcgdGhpcyBmaWxlLiBUaGlzIGZpbGUgaXMgZGlzdHJpYnV0ZWQgb24gYW4gJ0FTIElTJyBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTXG4gKiAgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnNcbiAqICBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0ICogYXMgYmVkcm9jayBmcm9tICdhd3MtY2RrLWxpYi9hd3MtYmVkcm9jayc7XG5pbXBvcnQgeyBJRnVuY3Rpb24gfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtbGFtYmRhJztcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICBPcmNoZXN0cmF0aW9uIEV4ZWN1dG9yXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKipcbiAqIENvbnRhaW5zIGRldGFpbHMgYWJvdXQgdGhlIExhbWJkYSBmdW5jdGlvbiBjb250YWluaW5nIHRoZSBvcmNoZXN0cmF0aW9uIGxvZ2ljIGNhcnJpZWRcbiAqIG91dCB1cG9uIGludm9raW5nIHRoZSBjdXN0b20gb3JjaGVzdHJhdGlvbi5cbiAqL1xuZXhwb3J0IGNsYXNzIE9yY2hlc3RyYXRpb25FeGVjdXRvciB7XG4gIC8qKlxuICAgKiBEZWZpbmVzIGFuIG9yY2hlc3RyYXRpb24gZXhlY3V0b3Igd2l0aCBhIExhbWJkYSBmdW5jdGlvbiBjb250YWluaW5nIHRoZSBidXNpbmVzcyBsb2dpYy5cbiAgICogQHBhcmFtIGxhbWJkYUZ1bmN0aW9uIC0gTGFtYmRhIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBieSB0aGUgb3JjaGVzdHJhdGlvbi5cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZnJvbWxhbWJkYUZ1bmN0aW9uKGxhbWJkYUZ1bmN0aW9uOiBJRnVuY3Rpb24pOiBPcmNoZXN0cmF0aW9uRXhlY3V0b3Ige1xuICAgIHJldHVybiBuZXcgT3JjaGVzdHJhdGlvbkV4ZWN1dG9yKGxhbWJkYUZ1bmN0aW9uKTtcbiAgfVxuXG4gIHB1YmxpYyByZWFkb25seSBsYW1iZGFGdW5jdGlvbjogSUZ1bmN0aW9uO1xuXG4gIHByaXZhdGUgY29uc3RydWN0b3IobGFtYmRhRnVuY3Rpb246IElGdW5jdGlvbikge1xuICAgIHRoaXMubGFtYmRhRnVuY3Rpb24gPSBsYW1iZGFGdW5jdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBGb3JtYXQgYXMgQ0ZOIHByb3BlcnRpZXNcbiAgICpcbiAgICogQGludGVybmFsIFRoaXMgaXMgYW4gaW50ZXJuYWwgY29yZSBmdW5jdGlvbiBhbmQgc2hvdWxkIG5vdCBiZSBjYWxsZWQgZGlyZWN0bHkuXG4gICAqL1xuICBwdWJsaWMgX3JlbmRlcigpOiBiZWRyb2NrLkNmbkFnZW50Lk9yY2hlc3RyYXRpb25FeGVjdXRvclByb3BlcnR5IHtcbiAgICByZXR1cm4ge1xuICAgICAgbGFtYmRhOiB0aGlzLmxhbWJkYUZ1bmN0aW9uPy5mdW5jdGlvbkFybixcbiAgICB9O1xuICB9XG59Il19