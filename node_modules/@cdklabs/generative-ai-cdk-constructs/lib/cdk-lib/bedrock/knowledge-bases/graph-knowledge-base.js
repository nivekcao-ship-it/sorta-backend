"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GraphKnowledgeBase = exports.GraphKnowledgeBaseBase = exports.KnowledgeBaseBase = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
var knowledge_base_1 = require("./knowledge-base");
Object.defineProperty(exports, "KnowledgeBaseBase", { enumerable: true, get: function () { return knowledge_base_1.KnowledgeBaseBase; } });
const aws_cdk_lib_1 = require("aws-cdk-lib");
const bedrock = require("aws-cdk-lib/aws-bedrock");
const iam = require("aws-cdk-lib/aws-iam");
const knowledge_base_2 = require("./knowledge-base");
const vector_knowledge_base_1 = require("./vector-knowledge-base");
const utils_1 = require("../../../common/helpers/utils");
const graph_1 = require("../../neptune/graph");
/******************************************************************************
 *                              ABSTRACT CLASS
 *****************************************************************************/
class GraphKnowledgeBaseBase extends vector_knowledge_base_1.VectorKnowledgeBaseBase {
    constructor() {
        super(...arguments);
        this.type = knowledge_base_2.KnowledgeBaseType.VECTOR;
    }
}
exports.GraphKnowledgeBaseBase = GraphKnowledgeBaseBase;
_a = JSII_RTTI_SYMBOL_1;
GraphKnowledgeBaseBase[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.GraphKnowledgeBaseBase", version: "0.1.309" };
/******************************************************************************
 *                        		  CONSTRUCT
 *****************************************************************************/
/**
 * Creates a new Amazon Bedrock Knowledge Base using a Neptune Analytics vector store, this is also known as GraphRAG.
 *
 * GraphRAG is a capability that combines graph modeling with generative AI to enhance retrieval-augmented generation (RAG).
 * It automatically identifies and leverages relationships between entities and structural elements within documents,
 * enabling more comprehensive and contextually relevant responses from foundation models.
 *
 * Key benefits:
 * - More relevant responses by leveraging relationships between entities and structural elements across documents
 * - Enhanced search capabilities that connect content through multiple logical steps
 * - Better cross-document reasoning for more precise and contextually accurate answers
 * - Reduced hallucinations through improved information connectivity
 *
 * Limitations:
 * - AWS PrivateLink VPC endpoint connectivity is not supported
 * - Graph build configuration options are not customizable
 * - Autoscaling is not supported for Neptune Analytics graphs
 * - Only supports Amazon S3 as data source
 * - Uses Claude 3 Haiku model for automatic graph building with contextual enrichment
 * - Each data source limited to 1000 files (can be increased to max 10000 files)
 *
 * @see https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-build-graphs.html
 */
class GraphKnowledgeBase extends GraphKnowledgeBaseBase {
    // ------------------------------------------------------
    // Import Methods
    // ------------------------------------------------------
    static fromKnowledgeBaseAttributes(scope, id, attrs) {
        const stack = aws_cdk_lib_1.Stack.of(scope);
        class Import extends GraphKnowledgeBaseBase {
            constructor() {
                super(...arguments);
                this.role = iam.Role.fromRoleArn(this, `kb-${attrs.knowledgeBaseId}-role`, attrs.executionRoleArn);
                this.description = attrs.description;
                this.instruction = attrs.instruction;
                this.knowledgeBaseId = attrs.knowledgeBaseId;
                this.vectorStoreType = vector_knowledge_base_1.VectorStoreType.NEPTUNE_ANALYTICS;
                this.graph = graph_1.NeptuneGraph.fromGraphId(scope, 'Graph', attrs.graphId);
                this.knowledgeBaseArn = stack.formatArn({
                    service: 'bedrock',
                    resource: 'knowledge-base',
                    resourceName: attrs.knowledgeBaseId,
                    arnFormat: aws_cdk_lib_1.ArnFormat.SLASH_RESOURCE_NAME,
                });
            }
        }
        return new Import(scope, id);
    }
    constructor(scope, id, props) {
        super(scope, id);
        this.vectorStoreType = vector_knowledge_base_1.VectorStoreType.NEPTUNE_ANALYTICS;
        // ------------------------------------------------------
        // Set properties or defaults
        // ------------------------------------------------------
        // Create a new graph if not specified.
        this.graph =
            props.graph ??
                new graph_1.NeptuneGraph(this, 'Graph', {
                    vectorSearchDimension: props.embeddingModel.vectorDimensions,
                });
        this.name =
            props.name ?? (0, utils_1.generatePhysicalNameV2)(this, 'graph-kb', { maxLength: 32, separator: '-' });
        this.instruction = props.instruction;
        this.description = props.description;
        this.fieldMapping = {
            metadataField: props.fieldMapping?.metadataField ?? 'AMAZON_BEDROCK_METADATA',
            textField: props.fieldMapping?.textField ?? 'AMAZON_BEDROCK_TEXT',
        };
        this.embeddingModel = props.embeddingModel;
        // ------------------------------------------------------
        // Role
        // ------------------------------------------------------
        // Use existing role if provided, otherwise create a new one
        this.role = props.existingRole ?? (0, knowledge_base_2.createKnowledgeBaseServiceRole)(this);
        // ------------------------------------------------------
        // L1 Instantiation
        // ------------------------------------------------------
        this._resource = new bedrock.CfnKnowledgeBase(this, 'MyCfnKnowledgeBase', {
            name: this.name,
            roleArn: this.role.roleArn,
            description: props.description,
            knowledgeBaseConfiguration: {
                type: knowledge_base_2.KnowledgeBaseType.VECTOR,
                vectorKnowledgeBaseConfiguration: {
                    embeddingModelArn: props.embeddingModel.modelArn,
                    // Used this approach as if property is specified on models that do not
                    // support configurable dimensions CloudFormation throws an error at runtime
                    embeddingModelConfiguration: {
                        bedrockEmbeddingModelConfiguration: props.embeddingModel.modelId ===
                            bedrock.FoundationModelIdentifier.AMAZON_TITAN_EMBED_TEXT_V2_0.modelId
                            ? {
                                dimensions: props.embeddingModel.vectorDimensions,
                            }
                            : undefined,
                    },
                },
            },
            storageConfiguration: {
                type: vector_knowledge_base_1.VectorStoreType.NEPTUNE_ANALYTICS,
                neptuneAnalyticsConfiguration: {
                    graphArn: this.graph.graphArn,
                    fieldMapping: this.fieldMapping,
                },
            },
        });
        // ------------------------------------------------------
        // Grant permissions
        // ------------------------------------------------------
        // Add permissions only if it is a newly created role
        if (!props.existingRole) {
            let grant = this.graph.grantQuery(this.role);
            // Allow KB to create embeddings when ingesting data
            grant = grant.combine(this.embeddingModel.grantInvoke(this.role));
            // Ensure the permissions are in place before KB creation
            grant.applyBefore(this._resource);
        }
        // ------------------------------------------------------
        // Attribute assignments
        // ------------------------------------------------------
        this.knowledgeBaseArn = this._resource.attrKnowledgeBaseArn;
        this.knowledgeBaseId = this._resource.attrKnowledgeBaseId;
    }
}
exports.GraphKnowledgeBase = GraphKnowledgeBase;
_b = JSII_RTTI_SYMBOL_1;
GraphKnowledgeBase[_b] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.GraphKnowledgeBase", version: "0.1.309" };
//# sourceMappingURL=data:application/json;base64,