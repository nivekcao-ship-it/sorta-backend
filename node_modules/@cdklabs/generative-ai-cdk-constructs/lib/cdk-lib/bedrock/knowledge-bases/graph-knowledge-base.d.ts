/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
export { KnowledgeBaseBase } from './knowledge-base';
import * as iam from 'aws-cdk-lib/aws-iam';
import { Construct } from 'constructs';
import { CommonKnowledgeBaseAttributes, CommonKnowledgeBaseProps, IKnowledgeBase, KnowledgeBaseType } from './knowledge-base';
import { VectorKnowledgeBaseBase, VectorStoreType } from './vector-knowledge-base';
import { INeptuneGraph } from '../../neptune/graph';
import { NeptuneGraphNotebook } from '../../neptune/notebook';
import { BedrockFoundationModel } from '../models';
/******************************************************************************
 *                             COMMON INTERFACES
 *****************************************************************************/
export interface IGraphKnowledgeBase extends IKnowledgeBase {
    /**
     * The Neptune Analytics vector store
     */
    readonly graph: INeptuneGraph;
}
export interface VectorFieldMapping {
    /**
     * The name of the field in which Amazon Bedrock stores metadata about the vector store.
     * @default "AMAZON_BEDROCK_METADATA"
     */
    readonly metadataField: string;
    /**
     * The name of the field in which Amazon Bedrock stores the raw text from your data.
     * The text is split according to the chunking strategy you choose.
     * @default "AMAZON_BEDROCK_TEXT"
     */
    readonly textField: string;
}
/******************************************************************************
 *                        PROPS FOR NEW CONSTRUCT
 *****************************************************************************/
/**
 * Properties for creating a Kendra Index Knowledge Base.
 */
export interface GraphKnowledgeBaseProps extends CommonKnowledgeBaseProps {
    /**
     * The embeddings model for the knowledge base.
     */
    readonly embeddingModel: BedrockFoundationModel;
    /**
     * The Neptune Analytics vector store
     * @default - A new Neptune Analytics vector store is created
     */
    readonly graph?: INeptuneGraph;
    /**
     * The vector field mapping configuration.
     * @default - { metadataField: "AMAZON_BEDROCK_METADATA", textField: "AMAZON_BEDROCK_TEXT" }
     */
    readonly fieldMapping?: VectorFieldMapping;
}
/******************************************************************************
 *                      ATTRS FOR IMPORTED CONSTRUCT
 *****************************************************************************/
/**
 * Properties for importing a knowledge base outside of this stack
 */
export interface GraphKnowledgeBaseAttributes extends CommonKnowledgeBaseAttributes {
    /**
     * The ID of the Neptune Analytics vector store
     */
    readonly graphId: string;
    /**
     * The vector field mapping configuration.
     * @default - { metadataField: "AMAZON_BEDROCK_METADATA", textField: "AMAZON_BEDROCK_TEXT" }
     */
    readonly fieldMapping: VectorFieldMapping;
}
/******************************************************************************
 *                              ABSTRACT CLASS
 *****************************************************************************/
export declare abstract class GraphKnowledgeBaseBase extends VectorKnowledgeBaseBase {
    abstract readonly knowledgeBaseArn: string;
    abstract readonly knowledgeBaseId: string;
    abstract readonly role: iam.IRole;
    abstract readonly graph: INeptuneGraph;
    abstract readonly description?: string;
    abstract readonly instruction?: string;
    readonly type: KnowledgeBaseType;
}
/******************************************************************************
 *                        		  CONSTRUCT
 *****************************************************************************/
/**
 * Creates a new Amazon Bedrock Knowledge Base using a Neptune Analytics vector store, this is also known as GraphRAG.
 *
 * GraphRAG is a capability that combines graph modeling with generative AI to enhance retrieval-augmented generation (RAG).
 * It automatically identifies and leverages relationships between entities and structural elements within documents,
 * enabling more comprehensive and contextually relevant responses from foundation models.
 *
 * Key benefits:
 * - More relevant responses by leveraging relationships between entities and structural elements across documents
 * - Enhanced search capabilities that connect content through multiple logical steps
 * - Better cross-document reasoning for more precise and contextually accurate answers
 * - Reduced hallucinations through improved information connectivity
 *
 * Limitations:
 * - AWS PrivateLink VPC endpoint connectivity is not supported
 * - Graph build configuration options are not customizable
 * - Autoscaling is not supported for Neptune Analytics graphs
 * - Only supports Amazon S3 as data source
 * - Uses Claude 3 Haiku model for automatic graph building with contextual enrichment
 * - Each data source limited to 1000 files (can be increased to max 10000 files)
 *
 * @see https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-build-graphs.html
 */
export declare class GraphKnowledgeBase extends GraphKnowledgeBaseBase {
    static fromKnowledgeBaseAttributes(scope: Construct, id: string, attrs: GraphKnowledgeBaseAttributes): IGraphKnowledgeBase;
    readonly knowledgeBaseArn: string;
    readonly knowledgeBaseId: string;
    readonly role: iam.IRole;
    readonly description?: string;
    readonly notebook?: NeptuneGraphNotebook;
    readonly instruction?: string;
    readonly graph: INeptuneGraph;
    readonly vectorStoreType = VectorStoreType.NEPTUNE_ANALYTICS;
    /**
     * The name of the knowledge base.
     */
    readonly name: string;
    /**
     * The embeddings model for the knowledge base.
     */
    readonly embeddingModel: BedrockFoundationModel;
    /**
     * The vector field mapping configuration.
     */
    readonly fieldMapping: VectorFieldMapping;
    private readonly _resource;
    constructor(scope: Construct, id: string, props: GraphKnowledgeBaseProps);
}
