"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.KendraKnowledgeBase = exports.KendraKnowledgeBaseBase = exports.KnowledgeBaseBase = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
var knowledge_base_1 = require("./knowledge-base");
Object.defineProperty(exports, "KnowledgeBaseBase", { enumerable: true, get: function () { return knowledge_base_1.KnowledgeBaseBase; } });
const aws_cdk_lib_1 = require("aws-cdk-lib");
const bedrock = require("aws-cdk-lib/aws-bedrock");
const iam = require("aws-cdk-lib/aws-iam");
const knowledge_base_2 = require("./knowledge-base");
const utils_1 = require("../../../common/helpers/utils");
/******************************************************************************
 *                              ABSTRACT CLASS
 *****************************************************************************/
class KendraKnowledgeBaseBase extends knowledge_base_2.KnowledgeBaseBase {
    constructor() {
        super(...arguments);
        this.type = knowledge_base_2.KnowledgeBaseType.KENDRA;
    }
}
exports.KendraKnowledgeBaseBase = KendraKnowledgeBaseBase;
_a = JSII_RTTI_SYMBOL_1;
KendraKnowledgeBaseBase[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.KendraKnowledgeBaseBase", version: "0.1.309" };
/******************************************************************************
 *                        		  CONSTRUCT
 *****************************************************************************/
class KendraKnowledgeBase extends KendraKnowledgeBaseBase {
    // ------------------------------------------------------
    // Import Methods
    // ------------------------------------------------------
    static fromKnowledgeBaseAttributes(scope, id, attrs) {
        const stack = aws_cdk_lib_1.Stack.of(scope);
        class Import extends KendraKnowledgeBaseBase {
            constructor() {
                super(...arguments);
                this.role = iam.Role.fromRoleArn(this, `kb-${attrs.knowledgeBaseId}-role`, attrs.executionRoleArn);
                this.description = attrs.description;
                this.instruction = attrs.instruction;
                this.knowledgeBaseId = attrs.knowledgeBaseId;
                this.kendraIndex = attrs.kendraIndex;
                this.knowledgeBaseArn = stack.formatArn({
                    service: 'bedrock',
                    resource: 'knowledge-base',
                    resourceName: attrs.knowledgeBaseId,
                    arnFormat: aws_cdk_lib_1.ArnFormat.SLASH_RESOURCE_NAME,
                });
            }
        }
        return new Import(scope, id);
    }
    constructor(scope, id, props) {
        super(scope, id);
        /**
         * The type of Knowledge Base
         */
        this.type = knowledge_base_2.KnowledgeBaseType.KENDRA;
        // ------------------------------------------------------
        // Set properties or defaults
        // ------------------------------------------------------
        this.kendraIndex = props.kendraIndex;
        this.name =
            props.name ?? (0, utils_1.generatePhysicalNameV2)(this, 'kendra-kb', { maxLength: 32, separator: '-' });
        this.instruction = props.instruction;
        this.description = props.description;
        // ------------------------------------------------------
        // Role
        // ------------------------------------------------------
        let policyAddition;
        // Use existing role if provided, otherwise create a new one
        this.role = props.existingRole ?? (0, knowledge_base_2.createKnowledgeBaseServiceRole)(this);
        if (!props.existingRole) {
            policyAddition = this.role.addToPrincipalPolicy(new iam.PolicyStatement({
                sid: 'AmazonBedrockKnowledgeBaseKendraIndexAccessStatement',
                actions: ['kendra:Retrieve', 'kendra:DescribeIndex'],
                resources: [this.kendraIndex.indexArn],
            }));
        }
        // ------------------------------------------------------
        // L1 Instantiation
        // ------------------------------------------------------
        this._resource = new bedrock.CfnKnowledgeBase(this, 'MyCfnKnowledgeBase', {
            name: this.name,
            roleArn: this.role.roleArn,
            description: props.description,
            knowledgeBaseConfiguration: {
                type: knowledge_base_2.KnowledgeBaseType.KENDRA,
                kendraKnowledgeBaseConfiguration: {
                    kendraIndexArn: props.kendraIndex.indexArn,
                },
            },
        });
        // Ensure policy statement is added before creating KnowledgeBase
        this._resource.node.addDependency(policyAddition?.policyDependable);
        this.knowledgeBaseArn = this._resource.attrKnowledgeBaseArn;
        this.knowledgeBaseId = this._resource.attrKnowledgeBaseId;
    }
}
exports.KendraKnowledgeBase = KendraKnowledgeBase;
_b = JSII_RTTI_SYMBOL_1;
KendraKnowledgeBase[_b] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.KendraKnowledgeBase", version: "0.1.309" };
//# sourceMappingURL=data:application/json;base64,