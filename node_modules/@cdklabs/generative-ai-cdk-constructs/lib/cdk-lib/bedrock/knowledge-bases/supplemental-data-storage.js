"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SupplementalDataStorageLocation = exports.SupplementalDataStorageLocationType = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
var SupplementalDataStorageLocationType;
(function (SupplementalDataStorageLocationType) {
    /**
       * Contains information about the Amazon S3 location for the extracted images.
       */
    SupplementalDataStorageLocationType["S3"] = "S3";
})(SupplementalDataStorageLocationType || (exports.SupplementalDataStorageLocationType = SupplementalDataStorageLocationType = {}));
/**
 * Represents a supplemental data storage location for images extracted from multimodal documents in your data source.
 */
class SupplementalDataStorageLocation {
    /**
       * Creates a new S3 supplemental data storage location
       * @param config The configuration for the storage location
       * @returns A new SupplementalDataStorageLocation instance
       */
    static s3(config) {
        return new SupplementalDataStorageLocation(SupplementalDataStorageLocationType.S3, config);
    }
    /**
       * Creates a new SupplementalDataStorageLocation
       * @param type The type of the storage location
       * @param locationConfig The configuration for the storage location
       */
    constructor(type, locationConfig) {
        this.type = type;
        this.locationConfig = locationConfig;
    }
    /**
       * Renders as Cfn Property
       * @internal This is an internal core function and should not be called directly.
       */
    __render() {
        if (this.type === SupplementalDataStorageLocationType.S3) {
            const s3Config = this.locationConfig;
            return {
                supplementalDataStorageLocationType: this.type,
                s3Location: {
                    uri: s3Config.uri,
                },
            };
        }
        // This should never happen as we only support S3 for now,
        // but TypeScript requires a return statement for all code paths
        throw new Error(`Unsupported storage location type: ${this.type}`);
    }
}
exports.SupplementalDataStorageLocation = SupplementalDataStorageLocation;
_a = JSII_RTTI_SYMBOL_1;
SupplementalDataStorageLocation[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.SupplementalDataStorageLocation", version: "0.1.309" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VwcGxlbWVudGFsLWRhdGEtc3RvcmFnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jZGstbGliL2JlZHJvY2sva25vd2xlZGdlLWJhc2VzL3N1cHBsZW1lbnRhbC1kYXRhLXN0b3JhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFlQSxJQUFZLG1DQUtYO0FBTEQsV0FBWSxtQ0FBbUM7SUFDN0M7O1NBRUs7SUFDTCxnREFBUyxDQUFBO0FBQ1gsQ0FBQyxFQUxXLG1DQUFtQyxtREFBbkMsbUNBQW1DLFFBSzlDO0FBZUQ7O0dBRUc7QUFDSCxNQUFhLCtCQUErQjtJQUMxQzs7OztTQUlLO0lBQ0UsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUF1QztRQUN0RCxPQUFPLElBQUksK0JBQStCLENBQ3hDLG1DQUFtQyxDQUFDLEVBQUUsRUFDdEMsTUFBTSxDQUNQLENBQUM7SUFDSixDQUFDO0lBWUQ7Ozs7U0FJSztJQUNMLFlBQ0UsSUFBeUMsRUFDekMsY0FBcUQ7UUFFckQsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7SUFDdkMsQ0FBQztJQUVEOzs7U0FHSztJQUNFLFFBQVE7UUFDYixJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssbUNBQW1DLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDekQsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLGNBQWlELENBQUM7WUFDeEUsT0FBTztnQkFDTCxtQ0FBbUMsRUFBRSxJQUFJLENBQUMsSUFBSTtnQkFDOUMsVUFBVSxFQUFFO29CQUNWLEdBQUcsRUFBRSxRQUFRLENBQUMsR0FBRztpQkFDbEI7YUFDRixDQUFDO1FBQ0osQ0FBQztRQUVELDBEQUEwRDtRQUMxRCxnRUFBZ0U7UUFDaEUsTUFBTSxJQUFJLEtBQUssQ0FBQyxzQ0FBc0MsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7SUFDckUsQ0FBQzs7QUF0REgsMEVBdURDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiAgQ29weXJpZ2h0IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIikuIFlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqICB3aXRoIHRoZSBMaWNlbnNlLiBBIGNvcHkgb2YgdGhlIExpY2Vuc2UgaXMgbG9jYXRlZCBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogIG9yIGluIHRoZSAnbGljZW5zZScgZmlsZSBhY2NvbXBhbnlpbmcgdGhpcyBmaWxlLiBUaGlzIGZpbGUgaXMgZGlzdHJpYnV0ZWQgb24gYW4gJ0FTIElTJyBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTXG4gKiAgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnNcbiAqICBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ2ZuS25vd2xlZGdlQmFzZSB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1iZWRyb2NrJztcblxuZXhwb3J0IGVudW0gU3VwcGxlbWVudGFsRGF0YVN0b3JhZ2VMb2NhdGlvblR5cGUge1xuICAvKipcbiAgICAgKiBDb250YWlucyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgQW1hem9uIFMzIGxvY2F0aW9uIGZvciB0aGUgZXh0cmFjdGVkIGltYWdlcy5cbiAgICAgKi9cbiAgUzMgPSAnUzMnLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN1cHBsZW1lbnRhbERhdGFTdG9yYWdlUzNDb25maWcge1xuICAvKipcbiAgICAgKiBUaGUgUzMgVVJJIGZvciB0aGUgc3RvcmFnZSBsb2NhdGlvblxuICAgICAqL1xuICByZWFkb25seSB1cmk6IHN0cmluZztcbn1cblxuLyoqXG4gKiBVbmlvbiB0eXBlIGZvciBhbGwgcG9zc2libGUgbG9jYXRpb24gY29uZmlndXJhdGlvbnNcbiAqL1xuZXhwb3J0IHR5cGUgU3VwcGxlbWVudGFsRGF0YVN0b3JhZ2VMb2NhdGlvbkNvbmZpZyA9XG4gICAgfCBTdXBwbGVtZW50YWxEYXRhU3RvcmFnZVMzQ29uZmlnO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBzdXBwbGVtZW50YWwgZGF0YSBzdG9yYWdlIGxvY2F0aW9uIGZvciBpbWFnZXMgZXh0cmFjdGVkIGZyb20gbXVsdGltb2RhbCBkb2N1bWVudHMgaW4geW91ciBkYXRhIHNvdXJjZS5cbiAqL1xuZXhwb3J0IGNsYXNzIFN1cHBsZW1lbnRhbERhdGFTdG9yYWdlTG9jYXRpb24ge1xuICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IFMzIHN1cHBsZW1lbnRhbCBkYXRhIHN0b3JhZ2UgbG9jYXRpb25cbiAgICAgKiBAcGFyYW0gY29uZmlnIFRoZSBjb25maWd1cmF0aW9uIGZvciB0aGUgc3RvcmFnZSBsb2NhdGlvblxuICAgICAqIEByZXR1cm5zIEEgbmV3IFN1cHBsZW1lbnRhbERhdGFTdG9yYWdlTG9jYXRpb24gaW5zdGFuY2VcbiAgICAgKi9cbiAgcHVibGljIHN0YXRpYyBzMyhjb25maWc6IFN1cHBsZW1lbnRhbERhdGFTdG9yYWdlUzNDb25maWcpOiBTdXBwbGVtZW50YWxEYXRhU3RvcmFnZUxvY2F0aW9uIHtcbiAgICByZXR1cm4gbmV3IFN1cHBsZW1lbnRhbERhdGFTdG9yYWdlTG9jYXRpb24oXG4gICAgICBTdXBwbGVtZW50YWxEYXRhU3RvcmFnZUxvY2F0aW9uVHlwZS5TMyxcbiAgICAgIGNvbmZpZyxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAgICogVGhlIHR5cGUgb2YgdGhlIHN0b3JhZ2UgbG9jYXRpb25cbiAgICAgKi9cbiAgcHVibGljIHJlYWRvbmx5IHR5cGU6IFN1cHBsZW1lbnRhbERhdGFTdG9yYWdlTG9jYXRpb25UeXBlO1xuXG4gIC8qKlxuICAgICAqIFRoZSBjb25maWd1cmF0aW9uIGZvciB0aGUgc3RvcmFnZSBsb2NhdGlvblxuICAgICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgbG9jYXRpb25Db25maWc6IFN1cHBsZW1lbnRhbERhdGFTdG9yYWdlTG9jYXRpb25Db25maWc7XG5cbiAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBTdXBwbGVtZW50YWxEYXRhU3RvcmFnZUxvY2F0aW9uXG4gICAgICogQHBhcmFtIHR5cGUgVGhlIHR5cGUgb2YgdGhlIHN0b3JhZ2UgbG9jYXRpb25cbiAgICAgKiBAcGFyYW0gbG9jYXRpb25Db25maWcgVGhlIGNvbmZpZ3VyYXRpb24gZm9yIHRoZSBzdG9yYWdlIGxvY2F0aW9uXG4gICAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHR5cGU6IFN1cHBsZW1lbnRhbERhdGFTdG9yYWdlTG9jYXRpb25UeXBlLFxuICAgIGxvY2F0aW9uQ29uZmlnOiBTdXBwbGVtZW50YWxEYXRhU3RvcmFnZUxvY2F0aW9uQ29uZmlnLFxuICApIHtcbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgIHRoaXMubG9jYXRpb25Db25maWcgPSBsb2NhdGlvbkNvbmZpZztcbiAgfVxuXG4gIC8qKlxuICAgICAqIFJlbmRlcnMgYXMgQ2ZuIFByb3BlcnR5XG4gICAgICogQGludGVybmFsIFRoaXMgaXMgYW4gaW50ZXJuYWwgY29yZSBmdW5jdGlvbiBhbmQgc2hvdWxkIG5vdCBiZSBjYWxsZWQgZGlyZWN0bHkuXG4gICAgICovXG4gIHB1YmxpYyBfX3JlbmRlcigpOiBDZm5Lbm93bGVkZ2VCYXNlLlN1cHBsZW1lbnRhbERhdGFTdG9yYWdlTG9jYXRpb25Qcm9wZXJ0eSB7XG4gICAgaWYgKHRoaXMudHlwZSA9PT0gU3VwcGxlbWVudGFsRGF0YVN0b3JhZ2VMb2NhdGlvblR5cGUuUzMpIHtcbiAgICAgIGNvbnN0IHMzQ29uZmlnID0gdGhpcy5sb2NhdGlvbkNvbmZpZyBhcyBTdXBwbGVtZW50YWxEYXRhU3RvcmFnZVMzQ29uZmlnO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VwcGxlbWVudGFsRGF0YVN0b3JhZ2VMb2NhdGlvblR5cGU6IHRoaXMudHlwZSxcbiAgICAgICAgczNMb2NhdGlvbjoge1xuICAgICAgICAgIHVyaTogczNDb25maWcudXJpLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBUaGlzIHNob3VsZCBuZXZlciBoYXBwZW4gYXMgd2Ugb25seSBzdXBwb3J0IFMzIGZvciBub3csXG4gICAgLy8gYnV0IFR5cGVTY3JpcHQgcmVxdWlyZXMgYSByZXR1cm4gc3RhdGVtZW50IGZvciBhbGwgY29kZSBwYXRoc1xuICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgc3RvcmFnZSBsb2NhdGlvbiB0eXBlOiAke3RoaXMudHlwZX1gKTtcbiAgfVxufSJdfQ==