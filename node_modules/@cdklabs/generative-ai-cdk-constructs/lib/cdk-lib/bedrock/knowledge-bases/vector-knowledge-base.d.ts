/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
import { aws_bedrock as bedrock } from 'aws-cdk-lib';
import * as iam from 'aws-cdk-lib/aws-iam';
import { Construct } from 'constructs';
import { CommonKnowledgeBaseAttributes, CommonKnowledgeBaseProps, IKnowledgeBase, KnowledgeBaseBase, KnowledgeBaseType } from './knowledge-base';
import { SupplementalDataStorageLocation } from './supplemental-data-storage';
import { ExistingAmazonAuroraVectorStore, AmazonAuroraVectorStore } from '../../amazonaurora';
import { MongoDBAtlasVectorStore } from '../../mongodb-atlas';
import { VectorIndex } from '../../opensearch-vectorindex';
import { OpenSearchManagedClusterVectorStore } from '../../opensearchmanagedcluster';
import { VectorCollection } from '../../opensearchserverless';
import { PineconeVectorStore } from '../../pinecone';
import { Agent } from '../agents/agent';
import { ConfluenceDataSource, ConfluenceDataSourceAssociationProps } from '../data-sources/confluence-data-source';
import { CustomDataSource, CustomDataSourceAssociationProps } from '../data-sources/custom-data-source';
import { S3DataSource, S3DataSourceAssociationProps } from '../data-sources/s3-data-source';
import { SalesforceDataSource, SalesforceDataSourceAssociationProps } from '../data-sources/salesforce-data-source';
import { SharePointDataSource, SharePointDataSourceAssociationProps } from '../data-sources/sharepoint-data-source';
import { WebCrawlerDataSource, WebCrawlerDataSourceAssociationProps } from '../data-sources/web-crawler-data-source';
import { BedrockFoundationModel, VectorType } from '../models';
/******************************************************************************
 *                                  ENUMS
 *****************************************************************************/
/**
 * Knowledge base can be backed by different vector databases.
 * This enum represents the different vector databases that can be used.
 *
 * `OPENSEARCH_SERVERLESS` is the default vector database.
 * `PINECONE` is the vector database for Pinecone.
 * `AMAZON_AURORA` is the vector database for Amazon Aurora PostgreSQL.
 */
export declare enum VectorStoreType {
    /**
     * `OPENSEARCH_SERVERLESS` is the vector store for OpenSearch Serverless.
     */
    OPENSEARCH_SERVERLESS = "OPENSEARCH_SERVERLESS",
    /**
     * `OPENSEARCH_MANAGED_CLUSTER` is the vector store for OpenSearch Managed Cluster.
     */
    OPENSEARCH_MANAGED_CLUSTER = "OPENSEARCH_MANAGED_CLUSTER",
    /**
     * `PINECONE` is the vector store for Pinecone.
     */
    PINECONE = "PINECONE",
    /**
     * `RDS` is the vector store for Amazon Aurora.
     */
    AMAZON_AURORA = "RDS",
    /**
     * `MONGO_DB_ATLAS` is the vector store for MongoDB Atlas.
     */
    MONGO_DB_ATLAS = "MONGO_DB_ATLAS",
    /**
     * `NEPTUNE_ANALYTICS` is the vector store for Amazon Neptune Analytics.
     */
    NEPTUNE_ANALYTICS = "NEPTUNE_ANALYTICS"
}
/**
 * Represents a Knowledge Base, either created with CDK or imported.
 */
export interface IVectorKnowledgeBase extends IKnowledgeBase {
    /**
     * The storage type for the Vector Embeddings.
     */
    readonly vectorStoreType: VectorStoreType;
    /**
     * Add an S3 data source to the knowledge base.
     */
    addS3DataSource(props: S3DataSourceAssociationProps): S3DataSource;
    /**
     * Add a web crawler data source to the knowledge base.
     */
    addWebCrawlerDataSource(props: WebCrawlerDataSourceAssociationProps): WebCrawlerDataSource;
    /**
     * Add a SharePoint data source to the knowledge base.
     */
    addSharePointDataSource(props: SharePointDataSourceAssociationProps): SharePointDataSource;
    /**
     * Add a Confluence data source to the knowledge base.
     */
    addConfluenceDataSource(props: ConfluenceDataSourceAssociationProps): ConfluenceDataSource;
    /**
     * Add a Salesforce data source to the knowledge base.
     */
    addSalesforceDataSource(props: SalesforceDataSourceAssociationProps): SalesforceDataSource;
    /**
     * Add a Custom data source to the knowledge base.
     */
    addCustomDataSource(props: CustomDataSourceAssociationProps): CustomDataSource;
    /**
     * Grant the given identity permissions to retrieve content from the knowledge base.
     */
    grantRetrieve(grantee: iam.IGrantable): iam.Grant;
    /**
     * Grant the given identity permissions to retrieve content from the knowledge base.
     */
    grantRetrieveAndGenerate(grantee: iam.IGrantable): iam.Grant;
}
/******************************************************************************
 *                              ABSTRACT CLASS
 *****************************************************************************/
/**
 * Abstract base class for Vector Knowledge Base.
 * Contains methods valid for KBs either created with CDK or imported.
 */
export declare abstract class VectorKnowledgeBaseBase extends KnowledgeBaseBase implements IVectorKnowledgeBase {
    abstract readonly knowledgeBaseArn: string;
    abstract readonly knowledgeBaseId: string;
    abstract readonly role: iam.IRole;
    abstract readonly vectorStoreType: VectorStoreType;
    abstract readonly description?: string;
    abstract readonly instruction?: string;
    readonly type: KnowledgeBaseType;
    constructor(scope: Construct, id: string);
    /**
     * Adds an S3 data source to the knowledge base.
     */
    addS3DataSource(props: S3DataSourceAssociationProps): S3DataSource;
    addWebCrawlerDataSource(props: WebCrawlerDataSourceAssociationProps): WebCrawlerDataSource;
    addSharePointDataSource(props: SharePointDataSourceAssociationProps): SharePointDataSource;
    addConfluenceDataSource(props: ConfluenceDataSourceAssociationProps): ConfluenceDataSource;
    addSalesforceDataSource(props: SalesforceDataSourceAssociationProps): SalesforceDataSource;
    addCustomDataSource(props: CustomDataSourceAssociationProps): CustomDataSource;
}
/******************************************************************************
 *                        PROPS FOR NEW CONSTRUCT
 *****************************************************************************/
/**
 * Properties for a knowledge base
 */
export interface VectorKnowledgeBaseProps extends CommonKnowledgeBaseProps {
    /**
     * The embeddings model for the knowledge base
     */
    readonly embeddingsModel: BedrockFoundationModel;
    /**
     * The supplemental data storage locations for the knowledge base
     */
    readonly supplementalDataStorageLocations?: SupplementalDataStorageLocation[];
    /**
     * The vector type to store vector embeddings.
     *
     * @default - VectorType.FLOATING_POINT
     */
    readonly vectorType?: VectorType;
    /**
     * The name of the vector index.
     * If vectorStore is not of type `VectorCollection`,
     * do not include this property as it will throw error.
     *
     * @default - 'bedrock-knowledge-base-default-index'
     */
    readonly indexName?: string;
    /**
     * The name of the field in the vector index.
     * If vectorStore is not of type `VectorCollection`,
     * do not include this property as it will throw error.
     *
     * @default - 'bedrock-knowledge-base-default-vector'
     */
    readonly vectorField?: string;
    /**
     * The vector store for the knowledge base. Must be either of
     * type `VectorCollection`, `RedisEnterpriseVectorStore`,
     * `PineconeVectorStore`, `AmazonAuroraVectorStore`, or `MongoDBAtlasVectorStore`.
     *
     * @default - A new OpenSearch Serverless vector collection is created.
     */
    readonly vectorStore?: VectorCollection | PineconeVectorStore | AmazonAuroraVectorStore | ExistingAmazonAuroraVectorStore | MongoDBAtlasVectorStore | OpenSearchManagedClusterVectorStore;
    /**
     * The vector index for the OpenSearch Serverless backed knowledge base.
     * If vectorStore is not of type `VectorCollection`, do not include
     * this property as it will throw error.
     *
     * @default - A new vector index is created on the Vector Collection
     * if vector store is of `VectorCollection` type.
     */
    readonly vectorIndex?: VectorIndex;
}
/******************************************************************************
 *                      ATTRS FOR IMPORTED CONSTRUCT
 *****************************************************************************/
/**
 * Properties for importing a knowledge base outside of this stack
 */
export interface VectorKnowledgeBaseAttributes extends CommonKnowledgeBaseAttributes {
    /**
     * The vector store type for the knowledge base.
     */
    readonly vectorStoreType: VectorStoreType;
}
/**
 * Deploys a Bedrock Knowledge Base and configures a backend by OpenSearch Serverless,
 * Pinecone, Redis Enterprise Cloud or Amazon Aurora PostgreSQL.
 *
 */
export declare class VectorKnowledgeBase extends VectorKnowledgeBaseBase {
    static fromKnowledgeBaseAttributes(scope: Construct, id: string, attrs: VectorKnowledgeBaseAttributes): IVectorKnowledgeBase;
    /**
     * The name of the knowledge base.
     */
    readonly name: string;
    /**
     * Instance of knowledge base.
     */
    readonly knowledgeBaseInstance: bedrock.CfnKnowledgeBase;
    /**
     * The role the Knowledge Base uses to access the vector store and data source.
     */
    readonly role: iam.IRole;
    /**
     * The vector store for the knowledge base.
     */
    readonly vectorStore: VectorCollection | PineconeVectorStore | AmazonAuroraVectorStore | ExistingAmazonAuroraVectorStore | MongoDBAtlasVectorStore | OpenSearchManagedClusterVectorStore;
    /**
     * A description of the knowledge base.
     */
    readonly description?: string;
    /**
     * Instructions for agents based on the design and type of information of the
     * Knowledge Base. This will impact how Agents interact with the Knowledge Base.
     */
    readonly instruction?: string;
    /**
     * The ARN of the knowledge base.
     */
    readonly knowledgeBaseArn: string;
    /**
     * The ID of the knowledge base.
     */
    readonly knowledgeBaseId: string;
    /**
     * The type of the knowledge base.
     */
    readonly vectorStoreType: VectorStoreType;
    /**
     * The OpenSearch vector index for the knowledge base.
     * @private
     */
    private vectorIndex?;
    constructor(scope: Construct, id: string, props: VectorKnowledgeBaseProps);
    /**
     * Handle VectorCollection type of VectorStore.
     *
     * @param props - The properties of the KnowledgeBase.
     * @returns The instance of VectorCollection, VectorStoreType.
     * @internal This is an internal core function and should not be called directly.
     */
    private handleOpenSearchCollection;
    /**
     * Handle PineconeVectorStore type of VectorStore.
     *
     * @param props - The properties of the KnowledgeBase.
     * @returns The instance of PineconeVectorStore, VectorStoreType.
     * @internal This is an internal core function and should not be called directly.
     */
    private handlePineconeVectorStore;
    /**
     * Handle AmazonAuroraVectorStore type of VectorStore.
     *
     * @param props - The properties of the KnowledgeBase.
     * @returns The instance of AmazonAuroraVectorStore, VectorStoreType.
     * @internal This is an internal core function and should not be called directly.
     */
    private handleAmazonAuroraVectorStore;
    /**
     * Handle OpenSearchManagedClusterVectorStore type of VectorStore.
     *
     * @param props - The properties of the KnowledgeBase.
     * @returns The instance of OpenSearchManagedClusterVectorStore, VectorStoreType.
     * @internal This is an internal core function and should not be called directly.
     */
    private handleOpenSearchManagedClusterVectorStore;
    /**
     * Handle MongoDBAtlasVectorStore type of VectorStore.
     *
     * @param props - The properties of the KnowledgeBase.
     * @returns The instance of MongoDBAtlasVectorStore, VectorStoreType.
     * @internal This is an internal core function and should not be called directly.
     */
    private handleMongoDBAtlasVectorStore;
    /**
     * Handle the default VectorStore type.
     *
     * @returns The instance of VectorCollection, VectorStoreType.
     * @internal This is an internal core function and should not be called directly.
     */
    private handleOpenSearchDefaultVectorCollection;
    /**
     * Associate knowledge base with an agent
     */
    associateToAgent(agent: Agent): void;
}
