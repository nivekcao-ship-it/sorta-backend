"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.VectorKnowledgeBase = exports.VectorKnowledgeBaseBase = exports.VectorStoreType = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const aws_cdk_lib_1 = require("aws-cdk-lib");
const iam = require("aws-cdk-lib/aws-iam");
const nag_suppressions_1 = require("cdk-nag/lib/nag-suppressions");
const knowledge_base_1 = require("./knowledge-base");
const utils_1 = require("../../../common/helpers/utils");
const amazonaurora_1 = require("../../amazonaurora");
const mongodb_atlas_1 = require("../../mongodb-atlas");
const opensearch_vectorindex_1 = require("../../opensearch-vectorindex");
const opensearchmanagedcluster_1 = require("../../opensearchmanagedcluster");
const opensearchserverless_1 = require("../../opensearchserverless");
const pinecone_1 = require("../../pinecone");
const confluence_data_source_1 = require("../data-sources/confluence-data-source");
const context_enrichment_1 = require("../data-sources/context-enrichment");
const custom_data_source_1 = require("../data-sources/custom-data-source");
const s3_data_source_1 = require("../data-sources/s3-data-source");
const salesforce_data_source_1 = require("../data-sources/salesforce-data-source");
const sharepoint_data_source_1 = require("../data-sources/sharepoint-data-source");
const web_crawler_data_source_1 = require("../data-sources/web-crawler-data-source");
const models_1 = require("../models");
/******************************************************************************
 *                                  ENUMS
 *****************************************************************************/
/**
 * Knowledge base can be backed by different vector databases.
 * This enum represents the different vector databases that can be used.
 *
 * `OPENSEARCH_SERVERLESS` is the default vector database.
 * `PINECONE` is the vector database for Pinecone.
 * `AMAZON_AURORA` is the vector database for Amazon Aurora PostgreSQL.
 */
var VectorStoreType;
(function (VectorStoreType) {
    /**
     * `OPENSEARCH_SERVERLESS` is the vector store for OpenSearch Serverless.
     */
    VectorStoreType["OPENSEARCH_SERVERLESS"] = "OPENSEARCH_SERVERLESS";
    /**
     * `OPENSEARCH_MANAGED_CLUSTER` is the vector store for OpenSearch Managed Cluster.
     */
    VectorStoreType["OPENSEARCH_MANAGED_CLUSTER"] = "OPENSEARCH_MANAGED_CLUSTER";
    /**
     * `PINECONE` is the vector store for Pinecone.
     */
    VectorStoreType["PINECONE"] = "PINECONE";
    /**
     * `RDS` is the vector store for Amazon Aurora.
     */
    VectorStoreType["AMAZON_AURORA"] = "RDS";
    /**
     * `MONGO_DB_ATLAS` is the vector store for MongoDB Atlas.
     */
    VectorStoreType["MONGO_DB_ATLAS"] = "MONGO_DB_ATLAS";
    /**
     * `NEPTUNE_ANALYTICS` is the vector store for Amazon Neptune Analytics.
     */
    VectorStoreType["NEPTUNE_ANALYTICS"] = "NEPTUNE_ANALYTICS";
})(VectorStoreType || (exports.VectorStoreType = VectorStoreType = {}));
/******************************************************************************
 *                              ABSTRACT CLASS
 *****************************************************************************/
/**
 * Abstract base class for Vector Knowledge Base.
 * Contains methods valid for KBs either created with CDK or imported.
 */
class VectorKnowledgeBaseBase extends knowledge_base_1.KnowledgeBaseBase {
    constructor(scope, id) {
        super(scope, id);
        this.type = knowledge_base_1.KnowledgeBaseType.VECTOR;
    }
    // ------------------------------------------------------
    // Helper methods to add Data Sources
    // ------------------------------------------------------
    /**
     * Adds an S3 data source to the knowledge base.
     */
    addS3DataSource(props) {
        // Validate context enrichment is only used with Neptune Analytics
        const isNeptuneKB = this.vectorStoreType === VectorStoreType.NEPTUNE_ANALYTICS;
        if (props.contextEnrichment && !isNeptuneKB) {
            throw new Error('Context enrichment is only supported for Neptune/GraphRAG KnowledgeBases');
        }
        // Set context enrichment - use provided value or default for Neptune
        let contextEnrichment = props.contextEnrichment;
        if (isNeptuneKB) {
            contextEnrichment =
                props.contextEnrichment ??
                    context_enrichment_1.ContextEnrichment.foundationModel({
                        enrichmentModel: models_1.BedrockFoundationModel.ANTHROPIC_CLAUDE_HAIKU_V1_0,
                    });
        }
        // Create and return the S3 data source
        return new s3_data_source_1.S3DataSource(this, `s3-${props.bucket.node.addr}`, {
            knowledgeBase: this,
            ...props,
            contextEnrichment: contextEnrichment,
        });
    }
    addWebCrawlerDataSource(props) {
        const url = new URL(props.sourceUrls[0]);
        return new web_crawler_data_source_1.WebCrawlerDataSource(this, `web-${url.hostname.replace('.', '-')}`, {
            knowledgeBase: this,
            ...props,
        });
    }
    addSharePointDataSource(props) {
        const url = new URL(props.siteUrls[0]);
        return new sharepoint_data_source_1.SharePointDataSource(this, `sp-${url.hostname.replace('.', '-')}`, {
            knowledgeBase: this,
            ...props,
        });
    }
    addConfluenceDataSource(props) {
        const url = new URL(props.confluenceUrl);
        return new confluence_data_source_1.ConfluenceDataSource(this, `cf-${url.hostname.replace('.', '-')}`, {
            knowledgeBase: this,
            ...props,
        });
    }
    addSalesforceDataSource(props) {
        const url = new URL(props.endpoint);
        return new salesforce_data_source_1.SalesforceDataSource(this, `sf-${url.hostname.replace('.', '-')}`, {
            knowledgeBase: this,
            ...props,
        });
    }
    addCustomDataSource(props) {
        return new custom_data_source_1.CustomDataSource(this, `custom-${props.dataSourceName}`, {
            knowledgeBase: this,
            ...props,
        });
    }
}
exports.VectorKnowledgeBaseBase = VectorKnowledgeBaseBase;
_a = JSII_RTTI_SYMBOL_1;
VectorKnowledgeBaseBase[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.VectorKnowledgeBaseBase", version: "0.1.309" };
/**
 * Deploys a Bedrock Knowledge Base and configures a backend by OpenSearch Serverless,
 * Pinecone, Redis Enterprise Cloud or Amazon Aurora PostgreSQL.
 *
 */
class VectorKnowledgeBase extends VectorKnowledgeBaseBase {
    // ------------------------------------------------------
    // Import Methods
    // ------------------------------------------------------
    static fromKnowledgeBaseAttributes(scope, id, attrs) {
        const stack = aws_cdk_lib_1.Stack.of(scope);
        class Import extends VectorKnowledgeBaseBase {
            constructor() {
                super(...arguments);
                this.role = iam.Role.fromRoleArn(this, `kb-${attrs.knowledgeBaseId}-role`, attrs.executionRoleArn);
                this.description = attrs.description;
                this.instruction = attrs.instruction;
                this.knowledgeBaseId = attrs.knowledgeBaseId;
                this.vectorStoreType = attrs.vectorStoreType;
                this.knowledgeBaseArn = stack.formatArn({
                    service: 'bedrock',
                    resource: 'knowledge-base',
                    resourceName: attrs.knowledgeBaseId,
                    arnFormat: aws_cdk_lib_1.ArnFormat.SLASH_RESOURCE_NAME,
                });
            }
        }
        return new Import(scope, id);
    }
    constructor(scope, id, props) {
        super(scope, id);
        // ------------------------------------------------------
        // Set properties or defaults
        // ------------------------------------------------------
        const embeddingsModel = props.embeddingsModel;
        const vectorType = props.vectorType ?? models_1.VectorType.FLOATING_POINT;
        const indexName = props.indexName ?? 'bedrock-knowledge-base-default-index';
        const vectorField = props.vectorField ?? 'bedrock-knowledge-base-default-vector';
        const textField = 'AMAZON_BEDROCK_TEXT_CHUNK';
        const metadataField = 'AMAZON_BEDROCK_METADATA';
        this.description = props.description ?? 'CDK deployed Knowledge base'; // even though this prop is optional, if no value is provided it will fail to deploy
        //this.knowledgeBaseState = props.knowledgeBaseState ?? 'ENABLED';
        this.instruction = props.instruction;
        this.name = props.name ?? (0, utils_1.generatePhysicalNameV2)(this, 'KB', { maxLength: 32 });
        // ------------------------------------------------------
        // Validations
        // ------------------------------------------------------
        validateModel(embeddingsModel, vectorType);
        validateVectorIndex(props.vectorStore, props.vectorIndex, props.vectorField, props.indexName);
        if (props.vectorIndex) {
            validateIndexParameters(props.vectorIndex, indexName, vectorField);
        }
        // ------------------------------------------------------
        // Role
        // ------------------------------------------------------
        // Use existing role if provided, otherwise create a new one
        this.role = props.existingRole ?? (0, knowledge_base_1.createKnowledgeBaseServiceRole)(this);
        if (!props.existingRole) {
            embeddingsModel.grantInvoke(this.role);
            // Add CDK Nag suppression for bedrock:InvokeModel* wildcard permission
            nag_suppressions_1.NagSuppressions.addResourceSuppressions(this.role, [
                {
                    id: 'AwsSolutions-IAM5',
                    reason: 'Bedrock Knowledge Base requires wildcard permissions to invoke embedding models',
                },
            ], true);
        }
        // ------------------------------------------------------
        // Vector Store
        // ------------------------------------------------------
        /**
         * Create the vector store if the vector store was provided by the user.
         * Otherwise check againts all possible vector datastores.
         * If none was provided create default OpenSearch Serverless Collection.
         */
        if (props.vectorStore instanceof opensearchserverless_1.VectorCollection) {
            this.vectorStoreType = VectorStoreType.OPENSEARCH_SERVERLESS;
            ({ vectorStore: this.vectorStore, vectorStoreType: this.vectorStoreType } =
                this.handleOpenSearchCollection(props));
        }
        else if (props.vectorStore instanceof pinecone_1.PineconeVectorStore) {
            this.vectorStoreType = VectorStoreType.PINECONE;
            ({ vectorStore: this.vectorStore, vectorStoreType: this.vectorStoreType } =
                this.handlePineconeVectorStore(props));
        }
        else if (props.vectorStore instanceof amazonaurora_1.AmazonAuroraVectorStore ||
            props.vectorStore instanceof amazonaurora_1.ExistingAmazonAuroraVectorStore) {
            this.vectorStoreType = VectorStoreType.AMAZON_AURORA;
            ({ vectorStore: this.vectorStore, vectorStoreType: this.vectorStoreType } =
                this.handleAmazonAuroraVectorStore(props));
        }
        else if (props.vectorStore instanceof mongodb_atlas_1.MongoDBAtlasVectorStore) {
            this.vectorStoreType = VectorStoreType.MONGO_DB_ATLAS;
            ({ vectorStore: this.vectorStore, vectorStoreType: this.vectorStoreType } =
                this.handleMongoDBAtlasVectorStore(props));
        }
        else if (props.vectorStore instanceof opensearchmanagedcluster_1.OpenSearchManagedClusterVectorStore) {
            this.vectorStoreType = VectorStoreType.OPENSEARCH_MANAGED_CLUSTER;
            ({ vectorStore: this.vectorStore, vectorStoreType: this.vectorStoreType } =
                this.handleOpenSearchManagedClusterVectorStore(props));
        }
        else {
            this.vectorStoreType = VectorStoreType.OPENSEARCH_SERVERLESS;
            ({ vectorStore: this.vectorStore, vectorStoreType: this.vectorStoreType } =
                this.handleOpenSearchDefaultVectorCollection());
        }
        // perform this validation after the vector store is handled since if the user
        // doesn't provide one, the method above will create it
        validateVectorType(this.vectorStore, vectorType);
        /**
         * We need to add `secretsmanager:GetSecretValue` to the role
         * of the knowledge base if we use vector stores
         * other than OpenSearch Serverless.
         */
        if (!(this.vectorStore instanceof opensearchserverless_1.VectorCollection) && !(this.vectorStore instanceof opensearchmanagedcluster_1.OpenSearchManagedClusterVectorStore)) {
            this.role.addToPrincipalPolicy(new iam.PolicyStatement({
                actions: ['secretsmanager:GetSecretValue'],
                resources: [this.vectorStore.credentialsSecretArn],
            }));
        }
        /**
         * We need to add `rds-data:ExecuteStatement`,
         * `rds-data:BatchExecuteStatement` and
         * `rds:DescribeDBClusters` to the role
         * of the knowledge base if we use Amazon Aurora as
         * a data source.
         */
        if (this.vectorStore instanceof amazonaurora_1.AmazonAuroraVectorStore ||
            this.vectorStore instanceof amazonaurora_1.ExistingAmazonAuroraVectorStore) {
            this.role.addToPrincipalPolicy(new iam.PolicyStatement({
                actions: [
                    'rds-data:ExecuteStatement',
                    'rds-data:BatchExecuteStatement',
                    'rds:DescribeDBClusters',
                ],
                resources: [this.vectorStore.resourceArn],
            }));
        }
        /**
         * Create the vector index if the vector store is OpenSearch Serverless
         * and it was not provided. Otherwise use the provided vector index.
         */
        if (this.vectorStoreType === VectorStoreType.OPENSEARCH_SERVERLESS) {
            if (!props.vectorIndex) {
                this.vectorIndex = new opensearch_vectorindex_1.VectorIndex(this, 'KBIndex', {
                    collection: this.vectorStore,
                    indexName,
                    vectorField,
                    vectorDimensions: embeddingsModel.vectorDimensions,
                    precision: props.vectorType === models_1.VectorType.BINARY ? 'Binary' : 'float',
                    distanceType: props.vectorType === models_1.VectorType.BINARY ? 'hamming' : 'l2',
                    mappings: [
                        {
                            mappingField: 'AMAZON_BEDROCK_TEXT_CHUNK',
                            dataType: 'text',
                            filterable: true,
                        },
                        {
                            mappingField: 'AMAZON_BEDROCK_METADATA',
                            dataType: 'text',
                            filterable: false,
                        },
                    ],
                });
                this.vectorIndex.node.addDependency(this.vectorStore);
            }
            else {
                this.vectorIndex = props.vectorIndex;
            }
        }
        /**
         * Create storage configuraion. If it is of type of
         * `AmazonAuroraVectorStore` or `ExistingAmazonAuroraVectorStore`,
         * then get textField, metadataField and vectorField from
         * the arguments. Otherwise use default values.
         */
        const storageConfiguration = {
            indexName: indexName,
            vectorStore: this.vectorStore,
            vectorStoreType: this.vectorStoreType,
            vectorField: this.vectorStore instanceof amazonaurora_1.AmazonAuroraVectorStore ||
                this.vectorStore instanceof amazonaurora_1.ExistingAmazonAuroraVectorStore
                ? this.vectorStore.vectorField
                : vectorField,
            textField: this.vectorStore instanceof amazonaurora_1.AmazonAuroraVectorStore ||
                this.vectorStore instanceof amazonaurora_1.ExistingAmazonAuroraVectorStore ||
                this.vectorStore instanceof pinecone_1.PineconeVectorStore
                ? this.vectorStore.textField
                : textField,
            metadataField: this.vectorStore instanceof amazonaurora_1.AmazonAuroraVectorStore ||
                this.vectorStore instanceof amazonaurora_1.ExistingAmazonAuroraVectorStore ||
                this.vectorStore instanceof pinecone_1.PineconeVectorStore
                ? this.vectorStore.metadataField
                : metadataField,
        };
        // ------------------------------------------------------
        // L1 Instantiation
        // ------------------------------------------------------
        const knowledgeBase = new aws_cdk_lib_1.aws_bedrock.CfnKnowledgeBase(this, 'MyCfnKnowledgeBase', {
            knowledgeBaseConfiguration: {
                type: knowledge_base_1.KnowledgeBaseType.VECTOR,
                vectorKnowledgeBaseConfiguration: {
                    embeddingModelArn: embeddingsModel.asArn(this),
                    // Used this approach as if property is specified on models that do not
                    // support configurable dimensions CloudFormation throws an error at runtime
                    embeddingModelConfiguration: {
                        bedrockEmbeddingModelConfiguration: embeddingsModel.modelId === 'amazon.titan-embed-text-v2:0'
                            ? {
                                dimensions: embeddingsModel.vectorDimensions,
                                embeddingDataType: vectorType,
                            }
                            : { embeddingDataType: vectorType },
                    },
                    ...(props.supplementalDataStorageLocations && props.supplementalDataStorageLocations.length > 0
                        ? {
                            supplementalDataStorageConfiguration: {
                                supplementalDataStorageLocations: props.supplementalDataStorageLocations.map(location => location.__render()),
                            },
                        }
                        : {}),
                },
            },
            name: this.name,
            roleArn: this.role.roleArn,
            storageConfiguration: getStorageConfiguration(storageConfiguration),
            description: props.description,
        });
        this.knowledgeBaseInstance = knowledgeBase;
        const kbCRPolicy = new iam.Policy(this, 'KBCRPolicy', {
            // roles: [crProvider.role],
            roles: [this.role],
            statements: [
                new iam.PolicyStatement({
                    actions: [
                        'bedrock:CreateKnowledgeBase',
                        /**
                         * We need to add `bedrock:AssociateThirdPartyKnowledgeBase` if
                         * we are deploying Redis or Pinecone data sources
                         */
                        //...(this.vectorStoreType === VectorStoreType.REDIS_ENTERPRISE_CLOUD ||
                        ...(this.vectorStoreType === VectorStoreType.PINECONE
                            ? ['bedrock:AssociateThirdPartyKnowledgeBase']
                            : []),
                    ],
                    resources: ['*'],
                }),
                new iam.PolicyStatement({
                    actions: [
                        'bedrock:UpdateKnowledgeBase',
                        'bedrock:DeleteKnowledgeBase',
                        'bedrock:TagResource',
                    ],
                    resources: [
                        aws_cdk_lib_1.Stack.of(this).formatArn({
                            service: 'bedrock',
                            resource: 'knowledge-base',
                            resourceName: '*',
                            arnFormat: aws_cdk_lib_1.ArnFormat.SLASH_RESOURCE_NAME,
                        }),
                    ],
                }),
                new iam.PolicyStatement({
                    actions: ['iam:PassRole'],
                    resources: [this.role.roleArn],
                }),
            ],
        });
        knowledgeBase.node.addDependency(this.role);
        knowledgeBase.node.addDependency(kbCRPolicy);
        if (this.vectorStoreType === VectorStoreType.OPENSEARCH_SERVERLESS && this.vectorIndex) {
            knowledgeBase.node.addDependency(this.vectorIndex);
        }
        if (this.vectorStoreType === VectorStoreType.AMAZON_AURORA) {
            knowledgeBase.node.addDependency(this.vectorStore);
        }
        nag_suppressions_1.NagSuppressions.addResourceSuppressions(kbCRPolicy, [
            {
                id: 'AwsSolutions-IAM5',
                reason: "Bedrock CreateKnowledgeBase can't be restricted by resource.",
            },
        ], true);
        this.knowledgeBaseArn = knowledgeBase.attrKnowledgeBaseArn;
        this.knowledgeBaseId = knowledgeBase.attrKnowledgeBaseId;
    }
    /**
     * Handle VectorCollection type of VectorStore.
     *
     * @param props - The properties of the KnowledgeBase.
     * @returns The instance of VectorCollection, VectorStoreType.
     * @internal This is an internal core function and should not be called directly.
     */
    handleOpenSearchCollection(props) {
        const vectorStore = props.vectorStore;
        vectorStore.grantDataAccess(this.role);
        return {
            vectorStore: vectorStore,
            vectorStoreType: VectorStoreType.OPENSEARCH_SERVERLESS,
        };
    }
    /**
     * Handle PineconeVectorStore type of VectorStore.
     *
     * @param props - The properties of the KnowledgeBase.
     * @returns The instance of PineconeVectorStore, VectorStoreType.
     * @internal This is an internal core function and should not be called directly.
     */
    handlePineconeVectorStore(props) {
        const vectorStore = props.vectorStore;
        return {
            vectorStore: vectorStore,
            vectorStoreType: VectorStoreType.PINECONE,
        };
    }
    /**
     * Handle AmazonAuroraVectorStore type of VectorStore.
     *
     * @param props - The properties of the KnowledgeBase.
     * @returns The instance of AmazonAuroraVectorStore, VectorStoreType.
     * @internal This is an internal core function and should not be called directly.
     */
    handleAmazonAuroraVectorStore(props) {
        const vectorStore = props.vectorStore instanceof amazonaurora_1.ExistingAmazonAuroraVectorStore
            ? props.vectorStore
            : props.vectorStore;
        return {
            vectorStore: vectorStore,
            vectorStoreType: VectorStoreType.AMAZON_AURORA,
        };
    }
    /**
     * Handle OpenSearchManagedClusterVectorStore type of VectorStore.
     *
     * @param props - The properties of the KnowledgeBase.
     * @returns The instance of OpenSearchManagedClusterVectorStore, VectorStoreType.
     * @internal This is an internal core function and should not be called directly.
     */
    handleOpenSearchManagedClusterVectorStore(props) {
        const vectorStore = props.vectorStore;
        return {
            vectorStore: vectorStore,
            vectorStoreType: VectorStoreType.OPENSEARCH_MANAGED_CLUSTER,
        };
    }
    /**
     * Handle MongoDBAtlasVectorStore type of VectorStore.
     *
     * @param props - The properties of the KnowledgeBase.
     * @returns The instance of MongoDBAtlasVectorStore, VectorStoreType.
     * @internal This is an internal core function and should not be called directly.
     */
    handleMongoDBAtlasVectorStore(props) {
        const vectorStore = props.vectorStore;
        return {
            vectorStore: vectorStore,
            vectorStoreType: VectorStoreType.MONGO_DB_ATLAS,
        };
    }
    /**
     * Handle the default VectorStore type.
     *
     * @returns The instance of VectorCollection, VectorStoreType.
     * @internal This is an internal core function and should not be called directly.
     */
    handleOpenSearchDefaultVectorCollection() {
        const vectorStore = new opensearchserverless_1.VectorCollection(this, 'KBVectors');
        vectorStore.grantDataAccess(this.role);
        return {
            vectorStore: vectorStore,
            vectorStoreType: VectorStoreType.OPENSEARCH_SERVERLESS,
        };
    }
    /**
     * Associate knowledge base with an agent
     */
    associateToAgent(agent) {
        agent.addKnowledgeBase(this);
    }
}
exports.VectorKnowledgeBase = VectorKnowledgeBase;
_b = JSII_RTTI_SYMBOL_1;
VectorKnowledgeBase[_b] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.VectorKnowledgeBase", version: "0.1.309" };
/**
 * Validate that Bedrock Knowledge Base can use the selected model.
 *
 * @internal This is an internal core function and should not be called directly.
 */
function validateModel(foundationModel, vectorType) {
    if (!foundationModel.supportsKnowledgeBase) {
        throw new Error(`The model ${foundationModel} is not supported by Bedrock Knowledge Base.`);
    }
    if (foundationModel.supportedVectorType &&
        !foundationModel.supportedVectorType.includes(vectorType)) {
        throw new Error(`The vector type ${vectorType} is not supported by the model ${foundationModel}.`);
    }
}
/**
 * Validate that the storage configuration can use the selected vector type.
 * It prevents the use of vector types with vector stores that do not support them,
 * thereby avoiding potential runtime errors.
 *
 * @internal This is an internal core function and should not be called directly.
 */
function validateVectorType(vectorStore, vectorType) {
    if (!(vectorStore instanceof opensearchserverless_1.VectorCollection) && vectorType == models_1.VectorType.BINARY) {
        console.log(vectorStore);
        throw new Error('Amazon OpenSearch Serverless is currently the only vector store that supports storing binary vectors.');
    }
}
/**
 * Validate if VectorIndex was provided for a VectorStore of type
 * other than `VectorCollection`.
 *
 * @internal This is an internal core function and should not be called directly.
 */
function validateVectorIndex(vectorStore, vectorIndex, vectorField, indexName) {
    if (!(vectorStore instanceof opensearchserverless_1.VectorCollection) && vectorIndex) {
        throw new Error('If vectorStore is not of type VectorCollection, vectorIndex should not be provided ' +
            'in KnowledgeBase construct.');
    }
    if (!(vectorStore instanceof opensearchserverless_1.VectorCollection) && indexName) {
        throw new Error('If vectorStore is not of type VectorCollection, indexName should not be provided ' +
            'in KnowledgeBase construct.');
    }
    if (!(vectorStore instanceof opensearchserverless_1.VectorCollection) && vectorField) {
        throw new Error('If vectorStore is not of type VectorCollection, vectorField should not be provided ' +
            'in KnowledgeBase construct.');
    }
}
/**
 * Validate that indexName and vectorField parameters are identical
 * in KnowledgeBase construct if VectorIndex was created manually.
 *
 * By default we assign `vectorIndex` to `bedrock-knowledge-base-default-index`
 * value and if user provides `vectorIndex` manually, we need to make sure
 * they also provide it in KnowledgeBase construct if the value is not
 * `bedrock-knowledge-base-default-index`. Same for vectorField.
 *
 * @internal This is an internal core function and should not be called directly.
 */
function validateIndexParameters(vectorIndex, indexName, vectorField) {
    if (vectorIndex.indexName !== 'bedrock-knowledge-base-default-index') {
        if (vectorIndex.indexName !== indexName) {
            throw new Error('Default value of indexName is `bedrock-knowledge-base-default-index`.' +
                ' If you create VectorIndex manually and assign vectorIndex to value other than' +
                ' `bedrock-knowledge-base-default-index` then you must provide the same value in KnowledgeBase construct.' +
                ' If you created VectorIndex manually and set it to `bedrock-knowledge-base-default-index`' +
                ' then do not assign indexName in KnowledgeBase construct.');
        }
    }
    if (vectorIndex.vectorField !== 'bedrock-knowledge-base-default-vector') {
        if (vectorIndex.vectorField !== vectorField) {
            throw new Error('Default value of vectorField is `bedrock-knowledge-base-default-vector`.' +
                ' If you create VectorIndex manually and assign vectorField to value other than' +
                ' `bedrock-knowledge-base-default-field` then you must provide the same value in KnowledgeBase construct.' +
                ' If you created VectorIndex manually and set it to `bedrock-knowledge-base-default-vector`' +
                ' then do not assign vectorField in KnowledgeBase construct.');
        }
    }
}
/**
 * Determine storage configuration based on vector store type.
 *
 * @internal This is an internal core function and should not be called directly.
 */
function getStorageConfiguration(params) {
    switch (params.vectorStoreType) {
        case VectorStoreType.OPENSEARCH_SERVERLESS:
            params.vectorStore = params.vectorStore;
            return {
                type: VectorStoreType.OPENSEARCH_SERVERLESS,
                opensearchServerlessConfiguration: {
                    collectionArn: params.vectorStore.collectionArn,
                    fieldMapping: {
                        vectorField: params.vectorField,
                        textField: params.textField,
                        metadataField: params.metadataField,
                    },
                    vectorIndexName: params.indexName,
                },
            };
        case VectorStoreType.PINECONE:
            params.vectorStore = params.vectorStore;
            return {
                type: VectorStoreType.PINECONE,
                pineconeConfiguration: {
                    namespace: params.vectorStore.namespace || undefined,
                    connectionString: params.vectorStore.connectionString,
                    credentialsSecretArn: params.vectorStore.credentialsSecretArn,
                    fieldMapping: {
                        textField: params.textField,
                        metadataField: params.metadataField,
                    },
                },
            };
        case VectorStoreType.AMAZON_AURORA:
            params.vectorStore =
                params.vectorStore instanceof amazonaurora_1.ExistingAmazonAuroraVectorStore
                    ? params.vectorStore
                    : params.vectorStore;
            return {
                type: VectorStoreType.AMAZON_AURORA,
                rdsConfiguration: {
                    credentialsSecretArn: params.vectorStore.credentialsSecretArn,
                    databaseName: params.vectorStore.databaseName,
                    resourceArn: params.vectorStore.resourceArn,
                    tableName: `${params.vectorStore.schemaName}.${params.vectorStore.tableName}`,
                    fieldMapping: {
                        vectorField: params.vectorField.replace(/-/g, '_'),
                        primaryKeyField: params.vectorStore.primaryKeyField,
                        textField: params.textField.toLowerCase(),
                        metadataField: params.metadataField.toLowerCase(),
                    },
                },
            };
        case VectorStoreType.MONGO_DB_ATLAS:
            params.vectorStore = params.vectorStore;
            return {
                type: VectorStoreType.MONGO_DB_ATLAS,
                mongoDbAtlasConfiguration: {
                    collectionName: params.vectorStore.collectionName,
                    credentialsSecretArn: params.vectorStore.credentialsSecretArn,
                    databaseName: params.vectorStore.databaseName,
                    endpoint: params.vectorStore.endpoint,
                    endpointServiceName: params.vectorStore.endpointServiceName,
                    fieldMapping: {
                        vectorField: params.vectorField,
                        textField: params.textField,
                        metadataField: params.metadataField,
                    },
                    vectorIndexName: params.indexName,
                    textIndexName: params.vectorStore.textIndexName,
                },
            };
        case VectorStoreType.OPENSEARCH_MANAGED_CLUSTER:
            params.vectorStore = params.vectorStore;
            return {
                type: VectorStoreType.OPENSEARCH_MANAGED_CLUSTER,
                opensearchManagedClusterConfiguration: {
                    domainArn: params.vectorStore.domainArn,
                    domainEndpoint: params.vectorStore.domainEndpoint,
                    fieldMapping: {
                        vectorField: params.vectorField,
                        textField: params.textField,
                        metadataField: params.metadataField,
                    },
                    vectorIndexName: params.indexName,
                },
            };
        default:
            throw new Error(`Unsupported vector store type: ${params.vectorStoreType}`);
    }
}
//# sourceMappingURL=data:application/json;base64,