"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.KnowledgeBaseBase = exports.KnowledgeBaseType = void 0;
exports.createKnowledgeBaseServiceRole = createKnowledgeBaseServiceRole;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const aws_cdk_lib_1 = require("aws-cdk-lib");
const iam = require("aws-cdk-lib/aws-iam");
const utils_1 = require("../../../common/helpers/utils");
/******************************************************************************
 *                              ENUMS
 *****************************************************************************/
/**
 * Types of possible knowledge bases supported by Amazon Bedrock Knowledge Bases.
 */
var KnowledgeBaseType;
(function (KnowledgeBaseType) {
    /**
     * Vector database with emebeddings vectors
     * @see https://docs.aws.amazon.com/bedrock/latest/userguide/kb-how-it-works.html
     */
    KnowledgeBaseType["VECTOR"] = "VECTOR";
    /**
     * Kendra GenAI Index
     * @see https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-build-kendra-genai-index.html
     */
    KnowledgeBaseType["KENDRA"] = "KENDRA";
    /**
     * Structured data store (e.g. REDSHIFT)
     * @see https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-build-structured.html
     */
    KnowledgeBaseType["SQL"] = "SQL";
})(KnowledgeBaseType || (exports.KnowledgeBaseType = KnowledgeBaseType = {}));
/******************************************************************************
 *                              ABSTRACT CLASS
 *****************************************************************************/
/**
 * Abstract base class for Knowledge Base (regarless the type).
 * Contains methods valid for KBs either created with CDK or imported and
 * applicable to Knowledge Bases of any type.
 */
class KnowledgeBaseBase extends aws_cdk_lib_1.Resource {
    constructor(scope, id) {
        super(scope, id);
    }
    /**
     * Grant the given principal identity permissions to perform actions on this knowledge base.
     */
    grant(grantee, ...actions) {
        return iam.Grant.addToPrincipal({
            grantee,
            resourceArns: [this.knowledgeBaseArn],
            actions,
        });
    }
    /**
     * Grant the given identity permissions to retrieve content from the knowledge base.
     */
    grantRetrieve(grantee) {
        return this.grant(grantee, 'bedrock:Retrieve');
    }
    /**
     * Grant the given identity permissions to retrieve content from the knowledge base.
     */
    grantRetrieveAndGenerate(grantee) {
        return this.grant(grantee, 'bedrock:RetrieveAndGenerate');
    }
    /**
     * Grant the given identity permissions to query the knowledge base.
     * This contains:
     * - Retrieve
     * - RetrieveAndGenerate
     */
    grantQuery(grantee) {
        return this.grant(grantee, 'bedrock:Retrieve', 'bedrock:RetrieveAndGenerate');
    }
}
exports.KnowledgeBaseBase = KnowledgeBaseBase;
_a = JSII_RTTI_SYMBOL_1;
KnowledgeBaseBase[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.KnowledgeBaseBase", version: "0.1.309" };
/******************************************************************************
 *                              COMMON METHODS
 *****************************************************************************/
/**
 * Create a new Service Role for the Knowledge Base.
 * @param scope
 * @returns
 */
function createKnowledgeBaseServiceRole(scope) {
    return new iam.Role(scope, 'Role', {
        roleName: (0, utils_1.generatePhysicalNameV2)(scope, 'AmazonBedrockExecutionRoleForKnowledgeBase', {
            maxLength: 64,
        }),
        assumedBy: new iam.ServicePrincipal('bedrock.amazonaws.com', {
            conditions: {
                StringEquals: { 'aws:SourceAccount': aws_cdk_lib_1.Stack.of(scope).account },
                ArnLike: {
                    'aws:SourceArn': aws_cdk_lib_1.Stack.of(scope).formatArn({
                        service: 'bedrock',
                        resource: 'knowledge-base',
                        resourceName: '*',
                        arnFormat: aws_cdk_lib_1.ArnFormat.SLASH_RESOURCE_NAME,
                    }),
                },
            },
        }),
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia25vd2xlZGdlLWJhc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY2RrLWxpYi9iZWRyb2NrL2tub3dsZWRnZS1iYXNlcy9rbm93bGVkZ2UtYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBME9BLHdFQW1CQzs7QUE3UEQ7Ozs7Ozs7Ozs7O0dBV0c7QUFFSCw2Q0FBb0U7QUFDcEUsMkNBQTJDO0FBRTNDLHlEQUF1RTtBQUV2RTs7K0VBRStFO0FBQy9FOztHQUVHO0FBQ0gsSUFBWSxpQkFnQlg7QUFoQkQsV0FBWSxpQkFBaUI7SUFDM0I7OztPQUdHO0lBQ0gsc0NBQWlCLENBQUE7SUFDakI7OztPQUdHO0lBQ0gsc0NBQWlCLENBQUE7SUFDakI7OztPQUdHO0lBQ0gsZ0NBQVcsQ0FBQTtBQUNiLENBQUMsRUFoQlcsaUJBQWlCLGlDQUFqQixpQkFBaUIsUUFnQjVCO0FBa0lEOzsrRUFFK0U7QUFDL0U7Ozs7R0FJRztBQUNILE1BQXNCLGlCQUFrQixTQUFRLHNCQUFRO0lBUXRELFlBQVksS0FBZ0IsRUFBRSxFQUFVO1FBQ3RDLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDbkIsQ0FBQztJQUVEOztPQUVHO0lBQ0ksS0FBSyxDQUFDLE9BQXVCLEVBQUUsR0FBRyxPQUFpQjtRQUN4RCxPQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDO1lBQzlCLE9BQU87WUFDUCxZQUFZLEVBQUUsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7WUFDckMsT0FBTztTQUNSLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7T0FFRztJQUNJLGFBQWEsQ0FBQyxPQUF1QjtRQUMxQyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLGtCQUFrQixDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVEOztPQUVHO0lBQ0ksd0JBQXdCLENBQUMsT0FBdUI7UUFDckQsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSw2QkFBNkIsQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLFVBQVUsQ0FBQyxPQUF1QjtRQUN2QyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLDZCQUE2QixDQUFDLENBQUM7SUFDaEYsQ0FBQzs7QUE3Q0gsOENBOENDOzs7QUFFRDs7K0VBRStFO0FBQy9FOzs7O0dBSUc7QUFDSCxTQUFnQiw4QkFBOEIsQ0FBQyxLQUFnQjtJQUM3RCxPQUFPLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFO1FBQ2pDLFFBQVEsRUFBRSxJQUFBLDhCQUFzQixFQUFDLEtBQUssRUFBRSw0Q0FBNEMsRUFBRTtZQUNwRixTQUFTLEVBQUUsRUFBRTtTQUNkLENBQUM7UUFDRixTQUFTLEVBQUUsSUFBSSxHQUFHLENBQUMsZ0JBQWdCLENBQUMsdUJBQXVCLEVBQUU7WUFDM0QsVUFBVSxFQUFFO2dCQUNWLFlBQVksRUFBRSxFQUFFLG1CQUFtQixFQUFFLG1CQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sRUFBRTtnQkFDOUQsT0FBTyxFQUFFO29CQUNQLGVBQWUsRUFBRSxtQkFBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxTQUFTLENBQUM7d0JBQ3pDLE9BQU8sRUFBRSxTQUFTO3dCQUNsQixRQUFRLEVBQUUsZ0JBQWdCO3dCQUMxQixZQUFZLEVBQUUsR0FBRzt3QkFDakIsU0FBUyxFQUFFLHVCQUFTLENBQUMsbUJBQW1CO3FCQUN6QyxDQUFDO2lCQUNIO2FBQ0Y7U0FDRixDQUFDO0tBQ0gsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogIENvcHlyaWdodCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpLiBZb3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiAgd2l0aCB0aGUgTGljZW5zZS4gQSBjb3B5IG9mIHRoZSBMaWNlbnNlIGlzIGxvY2F0ZWQgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqICBvciBpbiB0aGUgJ2xpY2Vuc2UnIGZpbGUgYWNjb21wYW55aW5nIHRoaXMgZmlsZS4gVGhpcyBmaWxlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICdBUyBJUycgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFU1xuICogIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zXG4gKiAgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEFybkZvcm1hdCwgSVJlc291cmNlLCBSZXNvdXJjZSwgU3RhY2sgfSBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgKiBhcyBpYW0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWlhbSc7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcbmltcG9ydCB7IGdlbmVyYXRlUGh5c2ljYWxOYW1lVjIgfSBmcm9tICcuLi8uLi8uLi9jb21tb24vaGVscGVycy91dGlscyc7XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRU5VTVNcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKlxuICogVHlwZXMgb2YgcG9zc2libGUga25vd2xlZGdlIGJhc2VzIHN1cHBvcnRlZCBieSBBbWF6b24gQmVkcm9jayBLbm93bGVkZ2UgQmFzZXMuXG4gKi9cbmV4cG9ydCBlbnVtIEtub3dsZWRnZUJhc2VUeXBlIHtcbiAgLyoqXG4gICAqIFZlY3RvciBkYXRhYmFzZSB3aXRoIGVtZWJlZGRpbmdzIHZlY3RvcnNcbiAgICogQHNlZSBodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vYmVkcm9jay9sYXRlc3QvdXNlcmd1aWRlL2tiLWhvdy1pdC13b3Jrcy5odG1sXG4gICAqL1xuICBWRUNUT1IgPSAnVkVDVE9SJyxcbiAgLyoqXG4gICAqIEtlbmRyYSBHZW5BSSBJbmRleFxuICAgKiBAc2VlIGh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9iZWRyb2NrL2xhdGVzdC91c2VyZ3VpZGUva25vd2xlZGdlLWJhc2UtYnVpbGQta2VuZHJhLWdlbmFpLWluZGV4Lmh0bWxcbiAgICovXG4gIEtFTkRSQSA9ICdLRU5EUkEnLFxuICAvKipcbiAgICogU3RydWN0dXJlZCBkYXRhIHN0b3JlIChlLmcuIFJFRFNISUZUKVxuICAgKiBAc2VlIGh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9iZWRyb2NrL2xhdGVzdC91c2VyZ3VpZGUva25vd2xlZGdlLWJhc2UtYnVpbGQtc3RydWN0dXJlZC5odG1sXG4gICAqL1xuICBTUUwgPSAnU1FMJyxcbn1cblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgIENPTU1PTiBJTlRFUkZBQ0VcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKlxuICogUmVwcmVzZW50cyBhIEtub3dsZWRnZSBCYXNlLCBlaXRoZXIgY3JlYXRlZCB3aXRoIENESyBvciBpbXBvcnRlZCwgb2YgYW55IHR5cGUuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUtub3dsZWRnZUJhc2UgZXh0ZW5kcyBJUmVzb3VyY2Uge1xuICAvKipcbiAgICogVGhlIEFSTiBvZiB0aGUga25vd2xlZGdlIGJhc2UuXG4gICAqIEBleGFtcGxlIFwiYXJuOmF3czpiZWRyb2NrOnVzLWVhc3QtMToxMjM0NTY3ODkwMTI6a25vd2xlZGdlLWJhc2UvS0IxMjM0NTY3OFwiXG4gICAqL1xuICByZWFkb25seSBrbm93bGVkZ2VCYXNlQXJuOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBJRCBvZiB0aGUga25vd2xlZGdlIGJhc2UuXG4gICAqIEBleGFtcGxlIFwiS0IxMjM0NTY3OFwiXG4gICAqL1xuICByZWFkb25seSBrbm93bGVkZ2VCYXNlSWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIHJvbGUgYXNzb2NpYXRlZCB3aXRoIHRoZSBrbm93bGVkZ2UgYmFzZS5cbiAgICovXG4gIHJlYWRvbmx5IHJvbGU6IGlhbS5JUm9sZTtcblxuICAvKipcbiAgICogVGhlIHR5cGUgb2Yga25vd2xlZGdlIGJhc2UuXG4gICAqL1xuICByZWFkb25seSB0eXBlOiBLbm93bGVkZ2VCYXNlVHlwZTtcblxuICAvKipcbiAgICogVGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBrbm93bGVkZ2UgYmFzZS5cbiAgICovXG4gIHJlYWRvbmx5IGRlc2NyaXB0aW9uPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBBIG5hcnJhdGl2ZSBpbnN0cnVjdGlvbiBvZiB0aGUga25vd2xlZGdlIGJhc2UuXG4gICAqIEEgQmVkcm9jayBBZ2VudCBjYW4gdXNlIHRoaXMgaW5zdHJ1Y3Rpb24gdG8gZGV0ZXJtaW5lIGlmIGl0IHNob3VsZFxuICAgKiBxdWVyeSB0aGlzIEtub3dsZWRnZSBCYXNlLlxuICAgKi9cbiAgcmVhZG9ubHkgaW5zdHJ1Y3Rpb24/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEdyYW50IHRoZSBnaXZlbiBwcmluY2lwYWwgaWRlbnRpdHkgcGVybWlzc2lvbnMgdG8gcGVyZm9ybSBhY3Rpb25zIG9uIHRoaXMga25vd2xlZGdlIGJhc2UuXG4gICAqL1xuICBncmFudChncmFudGVlOiBpYW0uSUdyYW50YWJsZSwgLi4uYWN0aW9uczogc3RyaW5nW10pOiBpYW0uR3JhbnQ7XG5cbiAgLyoqXG4gICAqIEdyYW50IHRoZSBnaXZlbiBpZGVudGl0eSBwZXJtaXNzaW9ucyB0byBxdWVyeSB0aGUga25vd2xlZGdlIGJhc2UuXG4gICAqL1xuICBncmFudFF1ZXJ5KGdyYW50ZWU6IGlhbS5JR3JhbnRhYmxlKTogaWFtLkdyYW50O1xufVxuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgQ09NTU9OIFBST1BTIEZPUiBORVcgQ09OU1RSVUNUXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKipcbiAqIENvbW1vbiBwcm9wZXJ0aWVzIGZvciBjcmVhdGluZyBhbnkgdHlwZSBvZiBuZXcgS25vd2xlZGdlIEJhc2UuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ29tbW9uS25vd2xlZGdlQmFzZVByb3BzIHtcbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBrbm93bGVkZ2UgYmFzZS5cbiAgICovXG4gIHJlYWRvbmx5IG5hbWU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBkZXNjcmlwdGlvbiBvZiB0aGUga25vd2xlZGdlIGJhc2UuXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gTm8gZGVzY3JpcHRpb24gcHJvdmlkZWQuXG4gICAqL1xuICByZWFkb25seSBkZXNjcmlwdGlvbj86IHN0cmluZztcblxuICAvKipcbiAgICogRXhpc3RpbmcgSUFNIHJvbGUgd2l0aCBwb2xpY3kgc3RhdGVtZW50cyBncmFudGluZyBhcHByb3ByaWF0ZSBwZXJtaXNzaW9uc1xuICAgKiB0byBpbnZva2UgdGhlIHNwZWNpZmljIGVtYmVkZGluZ3MgbW9kZWxzLlxuICAgKiBBbnkgZW50aXR5IChlLmcuLCBhbiBBV1Mgc2VydmljZSBvciBhcHBsaWNhdGlvbikgdGhhdCBhc3N1bWVzXG4gICAqIHRoaXMgcm9sZSB3aWxsIGJlIGFibGUgdG8gaW52b2tlIG9yIHVzZSB0aGVcbiAgICogc3BlY2lmaWVkIGVtYmVkZGluZ3MgbW9kZWwgd2l0aGluIHRoZSBCZWRyb2NrIHNlcnZpY2UuXG4gICAqL1xuICByZWFkb25seSBleGlzdGluZ1JvbGU/OiBpYW0uSVJvbGU7XG5cbiAgLyoqXG4gICAqIEEgbmFycmF0aXZlIGRlc2NyaXB0aW9uIG9mIHRoZSBrbm93bGVkZ2UgYmFzZS5cbiAgICpcbiAgICogQSBCZWRyb2NrIEFnZW50IGNhbiB1c2UgdGhpcyBpbnN0cnVjdGlvbiB0byBkZXRlcm1pbmUgaWYgaXQgc2hvdWxkXG4gICAqIHF1ZXJ5IHRoaXMgS25vd2xlZGdlIEJhc2UuXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gTm8gZGVzY3JpcHRpb24gcHJvdmlkZWQuXG4gICAqL1xuICByZWFkb25seSBpbnN0cnVjdGlvbj86IHN0cmluZztcbn1cblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgIENPTU1PTiBBVFRSUyBGT1IgSU1QT1JUU1xuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqXG4gKiBDb21tb24gcHJvcGVydGllcyBmb3IgaW1wb3J0aW5nIGEga25vd2xlZGdlIGJhc2UgKG9mIGFueSB0eXBlKSBjcmVhdGVkIG91dHNpZGUgb2YgdGhpcyBzdGFjay5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDb21tb25Lbm93bGVkZ2VCYXNlQXR0cmlidXRlcyB7XG4gIC8qKlxuICAgKiBUaGUgSUQgb2YgdGhlIGtub3dsZWRnZSBiYXNlLlxuICAgKiBAZXhhbXBsZSBcIktCMTIzNDU2NzhcIlxuICAgKi9cbiAgcmVhZG9ubHkga25vd2xlZGdlQmFzZUlkOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgU2VydmljZSBFeGVjdXRpb24gUm9sZSBhc3NvY2lhdGVkIHdpdGggdGhlIGtub3dsZWRnZSBiYXNlLlxuICAgKiBAZXhhbXBsZSBcImFybjphd3M6aWFtOjoxMjM0NTY3ODkwMTI6cm9sZS9BbWF6b25CZWRyb2NrRXhlY3V0aW9uUm9sZUZvcktub3dsZWRnZUJhc2Vhd3NjZGtiZGdlQmFzZUtCMTIzNDU2NzhcIlxuICAgKi9cbiAgcmVhZG9ubHkgZXhlY3V0aW9uUm9sZUFybjogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBrbm93bGVkZ2UgYmFzZS5cbiAgICpcbiAgICogQGRlZmF1bHQgLSBObyBkZXNjcmlwdGlvbiBwcm92aWRlZC5cbiAgICovXG4gIHJlYWRvbmx5IGRlc2NyaXB0aW9uPzogc3RyaW5nO1xuICAvKipcbiAgICogSW5zdHJ1Y3Rpb25zIGZvciBhZ2VudHMgYmFzZWQgb24gdGhlIGRlc2lnbiBhbmQgdHlwZSBvZiBpbmZvcm1hdGlvbiBvZiB0aGVcbiAgICogS25vd2xlZGdlIEJhc2UuIFRoaXMgd2lsbCBpbXBhY3QgaG93IEFnZW50cyBpbnRlcmFjdCB3aXRoIHRoZSBLbm93bGVkZ2UgQmFzZS5cbiAgICpcbiAgICogQGRlZmF1bHQgLSBObyBkZXNjcmlwdGlvbiBwcm92aWRlZC5cbiAgICovXG4gIHJlYWRvbmx5IGluc3RydWN0aW9uPzogc3RyaW5nO1xuICAvKipcbiAgICogU3BlY2lmaWVzIHdoZXRoZXIgdG8gdXNlIHRoZSBrbm93bGVkZ2UgYmFzZSBvciBub3Qgd2hlbiBzZW5kaW5nIGFuIEludm9rZUFnZW50IHJlcXVlc3QuXG4gICAqIEBkZWZhdWx0IC0gRU5BQkxFRFxuICAgKi9cbiAgcmVhZG9ubHkga25vd2xlZGdlQmFzZVN0YXRlPzogc3RyaW5nO1xufVxuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFCU1RSQUNUIENMQVNTXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKipcbiAqIEFic3RyYWN0IGJhc2UgY2xhc3MgZm9yIEtub3dsZWRnZSBCYXNlIChyZWdhcmxlc3MgdGhlIHR5cGUpLlxuICogQ29udGFpbnMgbWV0aG9kcyB2YWxpZCBmb3IgS0JzIGVpdGhlciBjcmVhdGVkIHdpdGggQ0RLIG9yIGltcG9ydGVkIGFuZFxuICogYXBwbGljYWJsZSB0byBLbm93bGVkZ2UgQmFzZXMgb2YgYW55IHR5cGUuXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBLbm93bGVkZ2VCYXNlQmFzZSBleHRlbmRzIFJlc291cmNlIGltcGxlbWVudHMgSUtub3dsZWRnZUJhc2Uge1xuICBwdWJsaWMgYWJzdHJhY3QgcmVhZG9ubHkga25vd2xlZGdlQmFzZUFybjogc3RyaW5nO1xuICBwdWJsaWMgYWJzdHJhY3QgcmVhZG9ubHkga25vd2xlZGdlQmFzZUlkOiBzdHJpbmc7XG4gIHB1YmxpYyBhYnN0cmFjdCByZWFkb25seSByb2xlOiBpYW0uSVJvbGU7XG4gIHB1YmxpYyBhYnN0cmFjdCByZWFkb25seSBkZXNjcmlwdGlvbj86IHN0cmluZztcbiAgcHVibGljIGFic3RyYWN0IHJlYWRvbmx5IGluc3RydWN0aW9uPzogc3RyaW5nO1xuICBwdWJsaWMgYWJzdHJhY3QgcmVhZG9ubHkgdHlwZTogS25vd2xlZGdlQmFzZVR5cGU7XG5cbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCk7XG4gIH1cblxuICAvKipcbiAgICogR3JhbnQgdGhlIGdpdmVuIHByaW5jaXBhbCBpZGVudGl0eSBwZXJtaXNzaW9ucyB0byBwZXJmb3JtIGFjdGlvbnMgb24gdGhpcyBrbm93bGVkZ2UgYmFzZS5cbiAgICovXG4gIHB1YmxpYyBncmFudChncmFudGVlOiBpYW0uSUdyYW50YWJsZSwgLi4uYWN0aW9uczogc3RyaW5nW10pOiBpYW0uR3JhbnQge1xuICAgIHJldHVybiBpYW0uR3JhbnQuYWRkVG9QcmluY2lwYWwoe1xuICAgICAgZ3JhbnRlZSxcbiAgICAgIHJlc291cmNlQXJuczogW3RoaXMua25vd2xlZGdlQmFzZUFybl0sXG4gICAgICBhY3Rpb25zLFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEdyYW50IHRoZSBnaXZlbiBpZGVudGl0eSBwZXJtaXNzaW9ucyB0byByZXRyaWV2ZSBjb250ZW50IGZyb20gdGhlIGtub3dsZWRnZSBiYXNlLlxuICAgKi9cbiAgcHVibGljIGdyYW50UmV0cmlldmUoZ3JhbnRlZTogaWFtLklHcmFudGFibGUpOiBpYW0uR3JhbnQge1xuICAgIHJldHVybiB0aGlzLmdyYW50KGdyYW50ZWUsICdiZWRyb2NrOlJldHJpZXZlJyk7XG4gIH1cblxuICAvKipcbiAgICogR3JhbnQgdGhlIGdpdmVuIGlkZW50aXR5IHBlcm1pc3Npb25zIHRvIHJldHJpZXZlIGNvbnRlbnQgZnJvbSB0aGUga25vd2xlZGdlIGJhc2UuXG4gICAqL1xuICBwdWJsaWMgZ3JhbnRSZXRyaWV2ZUFuZEdlbmVyYXRlKGdyYW50ZWU6IGlhbS5JR3JhbnRhYmxlKTogaWFtLkdyYW50IHtcbiAgICByZXR1cm4gdGhpcy5ncmFudChncmFudGVlLCAnYmVkcm9jazpSZXRyaWV2ZUFuZEdlbmVyYXRlJyk7XG4gIH1cblxuICAvKipcbiAgICogR3JhbnQgdGhlIGdpdmVuIGlkZW50aXR5IHBlcm1pc3Npb25zIHRvIHF1ZXJ5IHRoZSBrbm93bGVkZ2UgYmFzZS5cbiAgICogVGhpcyBjb250YWluczpcbiAgICogLSBSZXRyaWV2ZVxuICAgKiAtIFJldHJpZXZlQW5kR2VuZXJhdGVcbiAgICovXG4gIHB1YmxpYyBncmFudFF1ZXJ5KGdyYW50ZWU6IGlhbS5JR3JhbnRhYmxlKTogaWFtLkdyYW50IHtcbiAgICByZXR1cm4gdGhpcy5ncmFudChncmFudGVlLCAnYmVkcm9jazpSZXRyaWV2ZScsICdiZWRyb2NrOlJldHJpZXZlQW5kR2VuZXJhdGUnKTtcbiAgfVxufVxuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENPTU1PTiBNRVRIT0RTXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBTZXJ2aWNlIFJvbGUgZm9yIHRoZSBLbm93bGVkZ2UgQmFzZS5cbiAqIEBwYXJhbSBzY29wZVxuICogQHJldHVybnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUtub3dsZWRnZUJhc2VTZXJ2aWNlUm9sZShzY29wZTogQ29uc3RydWN0KTogaWFtLlJvbGUge1xuICByZXR1cm4gbmV3IGlhbS5Sb2xlKHNjb3BlLCAnUm9sZScsIHtcbiAgICByb2xlTmFtZTogZ2VuZXJhdGVQaHlzaWNhbE5hbWVWMihzY29wZSwgJ0FtYXpvbkJlZHJvY2tFeGVjdXRpb25Sb2xlRm9yS25vd2xlZGdlQmFzZScsIHtcbiAgICAgIG1heExlbmd0aDogNjQsXG4gICAgfSksXG4gICAgYXNzdW1lZEJ5OiBuZXcgaWFtLlNlcnZpY2VQcmluY2lwYWwoJ2JlZHJvY2suYW1hem9uYXdzLmNvbScsIHtcbiAgICAgIGNvbmRpdGlvbnM6IHtcbiAgICAgICAgU3RyaW5nRXF1YWxzOiB7ICdhd3M6U291cmNlQWNjb3VudCc6IFN0YWNrLm9mKHNjb3BlKS5hY2NvdW50IH0sXG4gICAgICAgIEFybkxpa2U6IHtcbiAgICAgICAgICAnYXdzOlNvdXJjZUFybic6IFN0YWNrLm9mKHNjb3BlKS5mb3JtYXRBcm4oe1xuICAgICAgICAgICAgc2VydmljZTogJ2JlZHJvY2snLFxuICAgICAgICAgICAgcmVzb3VyY2U6ICdrbm93bGVkZ2UtYmFzZScsXG4gICAgICAgICAgICByZXNvdXJjZU5hbWU6ICcqJyxcbiAgICAgICAgICAgIGFybkZvcm1hdDogQXJuRm9ybWF0LlNMQVNIX1JFU09VUkNFX05BTUUsXG4gICAgICAgICAgfSksXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pLFxuICB9KTtcbn1cbiJdfQ==