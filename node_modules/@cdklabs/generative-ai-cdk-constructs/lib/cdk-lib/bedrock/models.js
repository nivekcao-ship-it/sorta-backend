"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BedrockFoundationModel = exports.VectorType = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
/**
 * The data type for the vectors when using a model to convert text into vector embeddings.
 * The model must support the specified data type for vector embeddings. Floating-point (float32)
 * is the default data type, and is supported by most models for vector embeddings. See Supported
 * embeddings models for information on the available models and their vector data types.
 */
var VectorType;
(function (VectorType) {
    /**
     * `FLOATING_POINT` convert the data to floating-point (float32) vector embeddings (more precise, but more costly).
     */
    VectorType["FLOATING_POINT"] = "FLOAT32";
    /**
     * `BINARY` convert the data to binary vector embeddings (less precise, but less costly).
     */
    VectorType["BINARY"] = "BINARY";
})(VectorType || (exports.VectorType = VectorType = {}));
/**
 * Bedrock models.
 *
 * If you need to use a model name that doesn't exist as a static member, you
 * can instantiate a `BedrockFoundationModel` object, e.g: `new BedrockFoundationModel('my-model')`.
 */
class BedrockFoundationModel {
    static fromCdkFoundationModelId(modelId, props = {}) {
        return new BedrockFoundationModel(modelId.modelId, props);
    }
    static fromCdkFoundationModel(modelId, props = {}) {
        return new BedrockFoundationModel(modelId.modelId, props);
    }
    constructor(value, props = {}) {
        this.modelId = value;
        this.modelArn = aws_cdk_lib_1.Arn.format({
            partition: aws_cdk_lib_1.Aws.PARTITION,
            service: 'bedrock',
            region: aws_cdk_lib_1.Aws.REGION,
            account: '',
            resource: 'foundation-model',
            resourceName: this.modelId,
            arnFormat: aws_cdk_lib_1.ArnFormat.SLASH_RESOURCE_NAME,
        });
        this.invokableArn = this.modelArn;
        this.supportsCrossRegion = props.supportsCrossRegion ?? false;
        this.supportsAgents = props.supportsAgents ?? false;
        this.vectorDimensions = props.vectorDimensions;
        this.supportsKnowledgeBase = props.supportsKnowledgeBase ?? false;
        this.supportedVectorType = props.supportedVectorType;
    }
    toString() {
        return this.modelId;
    }
    /**
     * Returns the ARN of the foundation model in the following format:
     * `arn:${Partition}:bedrock:${Region}::foundation-model/${ResourceId}`
     */
    asArn(construct) {
        if (construct) {
        }
        return this.modelArn;
    }
    asIModel(construct) {
        if (construct) {
        }
        return this;
    }
    /**
     * Gives the appropriate policies to invoke and use the Foundation Model in the stack region.
     */
    grantInvoke(grantee) {
        const grant = aws_iam_1.Grant.addToPrincipal({
            grantee: grantee,
            actions: ['bedrock:InvokeModel*', 'bedrock:GetFoundationModel'],
            resourceArns: [this.invokableArn],
        });
        return grant;
    }
    /**
     * Gives the appropriate policies to invoke and use the Foundation Model in all regions.
     */
    grantInvokeAllRegions(grantee) {
        const invokableArn = aws_cdk_lib_1.Arn.format({
            partition: aws_cdk_lib_1.Aws.PARTITION,
            service: 'bedrock',
            region: '*',
            account: '',
            resource: 'foundation-model',
            resourceName: this.modelId,
            arnFormat: aws_cdk_lib_1.ArnFormat.SLASH_RESOURCE_NAME,
        });
        return aws_iam_1.Grant.addToPrincipal({
            grantee: grantee,
            actions: ['bedrock:InvokeModel*', 'bedrock:GetFoundationModel'],
            resourceArns: [invokableArn],
        });
    }
}
exports.BedrockFoundationModel = BedrockFoundationModel;
_a = JSII_RTTI_SYMBOL_1;
BedrockFoundationModel[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.BedrockFoundationModel", version: "0.1.309" };
/****************************************************************************
 *                            AI21
 ***************************************************************************/
BedrockFoundationModel.AI21_JAMBA_1_5_LARGE_V1 = new BedrockFoundationModel('ai21.jamba-1-5-large-v1:0', {
    supportsAgents: true,
});
BedrockFoundationModel.AI21_JAMBA_1_5_MINI_V1 = new BedrockFoundationModel('ai21.jamba-1-5-mini-v1:0', {
    supportsAgents: true,
});
BedrockFoundationModel.AI21_JAMBA_INSTRUCT_V1 = new BedrockFoundationModel('ai21.jamba-instruct-v1:0', {
    supportsAgents: true,
});
/****************************************************************************
 *                            AMAZON
 ***************************************************************************/
BedrockFoundationModel.AMAZON_TITAN_TEXT_EXPRESS_V1 = new BedrockFoundationModel('amazon.titan-text-express-v1', {
    supportsAgents: true,
});
BedrockFoundationModel.AMAZON_TITAN_PREMIER_V1_0 = new BedrockFoundationModel('amazon.titan-text-premier-v1:0', {
    supportsAgents: true,
});
BedrockFoundationModel.AMAZON_NOVA_MICRO_V1 = new BedrockFoundationModel('amazon.nova-micro-v1:0', {
    supportsAgents: true,
    supportsCrossRegion: true,
    optimizedForAgents: true,
});
BedrockFoundationModel.AMAZON_NOVA_LITE_V1 = new BedrockFoundationModel('amazon.nova-lite-v1:0', {
    supportsAgents: true,
    supportsCrossRegion: true,
    optimizedForAgents: true,
});
BedrockFoundationModel.AMAZON_NOVA_PRO_V1 = new BedrockFoundationModel('amazon.nova-pro-v1:0', {
    supportsAgents: true,
    supportsCrossRegion: true,
    optimizedForAgents: true,
});
BedrockFoundationModel.AMAZON_NOVA_PREMIER_V1 = new BedrockFoundationModel('amazon.nova-premier-v1:0', {
    supportsAgents: true,
    supportsCrossRegion: true,
    optimizedForAgents: true,
});
BedrockFoundationModel.TITAN_EMBED_TEXT_V1 = new BedrockFoundationModel('amazon.titan-embed-text-v1', {
    supportsKnowledgeBase: true,
    vectorDimensions: 1536,
    supportedVectorType: [VectorType.FLOATING_POINT],
});
BedrockFoundationModel.TITAN_EMBED_TEXT_V2_1024 = new BedrockFoundationModel('amazon.titan-embed-text-v2:0', {
    supportsKnowledgeBase: true,
    vectorDimensions: 1024,
    supportedVectorType: [VectorType.FLOATING_POINT, VectorType.BINARY],
});
BedrockFoundationModel.TITAN_EMBED_TEXT_V2_512 = new BedrockFoundationModel('amazon.titan-embed-text-v2:0', {
    supportsKnowledgeBase: true,
    vectorDimensions: 512,
    supportedVectorType: [VectorType.FLOATING_POINT, VectorType.BINARY],
});
BedrockFoundationModel.TITAN_EMBED_TEXT_V2_256 = new BedrockFoundationModel('amazon.titan-embed-text-v2:0', {
    supportsKnowledgeBase: true,
    vectorDimensions: 256,
    supportedVectorType: [VectorType.FLOATING_POINT, VectorType.BINARY],
});
/****************************************************************************
 *                            ANTHROPIC
 ***************************************************************************/
BedrockFoundationModel.ANTHROPIC_CLAUDE_3_7_SONNET_V1_0 = new BedrockFoundationModel('anthropic.claude-3-7-sonnet-20250219-v1:0', { supportsAgents: true, supportsCrossRegion: true, optimizedForAgents: false });
BedrockFoundationModel.ANTHROPIC_CLAUDE_3_5_SONNET_V2_0 = new BedrockFoundationModel('anthropic.claude-3-5-sonnet-20241022-v2:0', { supportsAgents: true, supportsCrossRegion: true, optimizedForAgents: true });
BedrockFoundationModel.ANTHROPIC_CLAUDE_3_5_SONNET_V1_0 = new BedrockFoundationModel('anthropic.claude-3-5-sonnet-20240620-v1:0', { supportsAgents: true, supportsCrossRegion: true, optimizedForAgents: true });
BedrockFoundationModel.ANTHROPIC_CLAUDE_3_5_HAIKU_V1_0 = new BedrockFoundationModel('anthropic.claude-3-5-haiku-20241022-v1:0', { supportsAgents: true, supportsCrossRegion: true, optimizedForAgents: true });
BedrockFoundationModel.ANTHROPIC_CLAUDE_OPUS_V1_0 = new BedrockFoundationModel('anthropic.claude-3-opus-20240229-v1:0', { supportsAgents: true, optimizedForAgents: true });
BedrockFoundationModel.ANTHROPIC_CLAUDE_SONNET_V1_0 = new BedrockFoundationModel('anthropic.claude-3-sonnet-20240229-v1:0', { supportsAgents: true, supportsCrossRegion: true, legacy: true, optimizedForAgents: true });
BedrockFoundationModel.ANTHROPIC_CLAUDE_HAIKU_V1_0 = new BedrockFoundationModel('anthropic.claude-3-haiku-20240307-v1:0', { supportsAgents: true, supportsCrossRegion: true, optimizedForAgents: true });
BedrockFoundationModel.ANTHROPIC_CLAUDE_V2_1 = new BedrockFoundationModel('anthropic.claude-v2:1', {
    supportsAgents: true,
    legacy: true,
    optimizedForAgents: true,
});
BedrockFoundationModel.ANTHROPIC_CLAUDE_V2 = new BedrockFoundationModel('anthropic.claude-v2', {
    supportsAgents: true,
    legacy: true,
    optimizedForAgents: true,
});
BedrockFoundationModel.ANTHROPIC_CLAUDE_INSTANT_V1_2 = new BedrockFoundationModel('anthropic.claude-instant-v1', {
    supportsAgents: true,
    legacy: true,
    optimizedForAgents: true,
});
/****************************************************************************
 *                            COHERE
 ***************************************************************************/
BedrockFoundationModel.COHERE_EMBED_ENGLISH_V3 = new BedrockFoundationModel('cohere.embed-english-v3', {
    supportsKnowledgeBase: true,
    vectorDimensions: 1024,
    supportedVectorType: [VectorType.FLOATING_POINT, VectorType.BINARY],
});
BedrockFoundationModel.COHERE_EMBED_MULTILINGUAL_V3 = new BedrockFoundationModel('cohere.embed-multilingual-v3', {
    supportsKnowledgeBase: true,
    vectorDimensions: 1024,
    supportedVectorType: [VectorType.FLOATING_POINT, VectorType.BINARY],
});
/****************************************************************************
 *                            DEEPSEEK
 ***************************************************************************/
BedrockFoundationModel.DEEPSEEK_R1_V1 = new BedrockFoundationModel('deepseek.r1-v1:0', {
    supportsAgents: true,
    supportsCrossRegion: true,
});
/****************************************************************************
 *                            META
 ***************************************************************************/
BedrockFoundationModel.META_LLAMA_3_1_8B_INSTRUCT_V1 = new BedrockFoundationModel('meta.llama3-1-8b-instruct-v1:0', {
    supportsAgents: true,
    supportsCrossRegion: true,
});
BedrockFoundationModel.META_LLAMA_3_1_70B_INSTRUCT_V1 = new BedrockFoundationModel('meta.llama3-1-70b-instruct-v1:0', {
    supportsAgents: true,
    supportsCrossRegion: true,
});
BedrockFoundationModel.META_LLAMA_3_2_11B_INSTRUCT_V1 = new BedrockFoundationModel('meta.llama3-2-11b-instruct-v1:0', {
    supportsAgents: true,
    supportsCrossRegion: true,
});
BedrockFoundationModel.META_LLAMA_3_2_3B_INSTRUCT_V1 = new BedrockFoundationModel('meta.llama3-2-3b-instruct-v1:0', {
    supportsAgents: true,
    supportsCrossRegion: true,
});
BedrockFoundationModel.META_LLAMA_3_2_1B_INSTRUCT_V1 = new BedrockFoundationModel('meta.llama3-2-1b-instruct-v1:0', {
    supportsAgents: true,
    supportsCrossRegion: true,
});
BedrockFoundationModel.META_LLAMA_3_3_70B_INSTRUCT_V1 = new BedrockFoundationModel('meta.llama3-3-70b-instruct-v1:0', {
    supportsAgents: true,
    supportsCrossRegion: true,
});
BedrockFoundationModel.META_LLAMA_4_MAVERICK_17B_INSTRUCT_V1 = new BedrockFoundationModel('meta.llama4-maverick-17b-instruct-v1:0', {
    supportsAgents: true,
    supportsCrossRegion: true,
});
BedrockFoundationModel.META_LLAMA_4_SCOUT_17B_INSTRUCT_V1 = new BedrockFoundationModel('meta.llama4-scout-17b-instruct-v1:0', {
    supportsAgents: true,
    supportsCrossRegion: true,
});
/****************************************************************************
 *                            MISTRAL AI
 ***************************************************************************/
BedrockFoundationModel.MISTRAL_7B_INSTRUCT_V0 = new BedrockFoundationModel('mistral.mistral-7b-instruct-v0:2', {
    supportsAgents: true,
    optimizedForAgents: false,
    supportsCrossRegion: false,
});
BedrockFoundationModel.MISTRAL_MIXTRAL_8X7B_INSTRUCT_V0 = new BedrockFoundationModel('mistral.mixtral-8x7b-instruct-v0:1', {
    supportsAgents: true,
    optimizedForAgents: false,
    supportsCrossRegion: false,
});
BedrockFoundationModel.MISTRAL_SMALL_2402_V1 = new BedrockFoundationModel('mistral.mistral-small-2402-v1:0', {
    supportsAgents: true,
    optimizedForAgents: false,
    supportsCrossRegion: false,
});
BedrockFoundationModel.MISTRAL_LARGE_2402_V1 = new BedrockFoundationModel('mistral.mistral-large-2402-v1:0', {
    supportsAgents: true,
    optimizedForAgents: false,
    supportsCrossRegion: false,
});
BedrockFoundationModel.MISTRAL_LARGE_2407_V1 = new BedrockFoundationModel('mistral.mistral-large-2407-v1:0', {
    supportsAgents: true,
    optimizedForAgents: false,
    supportsCrossRegion: false,
});
BedrockFoundationModel.MISTRAL_PIXTRAL_LARGE_2502_V1 = new BedrockFoundationModel('mistral.pixtral-large-2502-v1:0', {
    supportsAgents: true,
    optimizedForAgents: false,
    supportsCrossRegion: true,
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kZWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2Nkay1saWIvYmVkcm9jay9tb2RlbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7R0FXRztBQUVILDZDQUFrRDtBQUVsRCxpREFBd0Q7QUFHeEQ7Ozs7O0dBS0c7QUFDSCxJQUFZLFVBU1g7QUFURCxXQUFZLFVBQVU7SUFDcEI7O09BRUc7SUFDSCx3Q0FBMEIsQ0FBQTtJQUMxQjs7T0FFRztJQUNILCtCQUFpQixDQUFBO0FBQ25CLENBQUMsRUFUVyxVQUFVLDBCQUFWLFVBQVUsUUFTckI7QUE2REQ7Ozs7O0dBS0c7QUFDSCxNQUFhLHNCQUFzQjtJQTZUMUIsTUFBTSxDQUFDLHdCQUF3QixDQUNwQyxPQUFrQyxFQUNsQyxRQUFxQyxFQUFFO1FBRXZDLE9BQU8sSUFBSSxzQkFBc0IsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFDTSxNQUFNLENBQUMsc0JBQXNCLENBQ2xDLE9BQXdCLEVBQ3hCLFFBQXFDLEVBQUU7UUFFdkMsT0FBTyxJQUFJLHNCQUFzQixDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDNUQsQ0FBQztJQWFELFlBQVksS0FBYSxFQUFFLFFBQXFDLEVBQUU7UUFDaEUsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7UUFDckIsSUFBSSxDQUFDLFFBQVEsR0FBRyxpQkFBRyxDQUFDLE1BQU0sQ0FBQztZQUN6QixTQUFTLEVBQUUsaUJBQUcsQ0FBQyxTQUFTO1lBQ3hCLE9BQU8sRUFBRSxTQUFTO1lBQ2xCLE1BQU0sRUFBRSxpQkFBRyxDQUFDLE1BQU07WUFDbEIsT0FBTyxFQUFFLEVBQUU7WUFDWCxRQUFRLEVBQUUsa0JBQWtCO1lBQzVCLFlBQVksRUFBRSxJQUFJLENBQUMsT0FBTztZQUMxQixTQUFTLEVBQUUsdUJBQVMsQ0FBQyxt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LElBQUk7SUFDcEIsa0JBQWtCLEVBQUUsS0FBSztJQUN6QixtQkFBbUIsRUFBRSxJQUFJO0NBQzFCLENBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogIENvcHlyaWdodCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpLiBZb3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiAgd2l0aCB0aGUgTGljZW5zZS4gQSBjb3B5IG9mIHRoZSBMaWNlbnNlIGlzIGxvY2F0ZWQgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqICBvciBpbiB0aGUgJ2xpY2Vuc2UnIGZpbGUgYWNjb21wYW55aW5nIHRoaXMgZmlsZS4gVGhpcyBmaWxlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICdBUyBJUycgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFU1xuICogIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zXG4gKiAgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEFybiwgQXJuRm9ybWF0LCBBd3MgfSBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgeyBJTW9kZWwsIEZvdW5kYXRpb25Nb2RlbCwgRm91bmRhdGlvbk1vZGVsSWRlbnRpZmllciB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1iZWRyb2NrJztcbmltcG9ydCB7IEdyYW50LCBJR3JhbnRhYmxlIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWlhbSc7XG5pbXBvcnQgeyBJQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5cbi8qKlxuICogVGhlIGRhdGEgdHlwZSBmb3IgdGhlIHZlY3RvcnMgd2hlbiB1c2luZyBhIG1vZGVsIHRvIGNvbnZlcnQgdGV4dCBpbnRvIHZlY3RvciBlbWJlZGRpbmdzLlxuICogVGhlIG1vZGVsIG11c3Qgc3VwcG9ydCB0aGUgc3BlY2lmaWVkIGRhdGEgdHlwZSBmb3IgdmVjdG9yIGVtYmVkZGluZ3MuIEZsb2F0aW5nLXBvaW50IChmbG9hdDMyKVxuICogaXMgdGhlIGRlZmF1bHQgZGF0YSB0eXBlLCBhbmQgaXMgc3VwcG9ydGVkIGJ5IG1vc3QgbW9kZWxzIGZvciB2ZWN0b3IgZW1iZWRkaW5ncy4gU2VlIFN1cHBvcnRlZFxuICogZW1iZWRkaW5ncyBtb2RlbHMgZm9yIGluZm9ybWF0aW9uIG9uIHRoZSBhdmFpbGFibGUgbW9kZWxzIGFuZCB0aGVpciB2ZWN0b3IgZGF0YSB0eXBlcy5cbiAqL1xuZXhwb3J0IGVudW0gVmVjdG9yVHlwZSB7XG4gIC8qKlxuICAgKiBgRkxPQVRJTkdfUE9JTlRgIGNvbnZlcnQgdGhlIGRhdGEgdG8gZmxvYXRpbmctcG9pbnQgKGZsb2F0MzIpIHZlY3RvciBlbWJlZGRpbmdzIChtb3JlIHByZWNpc2UsIGJ1dCBtb3JlIGNvc3RseSkuXG4gICAqL1xuICBGTE9BVElOR19QT0lOVCA9ICdGTE9BVDMyJyxcbiAgLyoqXG4gICAqIGBCSU5BUllgIGNvbnZlcnQgdGhlIGRhdGEgdG8gYmluYXJ5IHZlY3RvciBlbWJlZGRpbmdzIChsZXNzIHByZWNpc2UsIGJ1dCBsZXNzIGNvc3RseSkuXG4gICAqL1xuICBCSU5BUlkgPSAnQklOQVJZJyxcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGFuIEFtYXpvbiBCZWRyb2NrIGFic3RyYWN0aW9uIG9uIHdoaWNoIHlvdSBjYW5cbiAqIHJ1biB0aGUgYEludm9rZWAgQVBJLiBUaGlzIGNhbiBiZSBhIEZvdW5kYXRpb25hbCBNb2RlbCxcbiAqIGEgQ3VzdG9tIE1vZGVsLCBvciBhbiBJbmZlcmVuY2UgUHJvZmlsZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJSW52b2thYmxlIHtcbiAgLyoqXG4gICAqIFRoZSBBUk4gb2YgdGhlIEJlZHJvY2sgaW52b2thYmxlIGFic3RyYWN0aW9uLlxuICAgKi9cbiAgcmVhZG9ubHkgaW52b2thYmxlQXJuOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEdpdmVzIHRoZSBhcHByb3ByaWF0ZSBwb2xpY2llcyB0byBpbnZva2UgYW5kIHVzZSB0aGUgaW52b2thYmxlIGFic3RyYWN0aW9uLlxuICAgKi9cbiAgZ3JhbnRJbnZva2UoZ3JhbnRlZTogSUdyYW50YWJsZSk6IEdyYW50O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJlZHJvY2tGb3VuZGF0aW9uTW9kZWxQcm9wcyB7XG4gIC8qKlxuICAgKiBCZWRyb2NrIEFnZW50cyBjYW4gdXNlIHRoaXMgbW9kZWwuXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gZmFsc2VcbiAgICovXG4gIHJlYWRvbmx5IHN1cHBvcnRzQWdlbnRzPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIEN1cnJlbnRseSwgc29tZSBvZiB0aGUgb2ZmZXJlZCBtb2RlbHMgYXJlIG9wdGltaXplZCB3aXRoIHByb21wdHMvcGFyc2VycyBmaW5lLXR1bmVkIGZvciBpbnRlZ3JhdGluZyB3aXRoIHRoZSBhZ2VudHMgYXJjaGl0ZWN0dXJlLlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIGZhbHNlXG4gICAqL1xuICByZWFkb25seSBvcHRpbWl6ZWRGb3JBZ2VudHM/OiBib29sZWFuO1xuICAvKipcbiAgICogaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2JlZHJvY2svbGF0ZXN0L3VzZXJndWlkZS9tb2RlbC1saWZlY3ljbGUuaHRtbFxuICAgKiBBIHZlcnNpb24gaXMgbWFya2VkIExlZ2FjeSB3aGVuIHRoZXJlIGlzIGEgbW9yZSByZWNlbnQgdmVyc2lvbiB3aGljaCBwcm92aWRlcyBzdXBlcmlvciBwZXJmb3JtYW5jZS4gQW1hem9uIEJlZHJvY2sgc2V0cyBhbiBFT0wgZGF0ZSBmb3IgTGVnYWN5IHZlcnNpb25zLlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIGZhbHNlXG4gICAqL1xuICByZWFkb25seSBsZWdhY3k/OiBib29sZWFuO1xuICAvKipcbiAgICogQmVkcm9jayBLbm93bGVkZ2UgQmFzZSBjYW4gdXNlIHRoaXMgbW9kZWwuXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gZmFsc2VcbiAgICovXG4gIHJlYWRvbmx5IHN1cHBvcnRzS25vd2xlZGdlQmFzZT86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBDYW4gYmUgdXNlZCB3aXRoIGEgQ3Jvc3MtUmVnaW9uIEluZmVyZW5jZSBQcm9maWxlXG4gICAqIEBkZWZhdWx0IC0gZmFsc2VcbiAgICovXG4gIHJlYWRvbmx5IHN1cHBvcnRzQ3Jvc3NSZWdpb24/OiBib29sZWFuO1xuICAvKipcbiAgICogRW1iZWRkaW5nIG1vZGVscyBoYXZlIGRpZmZlcmVudCB2ZWN0b3IgZGltZW5zaW9ucy5cbiAgICogT25seSBhcHBsaWNhYmxlIGZvciBlbWJlZGRpbmcgbW9kZWxzLlxuICAgKi9cbiAgcmVhZG9ubHkgdmVjdG9yRGltZW5zaW9ucz86IG51bWJlcjtcbiAgLyoqXG4gICAqIEVtYmVkZGluZ3MgbW9kZWxzIGhhdmUgZGlmZmVyZW50IHN1cHBvcnRlZCB2ZWN0b3IgdHlwZXNcbiAgICovXG4gIHJlYWRvbmx5IHN1cHBvcnRlZFZlY3RvclR5cGU/OiBWZWN0b3JUeXBlW107XG59XG5cbi8qKlxuICogQmVkcm9jayBtb2RlbHMuXG4gKlxuICogSWYgeW91IG5lZWQgdG8gdXNlIGEgbW9kZWwgbmFtZSB0aGF0IGRvZXNuJ3QgZXhpc3QgYXMgYSBzdGF0aWMgbWVtYmVyLCB5b3VcbiAqIGNhbiBpbnN0YW50aWF0ZSBhIGBCZWRyb2NrRm91bmRhdGlvbk1vZGVsYCBvYmplY3QsIGUuZzogYG5ldyBCZWRyb2NrRm91bmRhdGlvbk1vZGVsKCdteS1tb2RlbCcpYC5cbiAqL1xuZXhwb3J0IGNsYXNzIEJlZHJvY2tGb3VuZGF0aW9uTW9kZWwgaW1wbGVtZW50cyBJSW52b2thYmxlIHtcbiAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgQUkyMVxuICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEFJMjFfSkFNQkFfMV81X0xBUkdFX1YxID0gbmV3IEJlZHJvY2tGb3VuZGF0aW9uTW9kZWwoXG4gICAgJ2FpMjEuamFtYmEtMS01LWxhcmdlLXYxOjAnLFxuICAgIHtcbiAgICAgIHN1cHBvcnRzQWdlbnRzOiB0cnVlLFxuICAgIH0sXG4gICk7XG5cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBBSTIxX0pBTUJBXzFfNV9NSU5JX1YxID0gbmV3IEJlZHJvY2tGb3VuZGF0aW9uTW9kZWwoXG4gICAgJ2FpMjEuamFtYmEtMS01LW1pbmktdjE6MCcsXG4gICAge1xuICAgICAgc3VwcG9ydHNBZ2VudHM6IHRydWUsXG4gICAgfSxcbiAgKTtcblxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEFJMjFfSkFNQkFfSU5TVFJVQ1RfVjEgPSBuZXcgQmVkcm9ja0ZvdW5kYXRpb25Nb2RlbChcbiAgICAnYWkyMS5qYW1iYS1pbnN0cnVjdC12MTowJyxcbiAgICB7XG4gICAgICBzdXBwb3J0c0FnZW50czogdHJ1ZSxcbiAgICB9LFxuICApO1xuICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBTUFaT05cbiAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBBTUFaT05fVElUQU5fVEVYVF9FWFBSRVNTX1YxID0gbmV3IEJlZHJvY2tGb3VuZGF0aW9uTW9kZWwoXG4gICAgJ2FtYXpvbi50aXRhbi10ZXh0LWV4cHJlc3MtdjEnLFxuICAgIHtcbiAgICAgIHN1cHBvcnRzQWdlbnRzOiB0cnVlLFxuICAgIH0sXG4gICk7XG5cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBBTUFaT05fVElUQU5fUFJFTUlFUl9WMV8wID0gbmV3IEJlZHJvY2tGb3VuZGF0aW9uTW9kZWwoXG4gICAgJ2FtYXpvbi50aXRhbi10ZXh0LXByZW1pZXItdjE6MCcsXG4gICAge1xuICAgICAgc3VwcG9ydHNBZ2VudHM6IHRydWUsXG4gICAgfSxcbiAgKTtcblxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEFNQVpPTl9OT1ZBX01JQ1JPX1YxID0gbmV3IEJlZHJvY2tGb3VuZGF0aW9uTW9kZWwoXG4gICAgJ2FtYXpvbi5ub3ZhLW1pY3JvLXYxOjAnLFxuICAgIHtcbiAgICAgIHN1cHBvcnRzQWdlbnRzOiB0cnVlLFxuICAgICAgc3VwcG9ydHNDcm9zc1JlZ2lvbjogdHJ1ZSxcbiAgICAgIG9wdGltaXplZEZvckFnZW50czogdHJ1ZSxcbiAgICB9LFxuICApO1xuXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgQU1BWk9OX05PVkFfTElURV9WMSA9IG5ldyBCZWRyb2NrRm91bmRhdGlvbk1vZGVsKCdhbWF6b24ubm92YS1saXRlLXYxOjAnLCB7XG4gICAgc3VwcG9ydHNBZ2VudHM6IHRydWUsXG4gICAgc3VwcG9ydHNDcm9zc1JlZ2lvbjogdHJ1ZSxcbiAgICBvcHRpbWl6ZWRGb3JBZ2VudHM6IHRydWUsXG4gIH0pO1xuXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgQU1BWk9OX05PVkFfUFJPX1YxID0gbmV3IEJlZHJvY2tGb3VuZGF0aW9uTW9kZWwoJ2FtYXpvbi5ub3ZhLXByby12MTowJywge1xuICAgIHN1cHBvcnRzQWdlbnRzOiB0cnVlLFxuICAgIHN1cHBvcnRzQ3Jvc3NSZWdpb246IHRydWUsXG4gICAgb3B0aW1pemVkRm9yQWdlbnRzOiB0cnVlLFxuICB9KTtcblxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEFNQVpPTl9OT1ZBX1BSRU1JRVJfVjEgPSBuZXcgQmVkcm9ja0ZvdW5kYXRpb25Nb2RlbCgnYW1hem9uLm5vdmEtcHJlbWllci12MTowJywge1xuICAgIHN1cHBvcnRzQWdlbnRzOiB0cnVlLFxuICAgIHN1cHBvcnRzQ3Jvc3NSZWdpb246IHRydWUsXG4gICAgb3B0aW1pemVkRm9yQWdlbnRzOiB0cnVlLFxuICB9KTtcblxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFRJVEFOX0VNQkVEX1RFWFRfVjEgPSBuZXcgQmVkcm9ja0ZvdW5kYXRpb25Nb2RlbChcbiAgICAnYW1hem9uLnRpdGFuLWVtYmVkLXRleHQtdjEnLFxuICAgIHtcbiAgICAgIHN1cHBvcnRzS25vd2xlZGdlQmFzZTogdHJ1ZSxcbiAgICAgIHZlY3RvckRpbWVuc2lvbnM6IDE1MzYsXG4gICAgICBzdXBwb3J0ZWRWZWN0b3JUeXBlOiBbVmVjdG9yVHlwZS5GTE9BVElOR19QT0lOVF0sXG4gICAgfSxcbiAgKTtcblxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFRJVEFOX0VNQkVEX1RFWFRfVjJfMTAyNCA9IG5ldyBCZWRyb2NrRm91bmRhdGlvbk1vZGVsKFxuICAgICdhbWF6b24udGl0YW4tZW1iZWQtdGV4dC12MjowJyxcbiAgICB7XG4gICAgICBzdXBwb3J0c0tub3dsZWRnZUJhc2U6IHRydWUsXG4gICAgICB2ZWN0b3JEaW1lbnNpb25zOiAxMDI0LFxuICAgICAgc3VwcG9ydGVkVmVjdG9yVHlwZTogW1ZlY3RvclR5cGUuRkxPQVRJTkdfUE9JTlQsIFZlY3RvclR5cGUuQklOQVJZXSxcbiAgICB9LFxuICApO1xuXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgVElUQU5fRU1CRURfVEVYVF9WMl81MTIgPSBuZXcgQmVkcm9ja0ZvdW5kYXRpb25Nb2RlbChcbiAgICAnYW1hem9uLnRpdGFuLWVtYmVkLXRleHQtdjI6MCcsXG4gICAge1xuICAgICAgc3VwcG9ydHNLbm93bGVkZ2VCYXNlOiB0cnVlLFxuICAgICAgdmVjdG9yRGltZW5zaW9uczogNTEyLFxuICAgICAgc3VwcG9ydGVkVmVjdG9yVHlwZTogW1ZlY3RvclR5cGUuRkxPQVRJTkdfUE9JTlQsIFZlY3RvclR5cGUuQklOQVJZXSxcbiAgICB9LFxuICApO1xuXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgVElUQU5fRU1CRURfVEVYVF9WMl8yNTYgPSBuZXcgQmVkcm9ja0ZvdW5kYXRpb25Nb2RlbChcbiAgICAnYW1hem9uLnRpdGFuLWVtYmVkLXRleHQtdjI6MCcsXG4gICAge1xuICAgICAgc3VwcG9ydHNLbm93bGVkZ2VCYXNlOiB0cnVlLFxuICAgICAgdmVjdG9yRGltZW5zaW9uczogMjU2LFxuICAgICAgc3VwcG9ydGVkVmVjdG9yVHlwZTogW1ZlY3RvclR5cGUuRkxPQVRJTkdfUE9JTlQsIFZlY3RvclR5cGUuQklOQVJZXSxcbiAgICB9LFxuICApO1xuICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBTlRIUk9QSUNcbiAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBBTlRIUk9QSUNfQ0xBVURFXzNfN19TT05ORVRfVjFfMCA9IG5ldyBCZWRyb2NrRm91bmRhdGlvbk1vZGVsKFxuICAgICdhbnRocm9waWMuY2xhdWRlLTMtNy1zb25uZXQtMjAyNTAyMTktdjE6MCcsXG5cbiAgICB7IHN1cHBvcnRzQWdlbnRzOiB0cnVlLCBzdXBwb3J0c0Nyb3NzUmVnaW9uOiB0cnVlLCBvcHRpbWl6ZWRGb3JBZ2VudHM6IGZhbHNlIH0sXG4gICk7XG5cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBBTlRIUk9QSUNfQ0xBVURFXzNfNV9TT05ORVRfVjJfMCA9IG5ldyBCZWRyb2NrRm91bmRhdGlvbk1vZGVsKFxuICAgICdhbnRocm9waWMuY2xhdWRlLTMtNS1zb25uZXQtMjAyNDEwMjItdjI6MCcsXG4gICAgeyBzdXBwb3J0c0FnZW50czogdHJ1ZSwgc3VwcG9ydHNDcm9zc1JlZ2lvbjogdHJ1ZSwgb3B0aW1pemVkRm9yQWdlbnRzOiB0cnVlIH0sXG4gICk7XG5cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBBTlRIUk9QSUNfQ0xBVURFXzNfNV9TT05ORVRfVjFfMCA9IG5ldyBCZWRyb2NrRm91bmRhdGlvbk1vZGVsKFxuICAgICdhbnRocm9waWMuY2xhdWRlLTMtNS1zb25uZXQtMjAyNDA2MjAtdjE6MCcsXG4gICAgeyBzdXBwb3J0c0FnZW50czogdHJ1ZSwgc3VwcG9ydHNDcm9zc1JlZ2lvbjogdHJ1ZSwgb3B0aW1pemVkRm9yQWdlbnRzOiB0cnVlIH0sXG4gICk7XG5cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBBTlRIUk9QSUNfQ0xBVURFXzNfNV9IQUlLVV9WMV8wID0gbmV3IEJlZHJvY2tGb3VuZGF0aW9uTW9kZWwoXG4gICAgJ2FudGhyb3BpYy5jbGF1ZGUtMy01LWhhaWt1LTIwMjQxMDIyLXYxOjAnLFxuICAgIHsgc3VwcG9ydHNBZ2VudHM6IHRydWUsIHN1cHBvcnRzQ3Jvc3NSZWdpb246IHRydWUsIG9wdGltaXplZEZvckFnZW50czogdHJ1ZSB9LFxuICApO1xuXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgQU5USFJPUElDX0NMQVVERV9PUFVTX1YxXzAgPSBuZXcgQmVkcm9ja0ZvdW5kYXRpb25Nb2RlbChcbiAgICAnYW50aHJvcGljLmNsYXVkZS0zLW9wdXMtMjAyNDAyMjktdjE6MCcsXG4gICAgeyBzdXBwb3J0c0FnZW50czogdHJ1ZSwgb3B0aW1pemVkRm9yQWdlbnRzOiB0cnVlIH0sXG4gICk7XG5cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBBTlRIUk9QSUNfQ0xBVURFX1NPTk5FVF9WMV8wID0gbmV3IEJlZHJvY2tGb3VuZGF0aW9uTW9kZWwoXG4gICAgJ2FudGhyb3BpYy5jbGF1ZGUtMy1zb25uZXQtMjAyNDAyMjktdjE6MCcsXG4gICAgeyBzdXBwb3J0c0FnZW50czogdHJ1ZSwgc3VwcG9ydHNDcm9zc1JlZ2lvbjogdHJ1ZSwgbGVnYWN5OiB0cnVlLCBvcHRpbWl6ZWRGb3JBZ2VudHM6IHRydWUgfSxcbiAgKTtcblxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEFOVEhST1BJQ19DTEFVREVfSEFJS1VfVjFfMCA9IG5ldyBCZWRyb2NrRm91bmRhdGlvbk1vZGVsKFxuICAgICdhbnRocm9waWMuY2xhdWRlLTMtaGFpa3UtMjAyNDAzMDctdjE6MCcsXG4gICAgeyBzdXBwb3J0c0FnZW50czogdHJ1ZSwgc3VwcG9ydHNDcm9zc1JlZ2lvbjogdHJ1ZSwgb3B0aW1pemVkRm9yQWdlbnRzOiB0cnVlIH0sXG4gICk7XG5cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBBTlRIUk9QSUNfQ0xBVURFX1YyXzEgPSBuZXcgQmVkcm9ja0ZvdW5kYXRpb25Nb2RlbChcbiAgICAnYW50aHJvcGljLmNsYXVkZS12MjoxJyxcbiAgICB7XG4gICAgICBzdXBwb3J0c0FnZW50czogdHJ1ZSxcbiAgICAgIGxlZ2FjeTogdHJ1ZSxcbiAgICAgIG9wdGltaXplZEZvckFnZW50czogdHJ1ZSxcbiAgICB9LFxuICApO1xuXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgQU5USFJPUElDX0NMQVVERV9WMiA9IG5ldyBCZWRyb2NrRm91bmRhdGlvbk1vZGVsKCdhbnRocm9waWMuY2xhdWRlLXYyJywge1xuICAgIHN1cHBvcnRzQWdlbnRzOiB0cnVlLFxuICAgIGxlZ2FjeTogdHJ1ZSxcbiAgICBvcHRpbWl6ZWRGb3JBZ2VudHM6IHRydWUsXG4gIH0pO1xuXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgQU5USFJPUElDX0NMQVVERV9JTlNUQU5UX1YxXzIgPSBuZXcgQmVkcm9ja0ZvdW5kYXRpb25Nb2RlbChcbiAgICAnYW50aHJvcGljLmNsYXVkZS1pbnN0YW50LXYxJyxcbiAgICB7XG4gICAgICBzdXBwb3J0c0FnZW50czogdHJ1ZSxcbiAgICAgIGxlZ2FjeTogdHJ1ZSxcbiAgICAgIG9wdGltaXplZEZvckFnZW50czogdHJ1ZSxcbiAgICB9LFxuICApO1xuXG4gIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIENPSEVSRVxuICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IENPSEVSRV9FTUJFRF9FTkdMSVNIX1YzID0gbmV3IEJlZHJvY2tGb3VuZGF0aW9uTW9kZWwoXG4gICAgJ2NvaGVyZS5lbWJlZC1lbmdsaXNoLXYzJyxcbiAgICB7XG4gICAgICBzdXBwb3J0c0tub3dsZWRnZUJhc2U6IHRydWUsXG4gICAgICB2ZWN0b3JEaW1lbnNpb25zOiAxMDI0LFxuICAgICAgc3VwcG9ydGVkVmVjdG9yVHlwZTogW1ZlY3RvclR5cGUuRkxPQVRJTkdfUE9JTlQsIFZlY3RvclR5cGUuQklOQVJZXSxcbiAgICB9LFxuICApO1xuXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgQ09IRVJFX0VNQkVEX01VTFRJTElOR1VBTF9WMyA9IG5ldyBCZWRyb2NrRm91bmRhdGlvbk1vZGVsKFxuICAgICdjb2hlcmUuZW1iZWQtbXVsdGlsaW5ndWFsLXYzJyxcbiAgICB7XG4gICAgICBzdXBwb3J0c0tub3dsZWRnZUJhc2U6IHRydWUsXG4gICAgICB2ZWN0b3JEaW1lbnNpb25zOiAxMDI0LFxuICAgICAgc3VwcG9ydGVkVmVjdG9yVHlwZTogW1ZlY3RvclR5cGUuRkxPQVRJTkdfUE9JTlQsIFZlY3RvclR5cGUuQklOQVJZXSxcbiAgICB9LFxuICApO1xuICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBERUVQU0VFS1xuICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IERFRVBTRUVLX1IxX1YxID0gbmV3IEJlZHJvY2tGb3VuZGF0aW9uTW9kZWwoJ2RlZXBzZWVrLnIxLXYxOjAnLCB7XG4gICAgc3VwcG9ydHNBZ2VudHM6IHRydWUsXG4gICAgc3VwcG9ydHNDcm9zc1JlZ2lvbjogdHJ1ZSxcbiAgfSk7XG5cbiAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgTUVUQVxuICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IE1FVEFfTExBTUFfM18xXzhCX0lOU1RSVUNUX1YxID0gbmV3IEJlZHJvY2tGb3VuZGF0aW9uTW9kZWwoXG4gICAgJ21ldGEubGxhbWEzLTEtOGItaW5zdHJ1Y3QtdjE6MCcsXG4gICAge1xuICAgICAgc3VwcG9ydHNBZ2VudHM6IHRydWUsXG4gICAgICBzdXBwb3J0c0Nyb3NzUmVnaW9uOiB0cnVlLFxuICAgIH0sXG4gICk7XG5cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBNRVRBX0xMQU1BXzNfMV83MEJfSU5TVFJVQ1RfVjEgPSBuZXcgQmVkcm9ja0ZvdW5kYXRpb25Nb2RlbChcbiAgICAnbWV0YS5sbGFtYTMtMS03MGItaW5zdHJ1Y3QtdjE6MCcsXG4gICAge1xuICAgICAgc3VwcG9ydHNBZ2VudHM6IHRydWUsXG4gICAgICBzdXBwb3J0c0Nyb3NzUmVnaW9uOiB0cnVlLFxuICAgIH0sXG4gICk7XG5cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBNRVRBX0xMQU1BXzNfMl8xMUJfSU5TVFJVQ1RfVjEgPSBuZXcgQmVkcm9ja0ZvdW5kYXRpb25Nb2RlbChcbiAgICAnbWV0YS5sbGFtYTMtMi0xMWItaW5zdHJ1Y3QtdjE6MCcsXG4gICAge1xuICAgICAgc3VwcG9ydHNBZ2VudHM6IHRydWUsXG4gICAgICBzdXBwb3J0c0Nyb3NzUmVnaW9uOiB0cnVlLFxuICAgIH0sXG4gICk7XG5cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBNRVRBX0xMQU1BXzNfMl8zQl9JTlNUUlVDVF9WMSA9IG5ldyBCZWRyb2NrRm91bmRhdGlvbk1vZGVsKFxuICAgICdtZXRhLmxsYW1hMy0yLTNiLWluc3RydWN0LXYxOjAnLFxuICAgIHtcbiAgICAgIHN1cHBvcnRzQWdlbnRzOiB0cnVlLFxuICAgICAgc3VwcG9ydHNDcm9zc1JlZ2lvbjogdHJ1ZSxcbiAgICB9LFxuICApO1xuXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgTUVUQV9MTEFNQV8zXzJfMUJfSU5TVFJVQ1RfVjEgPSBuZXcgQmVkcm9ja0ZvdW5kYXRpb25Nb2RlbChcbiAgICAnbWV0YS5sbGFtYTMtMi0xYi1pbnN0cnVjdC12MTowJyxcbiAgICB7XG4gICAgICBzdXBwb3J0c0FnZW50czogdHJ1ZSxcbiAgICAgIHN1cHBvcnRzQ3Jvc3NSZWdpb246IHRydWUsXG4gICAgfSxcbiAgKTtcblxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IE1FVEFfTExBTUFfM18zXzcwQl9JTlNUUlVDVF9WMSA9IG5ldyBCZWRyb2NrRm91bmRhdGlvbk1vZGVsKFxuICAgICdtZXRhLmxsYW1hMy0zLTcwYi1pbnN0cnVjdC12MTowJyxcbiAgICB7XG4gICAgICBzdXBwb3J0c0FnZW50czogdHJ1ZSxcbiAgICAgIHN1cHBvcnRzQ3Jvc3NSZWdpb246IHRydWUsXG4gICAgfSxcbiAgKTtcblxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IE1FVEFfTExBTUFfNF9NQVZFUklDS18xN0JfSU5TVFJVQ1RfVjEgPSBuZXcgQmVkcm9ja0ZvdW5kYXRpb25Nb2RlbChcbiAgICAnbWV0YS5sbGFtYTQtbWF2ZXJpY2stMTdiLWluc3RydWN0LXYxOjAnLFxuICAgIHtcbiAgICAgIHN1cHBvcnRzQWdlbnRzOiB0cnVlLFxuICAgICAgc3VwcG9ydHNDcm9zc1JlZ2lvbjogdHJ1ZSxcbiAgICB9LFxuICApO1xuXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgTUVUQV9MTEFNQV80X1NDT1VUXzE3Ql9JTlNUUlVDVF9WMSA9IG5ldyBCZWRyb2NrRm91bmRhdGlvbk1vZGVsKFxuICAgICdtZXRhLmxsYW1hNC1zY291dC0xN2ItaW5zdHJ1Y3QtdjE6MCcsXG4gICAge1xuICAgICAgc3VwcG9ydHNBZ2VudHM6IHRydWUsXG4gICAgICBzdXBwb3J0c0Nyb3NzUmVnaW9uOiB0cnVlLFxuICAgIH0sXG4gICk7XG4gIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1JU1RSQUwgQUlcbiAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBNSVNUUkFMXzdCX0lOU1RSVUNUX1YwID0gbmV3IEJlZHJvY2tGb3VuZGF0aW9uTW9kZWwoXG4gICAgJ21pc3RyYWwubWlzdHJhbC03Yi1pbnN0cnVjdC12MDoyJyxcbiAgICB7XG4gICAgICBzdXBwb3J0c0FnZW50czogdHJ1ZSxcbiAgICAgIG9wdGltaXplZEZvckFnZW50czogZmFsc2UsXG4gICAgICBzdXBwb3J0c0Nyb3NzUmVnaW9uOiBmYWxzZSxcbiAgICB9LFxuICApO1xuXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgTUlTVFJBTF9NSVhUUkFMXzhYN0JfSU5TVFJVQ1RfVjAgPSBuZXcgQmVkcm9ja0ZvdW5kYXRpb25Nb2RlbChcbiAgICAnbWlzdHJhbC5taXh0cmFsLTh4N2ItaW5zdHJ1Y3QtdjA6MScsXG4gICAge1xuICAgICAgc3VwcG9ydHNBZ2VudHM6IHRydWUsXG4gICAgICBvcHRpbWl6ZWRGb3JBZ2VudHM6IGZhbHNlLFxuICAgICAgc3VwcG9ydHNDcm9zc1JlZ2lvbjogZmFsc2UsXG4gICAgfSxcbiAgKTtcblxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IE1JU1RSQUxfU01BTExfMjQwMl9WMSA9IG5ldyBCZWRyb2NrRm91bmRhdGlvbk1vZGVsKFxuICAgICdtaXN0cmFsLm1pc3RyYWwtc21hbGwtMjQwMi12MTowJyxcbiAgICB7XG4gICAgICBzdXBwb3J0c0FnZW50czogdHJ1ZSxcbiAgICAgIG9wdGltaXplZEZvckFnZW50czogZmFsc2UsXG4gICAgICBzdXBwb3J0c0Nyb3NzUmVnaW9uOiBmYWxzZSxcbiAgICB9LFxuICApO1xuXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgTUlTVFJBTF9MQVJHRV8yNDAyX1YxID0gbmV3IEJlZHJvY2tGb3VuZGF0aW9uTW9kZWwoXG4gICAgJ21pc3RyYWwubWlzdHJhbC1sYXJnZS0yNDAyLXYxOjAnLFxuICAgIHtcbiAgICAgIHN1cHBvcnRzQWdlbnRzOiB0cnVlLFxuICAgICAgb3B0aW1pemVkRm9yQWdlbnRzOiBmYWxzZSxcbiAgICAgIHN1cHBvcnRzQ3Jvc3NSZWdpb246IGZhbHNlLFxuICAgIH0sXG4gICk7XG5cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBNSVNUUkFMX0xBUkdFXzI0MDdfVjEgPSBuZXcgQmVkcm9ja0ZvdW5kYXRpb25Nb2RlbChcbiAgICAnbWlzdHJhbC5taXN0cmFsLWxhcmdlLTI0MDctdjE6MCcsXG4gICAge1xuICAgICAgc3VwcG9ydHNBZ2VudHM6IHRydWUsXG4gICAgICBvcHRpbWl6ZWRGb3JBZ2VudHM6IGZhbHNlLFxuICAgICAgc3VwcG9ydHNDcm9zc1JlZ2lvbjogZmFsc2UsXG4gICAgfSxcbiAgKTtcblxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IE1JU1RSQUxfUElYVFJBTF9MQVJHRV8yNTAyX1YxID0gbmV3IEJlZHJvY2tGb3VuZGF0aW9uTW9kZWwoXG4gICAgJ21pc3RyYWwucGl4dHJhbC1sYXJnZS0yNTAyLXYxOjAnLFxuICAgIHtcbiAgICAgIHN1cHBvcnRzQWdlbnRzOiB0cnVlLFxuICAgICAgb3B0aW1pemVkRm9yQWdlbnRzOiBmYWxzZSxcbiAgICAgIHN1cHBvcnRzQ3Jvc3NSZWdpb246IHRydWUsXG4gICAgfSxcbiAgKTtcblxuICBwdWJsaWMgc3RhdGljIGZyb21DZGtGb3VuZGF0aW9uTW9kZWxJZChcbiAgICBtb2RlbElkOiBGb3VuZGF0aW9uTW9kZWxJZGVudGlmaWVyLFxuICAgIHByb3BzOiBCZWRyb2NrRm91bmRhdGlvbk1vZGVsUHJvcHMgPSB7fSxcbiAgKTogQmVkcm9ja0ZvdW5kYXRpb25Nb2RlbCB7XG4gICAgcmV0dXJuIG5ldyBCZWRyb2NrRm91bmRhdGlvbk1vZGVsKG1vZGVsSWQubW9kZWxJZCwgcHJvcHMpO1xuICB9XG4gIHB1YmxpYyBzdGF0aWMgZnJvbUNka0ZvdW5kYXRpb25Nb2RlbChcbiAgICBtb2RlbElkOiBGb3VuZGF0aW9uTW9kZWwsXG4gICAgcHJvcHM6IEJlZHJvY2tGb3VuZGF0aW9uTW9kZWxQcm9wcyA9IHt9LFxuICApOiBCZWRyb2NrRm91bmRhdGlvbk1vZGVsIHtcbiAgICByZXR1cm4gbmV3IEJlZHJvY2tGb3VuZGF0aW9uTW9kZWwobW9kZWxJZC5tb2RlbElkLCBwcm9wcyk7XG4gIH1cblxuICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb25zdHJ1Y3RvclxuICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuICBwdWJsaWMgcmVhZG9ubHkgbW9kZWxJZDogc3RyaW5nO1xuICBwdWJsaWMgcmVhZG9ubHkgbW9kZWxBcm46IHN0cmluZztcbiAgcHVibGljIHJlYWRvbmx5IGludm9rYWJsZUFybjogc3RyaW5nO1xuICBwdWJsaWMgcmVhZG9ubHkgc3VwcG9ydHNBZ2VudHM6IGJvb2xlYW47XG4gIHB1YmxpYyByZWFkb25seSBzdXBwb3J0c0Nyb3NzUmVnaW9uOiBib29sZWFuO1xuICBwdWJsaWMgcmVhZG9ubHkgdmVjdG9yRGltZW5zaW9ucz86IG51bWJlcjtcbiAgcHVibGljIHJlYWRvbmx5IHN1cHBvcnRzS25vd2xlZGdlQmFzZTogYm9vbGVhbjtcbiAgcHVibGljIHJlYWRvbmx5IHN1cHBvcnRlZFZlY3RvclR5cGU/OiBWZWN0b3JUeXBlW107XG4gIGNvbnN0cnVjdG9yKHZhbHVlOiBzdHJpbmcsIHByb3BzOiBCZWRyb2NrRm91bmRhdGlvbk1vZGVsUHJvcHMgPSB7fSkge1xuICAgIHRoaXMubW9kZWxJZCA9IHZhbHVlO1xuICAgIHRoaXMubW9kZWxBcm4gPSBBcm4uZm9ybWF0KHtcbiAgICAgIHBhcnRpdGlvbjogQXdzLlBBUlRJVElPTixcbiAgICAgIHNlcnZpY2U6ICdiZWRyb2NrJyxcbiAgICAgIHJlZ2lvbjogQXdzLlJFR0lPTixcbiAgICAgIGFjY291bnQ6ICcnLFxuICAgICAgcmVzb3VyY2U6ICdmb3VuZGF0aW9uLW1vZGVsJyxcbiAgICAgIHJlc291cmNlTmFtZTogdGhpcy5tb2RlbElkLFxuICAgICAgYXJuRm9ybWF0OiBBcm5Gb3JtYXQuU0xBU0hfUkVTT1VSQ0VfTkFNRSxcbiAgICB9KTtcbiAgICB0aGlzLmludm9rYWJsZUFybiA9IHRoaXMubW9kZWxBcm47XG4gICAgdGhpcy5zdXBwb3J0c0Nyb3NzUmVnaW9uID0gcHJvcHMuc3VwcG9ydHNDcm9zc1JlZ2lvbiA/PyBmYWxzZTtcbiAgICB0aGlzLnN1cHBvcnRzQWdlbnRzID0gcHJvcHMuc3VwcG9ydHNBZ2VudHMgPz8gZmFsc2U7XG4gICAgdGhpcy52ZWN0b3JEaW1lbnNpb25zID0gcHJvcHMudmVjdG9yRGltZW5zaW9ucztcbiAgICB0aGlzLnN1cHBvcnRzS25vd2xlZGdlQmFzZSA9IHByb3BzLnN1cHBvcnRzS25vd2xlZGdlQmFzZSA/PyBmYWxzZTtcbiAgICB0aGlzLnN1cHBvcnRlZFZlY3RvclR5cGUgPSBwcm9wcy5zdXBwb3J0ZWRWZWN0b3JUeXBlO1xuICB9XG5cbiAgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5tb2RlbElkO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIEFSTiBvZiB0aGUgZm91bmRhdGlvbiBtb2RlbCBpbiB0aGUgZm9sbG93aW5nIGZvcm1hdDpcbiAgICogYGFybjoke1BhcnRpdGlvbn06YmVkcm9jazoke1JlZ2lvbn06OmZvdW5kYXRpb24tbW9kZWwvJHtSZXNvdXJjZUlkfWBcbiAgICovXG4gIGFzQXJuKGNvbnN0cnVjdDogSUNvbnN0cnVjdCk6IHN0cmluZyB7XG4gICAgaWYgKGNvbnN0cnVjdCkge1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5tb2RlbEFybjtcbiAgfVxuXG4gIGFzSU1vZGVsKGNvbnN0cnVjdDogSUNvbnN0cnVjdCk6IElNb2RlbCB7XG4gICAgaWYgKGNvbnN0cnVjdCkge1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBHaXZlcyB0aGUgYXBwcm9wcmlhdGUgcG9saWNpZXMgdG8gaW52b2tlIGFuZCB1c2UgdGhlIEZvdW5kYXRpb24gTW9kZWwgaW4gdGhlIHN0YWNrIHJlZ2lvbi5cbiAgICovXG4gIHB1YmxpYyBncmFudEludm9rZShncmFudGVlOiBJR3JhbnRhYmxlKTogR3JhbnQge1xuICAgIGNvbnN0IGdyYW50ID0gR3JhbnQuYWRkVG9QcmluY2lwYWwoe1xuICAgICAgZ3JhbnRlZTogZ3JhbnRlZSxcbiAgICAgIGFjdGlvbnM6IFsnYmVkcm9jazpJbnZva2VNb2RlbConLCAnYmVkcm9jazpHZXRGb3VuZGF0aW9uTW9kZWwnXSxcbiAgICAgIHJlc291cmNlQXJuczogW3RoaXMuaW52b2thYmxlQXJuXSxcbiAgICB9KTtcbiAgICByZXR1cm4gZ3JhbnQ7XG4gIH1cblxuICAvKipcbiAgICogR2l2ZXMgdGhlIGFwcHJvcHJpYXRlIHBvbGljaWVzIHRvIGludm9rZSBhbmQgdXNlIHRoZSBGb3VuZGF0aW9uIE1vZGVsIGluIGFsbCByZWdpb25zLlxuICAgKi9cbiAgcHVibGljIGdyYW50SW52b2tlQWxsUmVnaW9ucyhncmFudGVlOiBJR3JhbnRhYmxlKTogR3JhbnQge1xuICAgIGNvbnN0IGludm9rYWJsZUFybiA9IEFybi5mb3JtYXQoe1xuICAgICAgcGFydGl0aW9uOiBBd3MuUEFSVElUSU9OLFxuICAgICAgc2VydmljZTogJ2JlZHJvY2snLFxuICAgICAgcmVnaW9uOiAnKicsXG4gICAgICBhY2NvdW50OiAnJyxcbiAgICAgIHJlc291cmNlOiAnZm91bmRhdGlvbi1tb2RlbCcsXG4gICAgICByZXNvdXJjZU5hbWU6IHRoaXMubW9kZWxJZCxcbiAgICAgIGFybkZvcm1hdDogQXJuRm9ybWF0LlNMQVNIX1JFU09VUkNFX05BTUUsXG4gICAgfSk7XG5cbiAgICByZXR1cm4gR3JhbnQuYWRkVG9QcmluY2lwYWwoe1xuICAgICAgZ3JhbnRlZTogZ3JhbnRlZSxcbiAgICAgIGFjdGlvbnM6IFsnYmVkcm9jazpJbnZva2VNb2RlbConLCAnYmVkcm9jazpHZXRGb3VuZGF0aW9uTW9kZWwnXSxcbiAgICAgIHJlc291cmNlQXJuczogW2ludm9rYWJsZUFybl0sXG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==