"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.InferenceProfileBase = exports.InferenceProfileType = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
/** These are the values used by the API when using aws bedrock get-inference-profile --inference-profile-identifier XXXXXXX */
var InferenceProfileType;
(function (InferenceProfileType) {
    /**
     * An inference profile that is created by AWS. These are profiles such as cross-region
     * which help you distributed traffic across a geographic region.
     */
    InferenceProfileType["SYSTEM_DEFINED"] = "SYSTEM_DEFINED";
    /**
     * An inference profile that is user-created. These are profiles that help
     * you track costs or metrics.
     */
    InferenceProfileType["APPLICATION"] = "APPLICATION";
})(InferenceProfileType || (exports.InferenceProfileType = InferenceProfileType = {}));
/**
 * Abstract base class for a ApplicationInferenceProfile.
 * Contains methods and attributes valid for ApplicationInferenceProfiles either created with CDK or imported.
 */
class InferenceProfileBase extends aws_cdk_lib_1.Resource {
    /**
     * Grants appropriate permissions to use the cross-region inference profile.
     * Does not grant permissions to use the model in the profile.
     */
    grantProfileUsage(grantee) {
        const grant = aws_iam_1.Grant.addToPrincipal({
            grantee: grantee,
            actions: ['bedrock:GetInferenceProfile', 'bedrock:ListInferenceProfiles'],
            resourceArns: [this.inferenceProfileArn],
            scope: this,
        });
        return grant;
    }
}
exports.InferenceProfileBase = InferenceProfileBase;
_a = JSII_RTTI_SYMBOL_1;
InferenceProfileBase[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.InferenceProfileBase", version: "0.1.309" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2Nkay1saWIvYmVkcm9jay9pbmZlcmVuY2UtcHJvZmlsZXMvY29tbW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7Ozs7Ozs7O0dBV0c7QUFFSCw2Q0FBa0Q7QUFDbEQsaURBQXdEO0FBRXhELCtIQUErSDtBQUMvSCxJQUFZLG9CQVdYO0FBWEQsV0FBWSxvQkFBb0I7SUFDOUI7OztPQUdHO0lBQ0gseURBQWlDLENBQUE7SUFDakM7OztPQUdHO0lBQ0gsbURBQTJCLENBQUE7QUFDN0IsQ0FBQyxFQVhXLG9CQUFvQixvQ0FBcEIsb0JBQW9CLFFBVy9CO0FBNEJEOzs7R0FHRztBQUNILE1BQXNCLG9CQUFxQixTQUFRLHNCQUFRO0lBY3pEOzs7T0FHRztJQUNILGlCQUFpQixDQUFDLE9BQW1CO1FBQ25DLE1BQU0sS0FBSyxHQUFHLGVBQUssQ0FBQyxjQUFjLENBQUM7WUFDakMsT0FBTyxFQUFFLE9BQU87WUFDaEIsT0FBTyxFQUFFLENBQUMsNkJBQTZCLEVBQUUsK0JBQStCLENBQUM7WUFDekUsWUFBWSxFQUFFLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDO1lBQ3hDLEtBQUssRUFBRSxJQUFJO1NBQ1osQ0FBQyxDQUFDO1FBQ0gsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDOztBQTFCSCxvREEyQkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqICBDb3B5cmlnaHQgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKS4gWW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogIHdpdGggdGhlIExpY2Vuc2UuIEEgY29weSBvZiB0aGUgTGljZW5zZSBpcyBsb2NhdGVkIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiAgb3IgaW4gdGhlICdsaWNlbnNlJyBmaWxlIGFjY29tcGFueWluZyB0aGlzIGZpbGUuIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAnQVMgSVMnIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVNcbiAqICBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9uc1xuICogIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJUmVzb3VyY2UsIFJlc291cmNlIH0gZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0IHsgR3JhbnQsIElHcmFudGFibGUgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtaWFtJztcblxuLyoqIFRoZXNlIGFyZSB0aGUgdmFsdWVzIHVzZWQgYnkgdGhlIEFQSSB3aGVuIHVzaW5nIGF3cyBiZWRyb2NrIGdldC1pbmZlcmVuY2UtcHJvZmlsZSAtLWluZmVyZW5jZS1wcm9maWxlLWlkZW50aWZpZXIgWFhYWFhYWCAqL1xuZXhwb3J0IGVudW0gSW5mZXJlbmNlUHJvZmlsZVR5cGUge1xuICAvKipcbiAgICogQW4gaW5mZXJlbmNlIHByb2ZpbGUgdGhhdCBpcyBjcmVhdGVkIGJ5IEFXUy4gVGhlc2UgYXJlIHByb2ZpbGVzIHN1Y2ggYXMgY3Jvc3MtcmVnaW9uXG4gICAqIHdoaWNoIGhlbHAgeW91IGRpc3RyaWJ1dGVkIHRyYWZmaWMgYWNyb3NzIGEgZ2VvZ3JhcGhpYyByZWdpb24uXG4gICAqL1xuICBTWVNURU1fREVGSU5FRCA9ICdTWVNURU1fREVGSU5FRCcsXG4gIC8qKlxuICAgKiBBbiBpbmZlcmVuY2UgcHJvZmlsZSB0aGF0IGlzIHVzZXItY3JlYXRlZC4gVGhlc2UgYXJlIHByb2ZpbGVzIHRoYXQgaGVscFxuICAgKiB5b3UgdHJhY2sgY29zdHMgb3IgbWV0cmljcy5cbiAgICovXG4gIEFQUExJQ0FUSU9OID0gJ0FQUExJQ0FUSU9OJyxcbn1cblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDT01NT05cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKlxuICogUmVwcmVzZW50cyBhIEFwcGxpY2F0aW9uSW5mZXJlbmNlUHJvZmlsZSwgZWl0aGVyIGNyZWF0ZWQgd2l0aCBDREsgb3IgaW1wb3J0ZWQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUluZmVyZW5jZVByb2ZpbGUge1xuICAvKipcbiAgICogVGhlIEFSTiBvZiB0aGUgYXBwbGljYXRpb24gaW5mZXJlbmNlIHByb2ZpbGUuXG4gICAqL1xuICByZWFkb25seSBpbmZlcmVuY2VQcm9maWxlQXJuOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgdW5pcXVlIGlkZW50aWZpZXIgb2YgdGhlIGluZmVyZW5jZSBwcm9maWxlLlxuICAgKi9cbiAgcmVhZG9ubHkgaW5mZXJlbmNlUHJvZmlsZUlkOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiBpbmZlcmVuY2UgcHJvZmlsZS5cbiAgICovXG4gIHJlYWRvbmx5IHR5cGU6IEluZmVyZW5jZVByb2ZpbGVUeXBlO1xuXG4gIC8qKlxuICAgKiBHcmFudHMgYXBwcm9wcmlhdGUgcGVybWlzc2lvbnMgdG8gdXNlIHRoZSBpbmZlcmVuY2UgcHJvZmlsZS5cbiAgICovXG4gIGdyYW50UHJvZmlsZVVzYWdlKGdyYW50ZWU6IElHcmFudGFibGUpOiBHcmFudDtcbn1cblxuLyoqXG4gKiBBYnN0cmFjdCBiYXNlIGNsYXNzIGZvciBhIEFwcGxpY2F0aW9uSW5mZXJlbmNlUHJvZmlsZS5cbiAqIENvbnRhaW5zIG1ldGhvZHMgYW5kIGF0dHJpYnV0ZXMgdmFsaWQgZm9yIEFwcGxpY2F0aW9uSW5mZXJlbmNlUHJvZmlsZXMgZWl0aGVyIGNyZWF0ZWQgd2l0aCBDREsgb3IgaW1wb3J0ZWQuXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBJbmZlcmVuY2VQcm9maWxlQmFzZSBleHRlbmRzIFJlc291cmNlIGltcGxlbWVudHMgSUluZmVyZW5jZVByb2ZpbGUsIElSZXNvdXJjZSB7XG4gIC8qKlxuICAgKiBUaGUgQVJOIG9mIHRoZSBhcHBsaWNhdGlvbiBpbmZlcmVuY2UgcHJvZmlsZS5cbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCByZWFkb25seSBpbmZlcmVuY2VQcm9maWxlQXJuOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgdW5pcXVlIGlkZW50aWZpZXIgb2YgdGhlIGluZmVyZW5jZSBwcm9maWxlLlxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IHJlYWRvbmx5IGluZmVyZW5jZVByb2ZpbGVJZDogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIElEIG9yIEFtYXpvbiBSZXNvdXJjZSBOYW1lIChBUk4pIG9mIHRoZSBpbmZlcmVuY2UgcHJvZmlsZS5cbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCByZWFkb25seSB0eXBlOiBJbmZlcmVuY2VQcm9maWxlVHlwZTtcblxuICAvKipcbiAgICogR3JhbnRzIGFwcHJvcHJpYXRlIHBlcm1pc3Npb25zIHRvIHVzZSB0aGUgY3Jvc3MtcmVnaW9uIGluZmVyZW5jZSBwcm9maWxlLlxuICAgKiBEb2VzIG5vdCBncmFudCBwZXJtaXNzaW9ucyB0byB1c2UgdGhlIG1vZGVsIGluIHRoZSBwcm9maWxlLlxuICAgKi9cbiAgZ3JhbnRQcm9maWxlVXNhZ2UoZ3JhbnRlZTogSUdyYW50YWJsZSk6IEdyYW50IHtcbiAgICBjb25zdCBncmFudCA9IEdyYW50LmFkZFRvUHJpbmNpcGFsKHtcbiAgICAgIGdyYW50ZWU6IGdyYW50ZWUsXG4gICAgICBhY3Rpb25zOiBbJ2JlZHJvY2s6R2V0SW5mZXJlbmNlUHJvZmlsZScsICdiZWRyb2NrOkxpc3RJbmZlcmVuY2VQcm9maWxlcyddLFxuICAgICAgcmVzb3VyY2VBcm5zOiBbdGhpcy5pbmZlcmVuY2VQcm9maWxlQXJuXSxcbiAgICAgIHNjb3BlOiB0aGlzLFxuICAgIH0pO1xuICAgIHJldHVybiBncmFudDtcbiAgfVxufVxuIl19