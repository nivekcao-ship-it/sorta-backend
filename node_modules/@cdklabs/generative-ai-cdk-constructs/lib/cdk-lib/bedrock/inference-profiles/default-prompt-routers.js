"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PromptRouter = exports.DefaultPromptRouterIdentifier = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const cross_region_inference_profile_1 = require("./../inference-profiles/cross-region-inference-profile");
const models_1 = require("./../models");
/**
 * Represents identifiers for default prompt routers in Bedrock
 */
class DefaultPromptRouterIdentifier {
    constructor(props) {
        (this.promptRouterId = props.promptRouterId), (this.routingModels = props.routingModels);
    }
}
exports.DefaultPromptRouterIdentifier = DefaultPromptRouterIdentifier;
_a = JSII_RTTI_SYMBOL_1;
DefaultPromptRouterIdentifier[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.DefaultPromptRouterIdentifier", version: "0.1.309" };
/**
 * Anthropic Claude V1 router configuration
 */
DefaultPromptRouterIdentifier.ANTHROPIC_CLAUDE_V1 = new DefaultPromptRouterIdentifier({
    promptRouterId: 'anthropic.claude:1',
    routingModels: [
        models_1.BedrockFoundationModel.ANTHROPIC_CLAUDE_HAIKU_V1_0,
        models_1.BedrockFoundationModel.ANTHROPIC_CLAUDE_3_5_SONNET_V1_0,
    ],
});
/**
 * Meta Llama 3.1 router configuration
 */
DefaultPromptRouterIdentifier.META_LLAMA_3_1 = new DefaultPromptRouterIdentifier({
    promptRouterId: 'meta.llama:1',
    routingModels: [
        models_1.BedrockFoundationModel.META_LLAMA_3_1_8B_INSTRUCT_V1,
        models_1.BedrockFoundationModel.META_LLAMA_3_1_70B_INSTRUCT_V1,
    ],
});
class PromptRouter {
    static fromDefaultId(defaultRouter, region) {
        return new PromptRouter(defaultRouter, region);
    }
    constructor(props, region) {
        this.promptRouterId = props.promptRouterId;
        this.promptRouterArn = aws_cdk_lib_1.Arn.format({
            partition: aws_cdk_lib_1.Aws.PARTITION,
            service: 'bedrock',
            region: region,
            account: aws_cdk_lib_1.Aws.ACCOUNT_ID,
            resource: 'default-prompt-router',
            resourceName: this.promptRouterId,
            arnFormat: aws_cdk_lib_1.ArnFormat.SLASH_RESOURCE_NAME,
        });
        // needed to implement IInvokable
        this.invokableArn = this.promptRouterArn;
        // build inference profiles from routing endpoints
        this.routingEndpoints = props.routingModels.flatMap(model => {
            return cross_region_inference_profile_1.CrossRegionInferenceProfile.fromConfig({
                model: model,
                geoRegion: cross_region_inference_profile_1.REGION_TO_GEO_AREA[region],
            });
        });
    }
    grantInvoke(grantee) {
        // Grant invoke on every model of the router
        this.routingEndpoints.forEach(model => {
            model.grantInvoke(grantee);
        });
        // Grant invoke to the prompt router
        return aws_iam_1.Grant.addToPrincipal({
            grantee,
            actions: ['bedrock:GetPromptRouter', 'bedrock:InvokeModel'],
            resourceArns: [this.promptRouterArn],
        });
    }
}
exports.PromptRouter = PromptRouter;
_b = JSII_RTTI_SYMBOL_1;
PromptRouter[_b] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.PromptRouter", version: "0.1.309" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC1wcm9tcHQtcm91dGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jZGstbGliL2JlZHJvY2svaW5mZXJlbmNlLXByb2ZpbGVzL2RlZmF1bHQtcHJvbXB0LXJvdXRlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7R0FXRztBQUVILDZDQUFrRDtBQUNsRCxpREFBd0Q7QUFDeEQsMkdBR2dFO0FBQ2hFLHdDQUFpRTtBQTRCakU7O0dBRUc7QUFDSCxNQUFhLDZCQUE2QjtJQXlCeEMsWUFBb0IsS0FBd0I7UUFDMUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQzNGLENBQUM7O0FBM0JILHNFQTRCQzs7O0FBM0JDOztHQUVHO0FBQ29CLGlEQUFtQixHQUFHLElBQUksNkJBQTZCLENBQUM7SUFDN0UsY0FBYyxFQUFFLG9CQUFvQjtJQUNwQyxhQUFhLEVBQUU7UUFDYiwrQkFBc0IsQ0FBQywyQkFBMkI7UUFDbEQsK0JBQXNCLENBQUMsZ0NBQWdDO0tBQ3hEO0NBQ0YsQ0FBQyxDQUFDO0FBRUg7O0dBRUc7QUFDb0IsNENBQWMsR0FBRyxJQUFJLDZCQUE2QixDQUFDO0lBQ3hFLGNBQWMsRUFBRSxjQUFjO0lBQzlCLGFBQWEsRUFBRTtRQUNiLCtCQUFzQixDQUFDLDZCQUE2QjtRQUNwRCwrQkFBc0IsQ0FBQyw4QkFBOEI7S0FDdEQ7Q0FDRixDQUFDLENBQUM7QUFTTCxNQUFhLFlBQVk7SUFDaEIsTUFBTSxDQUFDLGFBQWEsQ0FBQyxhQUE0QyxFQUFFLE1BQWM7UUFDdEYsT0FBTyxJQUFJLFlBQVksQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDakQsQ0FBQztJQU1ELFlBQVksS0FBd0IsRUFBRSxNQUFjO1FBQ2xELElBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDLGNBQWMsQ0FBQztRQUMzQyxJQUFJLENBQUMsZUFBZSxHQUFHLGlCQUFHLENBQUMsTUFBTSxDQUFDO1lBQ2hDLFNBQVMsRUFBRSxpQkFBRyxDQUFDLFNBQVM7WUFDeEIsT0FBTyxFQUFFLFNBQVM7WUFDbEIsTUFBTSxFQUFFLE1BQU07WUFDZCxPQUFPLEVBQUUsaUJBQUcsQ0FBQyxVQUFVO1lBQ3ZCLFFBQVEsRUFBRSx1QkFBdUI7WUFDakMsWUFBWSxFQUFFLElBQUksQ0FBQyxjQUFjO1lBQ2pDLFNBQVMsRUFBRSx1QkFBUyxDQUFDLG1CQUFtQjtTQUN6QyxDQUFDLENBQUM7UUFDSCxpQ0FBaUM7UUFDakMsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDO1FBRXpDLGtEQUFrRDtRQUNsRCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDMUQsT0FBTyw0REFBMkIsQ0FBQyxVQUFVLENBQUM7Z0JBQzVDLEtBQUssRUFBRSxLQUFLO2dCQUNaLFNBQVMsRUFBRSxtREFBa0IsQ0FBQyxNQUFNLENBQUM7YUFDdEMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsV0FBVyxDQUFDLE9BQW1CO1FBQzdCLDRDQUE0QztRQUM1QyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3BDLEtBQUssQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDN0IsQ0FBQyxDQUFDLENBQUM7UUFDSCxvQ0FBb0M7UUFDcEMsT0FBTyxlQUFLLENBQUMsY0FBYyxDQUFDO1lBQzFCLE9BQU87WUFDUCxPQUFPLEVBQUUsQ0FBQyx5QkFBeUIsRUFBRSxxQkFBcUIsQ0FBQztZQUMzRCxZQUFZLEVBQUUsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDO1NBQ3JDLENBQUMsQ0FBQztJQUNMLENBQUM7O0FBM0NILG9DQTRDQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogIENvcHlyaWdodCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpLiBZb3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiAgd2l0aCB0aGUgTGljZW5zZS4gQSBjb3B5IG9mIHRoZSBMaWNlbnNlIGlzIGxvY2F0ZWQgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqICBvciBpbiB0aGUgJ2xpY2Vuc2UnIGZpbGUgYWNjb21wYW55aW5nIHRoaXMgZmlsZS4gVGhpcyBmaWxlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICdBUyBJUycgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFU1xuICogIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zXG4gKiAgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEFybiwgQXJuRm9ybWF0LCBBd3MgfSBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgeyBJR3JhbnRhYmxlLCBHcmFudCB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1pYW0nO1xuaW1wb3J0IHtcbiAgQ3Jvc3NSZWdpb25JbmZlcmVuY2VQcm9maWxlLFxuICBSRUdJT05fVE9fR0VPX0FSRUEsXG59IGZyb20gJy4vLi4vaW5mZXJlbmNlLXByb2ZpbGVzL2Nyb3NzLXJlZ2lvbi1pbmZlcmVuY2UtcHJvZmlsZSc7XG5pbXBvcnQgeyBCZWRyb2NrRm91bmRhdGlvbk1vZGVsLCBJSW52b2thYmxlIH0gZnJvbSAnLi8uLi9tb2RlbHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElQcm9tcHRSb3V0ZXIge1xuICAvKipcbiAgICogVGhlIEFSTiBvZiB0aGUgcHJvbXB0IHJvdXRlci5cbiAgICovXG4gIHJlYWRvbmx5IHByb21wdFJvdXRlckFybjogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIElkIG9mIHRoZSBwcm9tcHQgcm91dGVyLlxuICAgKi9cbiAgcmVhZG9ubHkgcHJvbXB0Um91dGVySWQ6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBmb3VuZGF0aW9uIG1vZGVscyAvIHByb2ZpbGVzIHRoaXMgcm91dGVyIHdpbGwgcm91dGUgdG8uXG4gICAqL1xuICByZWFkb25seSByb3V0aW5nRW5kcG9pbnRzOiBJSW52b2thYmxlW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJvbXB0Um91dGVyUHJvcHMge1xuICAvKipcbiAgICogUHJvbXB0IFJvdXRlciBJZFxuICAgKi9cbiAgcmVhZG9ubHkgcHJvbXB0Um91dGVySWQ6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBmb3VuZGF0aW9uIG1vZGVscyB0aGlzIHJvdXRlciB3aWxsIHJvdXRlIHRvLlxuICAgKi9cbiAgcmVhZG9ubHkgcm91dGluZ01vZGVsczogQmVkcm9ja0ZvdW5kYXRpb25Nb2RlbFtdO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgaWRlbnRpZmllcnMgZm9yIGRlZmF1bHQgcHJvbXB0IHJvdXRlcnMgaW4gQmVkcm9ja1xuICovXG5leHBvcnQgY2xhc3MgRGVmYXVsdFByb21wdFJvdXRlcklkZW50aWZpZXIge1xuICAvKipcbiAgICogQW50aHJvcGljIENsYXVkZSBWMSByb3V0ZXIgY29uZmlndXJhdGlvblxuICAgKi9cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBBTlRIUk9QSUNfQ0xBVURFX1YxID0gbmV3IERlZmF1bHRQcm9tcHRSb3V0ZXJJZGVudGlmaWVyKHtcbiAgICBwcm9tcHRSb3V0ZXJJZDogJ2FudGhyb3BpYy5jbGF1ZGU6MScsXG4gICAgcm91dGluZ01vZGVsczogW1xuICAgICAgQmVkcm9ja0ZvdW5kYXRpb25Nb2RlbC5BTlRIUk9QSUNfQ0xBVURFX0hBSUtVX1YxXzAsXG4gICAgICBCZWRyb2NrRm91bmRhdGlvbk1vZGVsLkFOVEhST1BJQ19DTEFVREVfM181X1NPTk5FVF9WMV8wLFxuICAgIF0sXG4gIH0pO1xuXG4gIC8qKlxuICAgKiBNZXRhIExsYW1hIDMuMSByb3V0ZXIgY29uZmlndXJhdGlvblxuICAgKi9cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBNRVRBX0xMQU1BXzNfMSA9IG5ldyBEZWZhdWx0UHJvbXB0Um91dGVySWRlbnRpZmllcih7XG4gICAgcHJvbXB0Um91dGVySWQ6ICdtZXRhLmxsYW1hOjEnLFxuICAgIHJvdXRpbmdNb2RlbHM6IFtcbiAgICAgIEJlZHJvY2tGb3VuZGF0aW9uTW9kZWwuTUVUQV9MTEFNQV8zXzFfOEJfSU5TVFJVQ1RfVjEsXG4gICAgICBCZWRyb2NrRm91bmRhdGlvbk1vZGVsLk1FVEFfTExBTUFfM18xXzcwQl9JTlNUUlVDVF9WMSxcbiAgICBdLFxuICB9KTtcblxuICBwdWJsaWMgcmVhZG9ubHkgcHJvbXB0Um91dGVySWQ6IHN0cmluZztcbiAgcHVibGljIHJlYWRvbmx5IHJvdXRpbmdNb2RlbHM6IEJlZHJvY2tGb3VuZGF0aW9uTW9kZWxbXTtcbiAgcHJpdmF0ZSBjb25zdHJ1Y3Rvcihwcm9wczogUHJvbXB0Um91dGVyUHJvcHMpIHtcbiAgICAodGhpcy5wcm9tcHRSb3V0ZXJJZCA9IHByb3BzLnByb21wdFJvdXRlcklkKSwgKHRoaXMucm91dGluZ01vZGVscyA9IHByb3BzLnJvdXRpbmdNb2RlbHMpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBQcm9tcHRSb3V0ZXIgaW1wbGVtZW50cyBJSW52b2thYmxlLCBJUHJvbXB0Um91dGVyIHtcbiAgcHVibGljIHN0YXRpYyBmcm9tRGVmYXVsdElkKGRlZmF1bHRSb3V0ZXI6IERlZmF1bHRQcm9tcHRSb3V0ZXJJZGVudGlmaWVyLCByZWdpb246IHN0cmluZykge1xuICAgIHJldHVybiBuZXcgUHJvbXB0Um91dGVyKGRlZmF1bHRSb3V0ZXIsIHJlZ2lvbik7XG4gIH1cbiAgcHVibGljIHJlYWRvbmx5IHByb21wdFJvdXRlckFybjogc3RyaW5nO1xuICBwdWJsaWMgcmVhZG9ubHkgcHJvbXB0Um91dGVySWQ6IHN0cmluZztcbiAgcHVibGljIHJlYWRvbmx5IGludm9rYWJsZUFybjogc3RyaW5nO1xuICBwdWJsaWMgcmVhZG9ubHkgcm91dGluZ0VuZHBvaW50czogSUludm9rYWJsZVtdO1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9tcHRSb3V0ZXJQcm9wcywgcmVnaW9uOiBzdHJpbmcpIHtcbiAgICB0aGlzLnByb21wdFJvdXRlcklkID0gcHJvcHMucHJvbXB0Um91dGVySWQ7XG4gICAgdGhpcy5wcm9tcHRSb3V0ZXJBcm4gPSBBcm4uZm9ybWF0KHtcbiAgICAgIHBhcnRpdGlvbjogQXdzLlBBUlRJVElPTixcbiAgICAgIHNlcnZpY2U6ICdiZWRyb2NrJyxcbiAgICAgIHJlZ2lvbjogcmVnaW9uLFxuICAgICAgYWNjb3VudDogQXdzLkFDQ09VTlRfSUQsXG4gICAgICByZXNvdXJjZTogJ2RlZmF1bHQtcHJvbXB0LXJvdXRlcicsXG4gICAgICByZXNvdXJjZU5hbWU6IHRoaXMucHJvbXB0Um91dGVySWQsXG4gICAgICBhcm5Gb3JtYXQ6IEFybkZvcm1hdC5TTEFTSF9SRVNPVVJDRV9OQU1FLFxuICAgIH0pO1xuICAgIC8vIG5lZWRlZCB0byBpbXBsZW1lbnQgSUludm9rYWJsZVxuICAgIHRoaXMuaW52b2thYmxlQXJuID0gdGhpcy5wcm9tcHRSb3V0ZXJBcm47XG5cbiAgICAvLyBidWlsZCBpbmZlcmVuY2UgcHJvZmlsZXMgZnJvbSByb3V0aW5nIGVuZHBvaW50c1xuICAgIHRoaXMucm91dGluZ0VuZHBvaW50cyA9IHByb3BzLnJvdXRpbmdNb2RlbHMuZmxhdE1hcChtb2RlbCA9PiB7XG4gICAgICByZXR1cm4gQ3Jvc3NSZWdpb25JbmZlcmVuY2VQcm9maWxlLmZyb21Db25maWcoe1xuICAgICAgICBtb2RlbDogbW9kZWwsXG4gICAgICAgIGdlb1JlZ2lvbjogUkVHSU9OX1RPX0dFT19BUkVBW3JlZ2lvbl0sXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGdyYW50SW52b2tlKGdyYW50ZWU6IElHcmFudGFibGUpOiBHcmFudCB7XG4gICAgLy8gR3JhbnQgaW52b2tlIG9uIGV2ZXJ5IG1vZGVsIG9mIHRoZSByb3V0ZXJcbiAgICB0aGlzLnJvdXRpbmdFbmRwb2ludHMuZm9yRWFjaChtb2RlbCA9PiB7XG4gICAgICBtb2RlbC5ncmFudEludm9rZShncmFudGVlKTtcbiAgICB9KTtcbiAgICAvLyBHcmFudCBpbnZva2UgdG8gdGhlIHByb21wdCByb3V0ZXJcbiAgICByZXR1cm4gR3JhbnQuYWRkVG9QcmluY2lwYWwoe1xuICAgICAgZ3JhbnRlZSxcbiAgICAgIGFjdGlvbnM6IFsnYmVkcm9jazpHZXRQcm9tcHRSb3V0ZXInLCAnYmVkcm9jazpJbnZva2VNb2RlbCddLFxuICAgICAgcmVzb3VyY2VBcm5zOiBbdGhpcy5wcm9tcHRSb3V0ZXJBcm5dLFxuICAgIH0pO1xuICB9XG59XG4iXX0=