/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
import { IGrantable, Grant } from 'aws-cdk-lib/aws-iam';
import { BedrockFoundationModel, IInvokable } from './../models';
export interface IPromptRouter {
    /**
     * The ARN of the prompt router.
     */
    readonly promptRouterArn: string;
    /**
     * The Id of the prompt router.
     */
    readonly promptRouterId: string;
    /**
     * The foundation models / profiles this router will route to.
     */
    readonly routingEndpoints: IInvokable[];
}
export interface PromptRouterProps {
    /**
     * Prompt Router Id
     */
    readonly promptRouterId: string;
    /**
     * The foundation models this router will route to.
     */
    readonly routingModels: BedrockFoundationModel[];
}
/**
 * Represents identifiers for default prompt routers in Bedrock
 */
export declare class DefaultPromptRouterIdentifier {
    /**
     * Anthropic Claude V1 router configuration
     */
    static readonly ANTHROPIC_CLAUDE_V1: DefaultPromptRouterIdentifier;
    /**
     * Meta Llama 3.1 router configuration
     */
    static readonly META_LLAMA_3_1: DefaultPromptRouterIdentifier;
    readonly promptRouterId: string;
    readonly routingModels: BedrockFoundationModel[];
    private constructor();
}
export declare class PromptRouter implements IInvokable, IPromptRouter {
    static fromDefaultId(defaultRouter: DefaultPromptRouterIdentifier, region: string): PromptRouter;
    readonly promptRouterArn: string;
    readonly promptRouterId: string;
    readonly invokableArn: string;
    readonly routingEndpoints: IInvokable[];
    constructor(props: PromptRouterProps, region: string);
    grantInvoke(grantee: IGrantable): Grant;
}
