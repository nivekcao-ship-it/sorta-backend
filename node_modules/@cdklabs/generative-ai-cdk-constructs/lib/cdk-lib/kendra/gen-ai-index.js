"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.KendraGenAiIndex = exports.KendraGenAiIndexBase = exports.Kendra = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const aws_cdk_lib_1 = require("aws-cdk-lib");
const iam = require("aws-cdk-lib/aws-iam");
const kendra = require("aws-cdk-lib/aws-kendra");
const utils_1 = require("../../common/helpers/utils");
var Kendra;
(function (Kendra) {
    /**
     * Represents an Amazon Kendra Index Edition.
     */
    let Edition;
    (function (Edition) {
        Edition["DEVELOPER_EDITION"] = "DEVELOPER_EDITION";
        Edition["ENTERPRISE_EDITION"] = "ENTERPRISE_EDITION";
        Edition["GEN_AI_ENTERPRISE_EDITION"] = "GEN_AI_ENTERPRISE_EDITION";
    })(Edition = Kendra.Edition || (Kendra.Edition = {}));
    /**
     * Represents an Amazon Kendra Index Field Type.
     */
    let IndexFieldTypes;
    (function (IndexFieldTypes) {
        IndexFieldTypes["STRING"] = "STRING_VALUE";
        IndexFieldTypes["STRING_LIST"] = "STRING_LIST_VALUE";
        IndexFieldTypes["LONG"] = "LONG_VALUE";
        IndexFieldTypes["DATE"] = "DATE_VALUE";
    })(IndexFieldTypes = Kendra.IndexFieldTypes || (Kendra.IndexFieldTypes = {}));
    /**
     * The different policies available to filter search results based on user context.
     */
    let UserContextPolicy;
    (function (UserContextPolicy) {
        /** All indexed content is searchable and displayable for all users.
         * If you want to filter search results on user context, you can use
         * the attribute filters of _user_id and _group_ids or you can provide
         * user and group information in UserContext . */
        UserContextPolicy["ATTRIBUTE_FILTER"] = "ATTRIBUTE_FILTER";
        /**
         * Enables token-based user access control to filter search results on
         * user context. All documents with no access control and all documents
         * accessible to the user will be searchable and displayable.
         */
        UserContextPolicy["USER_TOKEN"] = "USER_TOKEN";
    })(UserContextPolicy = Kendra.UserContextPolicy || (Kendra.UserContextPolicy = {}));
})(Kendra || (exports.Kendra = Kendra = {}));
/******************************************************************************
 *                              COMMON
 *****************************************************************************/
/**
 * Abstract base class for a Kendra GenAI index.
 * Contains methods and attributes valid for Kendra GenAI Indexes either created with CDK or imported.
 */
class KendraGenAiIndexBase extends aws_cdk_lib_1.Resource {
}
exports.KendraGenAiIndexBase = KendraGenAiIndexBase;
_a = JSII_RTTI_SYMBOL_1;
KendraGenAiIndexBase[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.kendra.KendraGenAiIndexBase", version: "0.1.309" };
/******************************************************************************
 *                        NEW CONSTRUCT DEFINITION
 *****************************************************************************/
/**
 * Class to create a Kendra GenAI Index with CDK.
 * @cloudformationResource AWS::Kendra::Index
 */
class KendraGenAiIndex extends KendraGenAiIndexBase {
    /**
     * Import a guardrail given its attributes
     */
    static fromAttrs(scope, id, attrs) {
        class Import extends KendraGenAiIndexBase {
            constructor() {
                super(...arguments);
                this.role = attrs.role;
                this.indexId = attrs.indexId;
                this.indexArn = aws_cdk_lib_1.Stack.of(this).formatArn({
                    service: 'kendra',
                    resource: 'index',
                    resourceName: attrs.indexId,
                    arnFormat: aws_cdk_lib_1.ArnFormat.SLASH_RESOURCE_NAME,
                });
            }
        }
        return new Import(scope, id);
    }
    constructor(scope, id, props) {
        super(scope, id);
        /**
         * The edition of the Gen AI index
         */
        this.edition = Kendra.Edition.GEN_AI_ENTERPRISE_EDITION;
        // ------------------------------------------------------
        // Set properties or defaults
        // ------------------------------------------------------
        this.name =
            props.name ?? (0, utils_1.generatePhysicalNameV2)(this, 'genai-index', { maxLength: 40, lower: true, separator: '-' });
        this.documentCapacityUnits = props.documentCapacityUnits ?? 0;
        this.queryCapacityUnits = props.queryCapacityUnits ?? 0;
        this.kmsKey = props.kmsKey;
        // ------------------------------------------------------
        // Role Creation
        // ------------------------------------------------------
        const roleName = (0, utils_1.generatePhysicalNameV2)(this, `AmazonKendraRoleForIndex-${this.name}`, { maxLength: 64 });
        this.role = new iam.Role(this, 'Role', {
            roleName: roleName,
            assumedBy: new iam.ServicePrincipal('kendra.amazonaws.com'),
        });
        this.role.addToPrincipalPolicy(new iam.PolicyStatement({
            actions: ['logs:DescribeLogGroups'],
            resources: ['*'],
        }));
        this.role.addToPrincipalPolicy(new iam.PolicyStatement({
            actions: ['cloudwatch:PutMetricData'],
            resources: ['*'],
            conditions: {
                StringEquals: {
                    'cloudwatch:namespace': 'AWS/Kendra',
                },
            },
        }));
        this.role.addToPrincipalPolicy(new iam.PolicyStatement({
            actions: ['logs:CreateLogGroup'],
            resources: [
                aws_cdk_lib_1.Stack.of(this).formatArn({
                    service: 'logs',
                    resource: 'log-group',
                    resourceName: '/aws/kendra/*',
                    arnFormat: aws_cdk_lib_1.ArnFormat.COLON_RESOURCE_NAME,
                }),
            ],
        }));
        this.role.addToPrincipalPolicy(new iam.PolicyStatement({
            actions: ['logs:DescribeLogStreams', 'logs:CreateLogStream', 'logs:PutLogEvents'],
            resources: [
                aws_cdk_lib_1.Stack.of(this).formatArn({
                    service: 'logs',
                    resource: 'log-group',
                    resourceName: '/aws/kendra/*:log-stream:*',
                    arnFormat: aws_cdk_lib_1.ArnFormat.COLON_RESOURCE_NAME,
                }),
            ],
        }));
        // ------------------------------------------------------
        // L1 Instantiation
        // ------------------------------------------------------
        this._resource = new kendra.CfnIndex(this, 'GenAiIndex', {
            name: this.name,
            edition: Kendra.Edition.GEN_AI_ENTERPRISE_EDITION,
            roleArn: this.role.roleArn,
            serverSideEncryptionConfiguration: props.kmsKey
                ? {
                    kmsKeyId: props.kmsKey.keyId,
                }
                : undefined,
            capacityUnits: {
                storageCapacityUnits: this.documentCapacityUnits,
                queryCapacityUnits: this.queryCapacityUnits,
            },
            userContextPolicy: Kendra.UserContextPolicy.ATTRIBUTE_FILTER,
        });
        this.indexArn = this._resource.attrArn;
        this.indexId = this._resource.attrId;
    }
}
exports.KendraGenAiIndex = KendraGenAiIndex;
_b = JSII_RTTI_SYMBOL_1;
KendraGenAiIndex[_b] = { fqn: "@cdklabs/generative-ai-cdk-constructs.kendra.KendraGenAiIndex", version: "0.1.309" };
//# sourceMappingURL=data:application/json;base64,