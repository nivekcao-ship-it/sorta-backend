/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
import * as cdk from 'aws-cdk-lib';
import * as cloudwatch from 'aws-cdk-lib/aws-cloudwatch';
import * as iam from 'aws-cdk-lib/aws-iam';
import * as oss from 'aws-cdk-lib/aws-opensearchserverless';
import { Construct } from 'constructs';
/**
 * Configuration for standby replicas in a vector collection.
 */
export declare enum VectorCollectionStandbyReplicas {
    /**
     * Enable standby replicas for high availability
     */
    ENABLED = "ENABLED",
    /**
     * Disable standby replicas to reduce costs
     */
    DISABLED = "DISABLED"
}
/**
 * The type of collection.
 */
export declare enum VectorCollectionType {
    /**
     * Search – Full-text search that powers applications in your internal networks (content management systems, legal documents) and internet-facing applications,
     * such as ecommerce website search and content search.
     */
    SEARCH = "SEARCH",
    /**
     * Time series – The log analytics segment that focuses on analyzing large volumes of semi-structured,
     * machine-generated data in real-time for operational, security, user behavior, and business insights.
     */
    TIMESERIES = "TIMESERIES",
    /**
     * Vector search – Semantic search on vector embeddings that simplifies vector data management and powers machine learning (ML) augmented search experiences and generative AI applications,
     * such as chatbots, personal assistants, and fraud detection.
     */
    VECTORSEARCH = "VECTORSEARCH"
}
/**
 * Attributes for importing an existing vector collection.
 */
export interface VectorCollectionAttributes {
    /**
     * The name of the collection
     */
    readonly collectionName: string;
    /**
     * The ID of the collection
     */
    readonly collectionId: string;
    /**
     * The ARN of the collection
     */
    readonly collectionArn: string;
    /**
     * The standby replicas configuration
     */
    readonly standbyReplicas: VectorCollectionStandbyReplicas;
    /**
     * The type of collection
     */
    readonly collectionType: VectorCollectionType;
}
/**
 * Properties for configuring the vector collection.
 */
export interface VectorCollectionProps {
    /**
     * The name of the collection. Must be between 3-32 characters long and contain only
     * lowercase letters, numbers, and hyphens.
     *
     * @default - A CDK generated name will be used
     */
    readonly collectionName?: string;
    /**
     * Description for the collection
     */
    readonly description?: string;
    /**
     * Indicates whether to use standby replicas for the collection.
     *
     * @default VectorCollectionStandbyReplicas.ENABLED
     */
    readonly standbyReplicas?: VectorCollectionStandbyReplicas;
    /**
     * A user defined IAM policy that allows API access to the collection.
     */
    readonly customAossPolicy?: iam.ManagedPolicy;
    /**
     * Type of vector collection
     *
     * @default - VECTORSEARCH
     */
    readonly collectionType?: VectorCollectionType;
    /**
     * A list of tags associated with the inference profile.
     * */
    readonly tags?: Array<cdk.CfnTag>;
}
/**
 * Interface representing a vector collection
 */
export interface IVectorCollection extends cdk.IResource {
    /**
     * The name of the collection.
     */
    readonly collectionName: string;
    /**
     * The ID of the collection.
     */
    readonly collectionId: string;
    /**
     * The ARN of the collection.
     */
    readonly collectionArn: string;
    /**
     * Indicates whether standby replicas are enabled.
     */
    readonly standbyReplicas: VectorCollectionStandbyReplicas;
    /**
     * An IAM policy that allows API access to the collection.
     */
    readonly aossPolicy: iam.ManagedPolicy;
    /**
     * An OpenSearch Access Policy that allows access to the index.
     */
    readonly dataAccessPolicy: oss.CfnAccessPolicy;
    /**
     * Type of collection
     */
    readonly collectionType: VectorCollectionType;
    /**
     * Return the given named metric for this VectorCollection.
     *
     * @param metricName The name of the metric
     * @param props Properties for the metric
     */
    metric(metricName: string, props?: cloudwatch.MetricOptions): cloudwatch.Metric;
    /**
     * Metric for the number of search requests.
     *
     * @param props Properties for the metric
     */
    metricSearchRequestCount(props?: cloudwatch.MetricOptions): cloudwatch.Metric;
    /**
     * Metric for the number of index requests.
     *
     * @param props Properties for the metric
     */
    metricIndexRequestCount(props?: cloudwatch.MetricOptions): cloudwatch.Metric;
    /**
     * Metric for the search latency.
     *
     * @param props Properties for the metric
     */
    metricSearchLatency(props?: cloudwatch.MetricOptions): cloudwatch.Metric;
    /**
     * Metric for the 90th percentile search latency.
     *
     * @param props Properties for the metric
     */
    metricSearchLatencyP90(props?: cloudwatch.MetricOptions): cloudwatch.Metric;
}
/**
 * A new or imported vector collection.
 */
declare abstract class VectorCollectionBase extends cdk.Resource implements IVectorCollection {
    abstract readonly collectionName: string;
    abstract readonly collectionId: string;
    abstract readonly collectionArn: string;
    abstract readonly standbyReplicas: VectorCollectionStandbyReplicas;
    abstract readonly aossPolicy: iam.ManagedPolicy;
    abstract readonly dataAccessPolicy: oss.CfnAccessPolicy;
    abstract readonly collectionType: VectorCollectionType;
    metric(metricName: string, props?: cloudwatch.MetricOptions): cloudwatch.Metric;
    metricSearchRequestCount(props?: cloudwatch.MetricOptions): cloudwatch.Metric;
    metricIndexRequestCount(props?: cloudwatch.MetricOptions): cloudwatch.Metric;
    metricSearchLatency(props?: cloudwatch.MetricOptions): cloudwatch.Metric;
    metricSearchLatencyP90(props?: cloudwatch.MetricOptions): cloudwatch.Metric;
}
/**
 * Provides a vector search collection in Amazon OpenSearch Serverless.
 */
export declare class VectorCollection extends VectorCollectionBase {
    /**
     * Return metrics for all vector collections.
     */
    static metricAll(metricName: string, props?: cloudwatch.MetricOptions): cloudwatch.Metric;
    /**
     * Metric for the total number of search requests across all collections.
     */
    static metricAllSearchRequestCount(props?: cloudwatch.MetricOptions): cloudwatch.Metric;
    /**
     * Metric for the total number of index requests across all collections.
     */
    static metricAllIndexRequestCount(props?: cloudwatch.MetricOptions): cloudwatch.Metric;
    /**
     * Metric for average search latency across all collections.
     */
    static metricAllSearchLatency(props?: cloudwatch.MetricOptions): cloudwatch.Metric;
    /**
     * Import an existing collection using its attributes.
     * @param constructScope The parent creating construct.
     * @param constructId The construct's name.
     * @param attrs The collection attributes to use.
     */
    static fromCollectionAttributes(constructScope: Construct, constructId: string, attrs: VectorCollectionAttributes): IVectorCollection;
    readonly collectionName: string;
    readonly standbyReplicas: VectorCollectionStandbyReplicas;
    readonly collectionId: string;
    readonly collectionArn: string;
    readonly aossPolicy: iam.ManagedPolicy;
    readonly dataAccessPolicy: oss.CfnAccessPolicy;
    readonly collectionType: VectorCollectionType;
    readonly collectionEndpoint: string;
    readonly dashboardEndpoint: string;
    /**
     * Instance of CfnCollection.
     */
    private readonly _resource;
    /**
     * An OpenSearch Access Policy document that will become `dataAccessPolicy`.
     * @private
     */
    private dataAccessPolicyDocument;
    constructor(scope: Construct, id: string, props?: VectorCollectionProps);
    /**
       * Grants the specified role access to data in the collection.
       * @param grantee The role to grant access to.
       */
    grantDataAccess(grantee: iam.IRole): void;
}
export {};
