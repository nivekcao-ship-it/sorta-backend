"use strict";
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenFilterType = exports.TokenizerType = exports.CharacterFilterType = void 0;
var CharacterFilterType;
(function (CharacterFilterType) {
    CharacterFilterType["ICU_NORMALIZER"] = "icu_normalizer";
})(CharacterFilterType || (exports.CharacterFilterType = CharacterFilterType = {}));
// Currently we only support Kuromoji and ICU tokenizers.
// Also see the following link for more information regarding supported plugins:
// https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-genref.html#serverless-plugins
var TokenizerType;
(function (TokenizerType) {
    /**
     * Kuromoji tokenizer is used for Japanese text analysis and segmentation
     */
    TokenizerType["KUROMOJI_TOKENIZER"] = "kuromoji_tokenizer";
    /**
     * ICU tokenizer is used for Unicode text segmentation based on UAX #29 rules
     */
    TokenizerType["ICU_TOKENIZER"] = "icu_tokenizer";
    /**
     * Nori tokenizer is used for Korean text analysis and segmentation
     */
    TokenizerType["NORI_TOKENIZER"] = "nori_tokenizer";
})(TokenizerType || (exports.TokenizerType = TokenizerType = {}));
/**
 * TokenFilterType defines the available token filters for text analysis.
 * Token filters process tokens after they have been created by the tokenizer.
 * They can modify, add, or remove tokens based on specific rules.
 */
var TokenFilterType;
(function (TokenFilterType) {
    /**
     * Converts inflected Japanese words to their base form
     */
    TokenFilterType["KUROMOJI_BASEFORM"] = "kuromoji_baseform";
    /**
     * Tags words with their parts of speech in Japanese text analysis
     */
    TokenFilterType["KUROMOJI_PART_OF_SPEECH"] = "kuromoji_part_of_speech";
    /**
     * Reduces Japanese words to their stem form
     */
    TokenFilterType["KUROMOJI_STEMMER"] = "kuromoji_stemmer";
    /**
     * Normalizes CJK width differences by converting all characters to their fullwidth or halfwidth variants
     */
    TokenFilterType["CJK_WIDTH"] = "cjk_width";
    /**
     * Removes Japanese stop words from text
     */
    TokenFilterType["JA_STOP"] = "ja_stop";
    /**
     * Converts all characters to lowercase
     */
    TokenFilterType["LOWERCASE"] = "lowercase";
    /**
     * Applies Unicode folding rules for better text matching
     */
    TokenFilterType["ICU_FOLDING"] = "icu_folding";
    /**
     * Tags words with their parts of speech in Korean text analysis
     */
    TokenFilterType["NORI_PART_OF_SPEECH"] = "nori_part_of_speech";
    /**
     * Converts Korean text to its reading form
     */
    TokenFilterType["NORI_READINGFORM"] = "nori_readingform";
    /**
     * Normalizes Korean numbers to regular Arabic numbers
     */
    TokenFilterType["NORI_NUMBER"] = "nori_number";
})(TokenFilterType || (exports.TokenFilterType = TokenFilterType = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5hbHlzaXMtcGx1Z2lucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jZGstbGliL29wZW5zZWFyY2hzZXJ2ZXJsZXNzL2FuYWx5c2lzLXBsdWdpbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7OztHQVdHOzs7QUFFSCxJQUFZLG1CQUVYO0FBRkQsV0FBWSxtQkFBbUI7SUFDN0Isd0RBQWlDLENBQUE7QUFDbkMsQ0FBQyxFQUZXLG1CQUFtQixtQ0FBbkIsbUJBQW1CLFFBRTlCO0FBRUQseURBQXlEO0FBQ3pELGdGQUFnRjtBQUNoRixpSEFBaUg7QUFDakgsSUFBWSxhQWFYO0FBYkQsV0FBWSxhQUFhO0lBQ3ZCOztPQUVHO0lBQ0gsMERBQXlDLENBQUE7SUFDekM7O09BRUc7SUFDSCxnREFBK0IsQ0FBQTtJQUMvQjs7T0FFRztJQUNILGtEQUFpQyxDQUFBO0FBQ25DLENBQUMsRUFiVyxhQUFhLDZCQUFiLGFBQWEsUUFheEI7QUFFRDs7OztHQUlHO0FBQ0gsSUFBWSxlQXlDWDtBQXpDRCxXQUFZLGVBQWU7SUFDekI7O09BRUc7SUFDSCwwREFBdUMsQ0FBQTtJQUN2Qzs7T0FFRztJQUNILHNFQUFtRCxDQUFBO0lBQ25EOztPQUVHO0lBQ0gsd0RBQXFDLENBQUE7SUFDckM7O09BRUc7SUFDSCwwQ0FBdUIsQ0FBQTtJQUN2Qjs7T0FFRztJQUNILHNDQUFtQixDQUFBO0lBQ25COztPQUVHO0lBQ0gsMENBQXVCLENBQUE7SUFDdkI7O09BRUc7SUFDSCw4Q0FBMkIsQ0FBQTtJQUMzQjs7T0FFRztJQUNILDhEQUEyQyxDQUFBO0lBQzNDOztPQUVHO0lBQ0gsd0RBQXFDLENBQUE7SUFDckM7O09BRUc7SUFDSCw4Q0FBMkIsQ0FBQTtBQUM3QixDQUFDLEVBekNXLGVBQWUsK0JBQWYsZUFBZSxRQXlDMUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqICBDb3B5cmlnaHQgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKS4gWW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogIHdpdGggdGhlIExpY2Vuc2UuIEEgY29weSBvZiB0aGUgTGljZW5zZSBpcyBsb2NhdGVkIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiAgb3IgaW4gdGhlICdsaWNlbnNlJyBmaWxlIGFjY29tcGFueWluZyB0aGlzIGZpbGUuIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAnQVMgSVMnIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVNcbiAqICBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9uc1xuICogIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5leHBvcnQgZW51bSBDaGFyYWN0ZXJGaWx0ZXJUeXBlIHtcbiAgSUNVX05PUk1BTElaRVIgPSAnaWN1X25vcm1hbGl6ZXInLFxufVxuXG4vLyBDdXJyZW50bHkgd2Ugb25seSBzdXBwb3J0IEt1cm9tb2ppIGFuZCBJQ1UgdG9rZW5pemVycy5cbi8vIEFsc28gc2VlIHRoZSBmb2xsb3dpbmcgbGluayBmb3IgbW9yZSBpbmZvcm1hdGlvbiByZWdhcmRpbmcgc3VwcG9ydGVkIHBsdWdpbnM6XG4vLyBodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vb3BlbnNlYXJjaC1zZXJ2aWNlL2xhdGVzdC9kZXZlbG9wZXJndWlkZS9zZXJ2ZXJsZXNzLWdlbnJlZi5odG1sI3NlcnZlcmxlc3MtcGx1Z2luc1xuZXhwb3J0IGVudW0gVG9rZW5pemVyVHlwZSB7XG4gIC8qKlxuICAgKiBLdXJvbW9qaSB0b2tlbml6ZXIgaXMgdXNlZCBmb3IgSmFwYW5lc2UgdGV4dCBhbmFseXNpcyBhbmQgc2VnbWVudGF0aW9uXG4gICAqL1xuICBLVVJPTU9KSV9UT0tFTklaRVIgPSAna3Vyb21vamlfdG9rZW5pemVyJyxcbiAgLyoqXG4gICAqIElDVSB0b2tlbml6ZXIgaXMgdXNlZCBmb3IgVW5pY29kZSB0ZXh0IHNlZ21lbnRhdGlvbiBiYXNlZCBvbiBVQVggIzI5IHJ1bGVzXG4gICAqL1xuICBJQ1VfVE9LRU5JWkVSID0gJ2ljdV90b2tlbml6ZXInLFxuICAvKipcbiAgICogTm9yaSB0b2tlbml6ZXIgaXMgdXNlZCBmb3IgS29yZWFuIHRleHQgYW5hbHlzaXMgYW5kIHNlZ21lbnRhdGlvblxuICAgKi9cbiAgTk9SSV9UT0tFTklaRVIgPSAnbm9yaV90b2tlbml6ZXInLFxufVxuXG4vKipcbiAqIFRva2VuRmlsdGVyVHlwZSBkZWZpbmVzIHRoZSBhdmFpbGFibGUgdG9rZW4gZmlsdGVycyBmb3IgdGV4dCBhbmFseXNpcy5cbiAqIFRva2VuIGZpbHRlcnMgcHJvY2VzcyB0b2tlbnMgYWZ0ZXIgdGhleSBoYXZlIGJlZW4gY3JlYXRlZCBieSB0aGUgdG9rZW5pemVyLlxuICogVGhleSBjYW4gbW9kaWZ5LCBhZGQsIG9yIHJlbW92ZSB0b2tlbnMgYmFzZWQgb24gc3BlY2lmaWMgcnVsZXMuXG4gKi9cbmV4cG9ydCBlbnVtIFRva2VuRmlsdGVyVHlwZSB7XG4gIC8qKlxuICAgKiBDb252ZXJ0cyBpbmZsZWN0ZWQgSmFwYW5lc2Ugd29yZHMgdG8gdGhlaXIgYmFzZSBmb3JtXG4gICAqL1xuICBLVVJPTU9KSV9CQVNFRk9STSA9ICdrdXJvbW9qaV9iYXNlZm9ybScsXG4gIC8qKlxuICAgKiBUYWdzIHdvcmRzIHdpdGggdGhlaXIgcGFydHMgb2Ygc3BlZWNoIGluIEphcGFuZXNlIHRleHQgYW5hbHlzaXNcbiAgICovXG4gIEtVUk9NT0pJX1BBUlRfT0ZfU1BFRUNIID0gJ2t1cm9tb2ppX3BhcnRfb2Zfc3BlZWNoJyxcbiAgLyoqXG4gICAqIFJlZHVjZXMgSmFwYW5lc2Ugd29yZHMgdG8gdGhlaXIgc3RlbSBmb3JtXG4gICAqL1xuICBLVVJPTU9KSV9TVEVNTUVSID0gJ2t1cm9tb2ppX3N0ZW1tZXInLFxuICAvKipcbiAgICogTm9ybWFsaXplcyBDSksgd2lkdGggZGlmZmVyZW5jZXMgYnkgY29udmVydGluZyBhbGwgY2hhcmFjdGVycyB0byB0aGVpciBmdWxsd2lkdGggb3IgaGFsZndpZHRoIHZhcmlhbnRzXG4gICAqL1xuICBDSktfV0lEVEggPSAnY2prX3dpZHRoJyxcbiAgLyoqXG4gICAqIFJlbW92ZXMgSmFwYW5lc2Ugc3RvcCB3b3JkcyBmcm9tIHRleHRcbiAgICovXG4gIEpBX1NUT1AgPSAnamFfc3RvcCcsXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhbGwgY2hhcmFjdGVycyB0byBsb3dlcmNhc2VcbiAgICovXG4gIExPV0VSQ0FTRSA9ICdsb3dlcmNhc2UnLFxuICAvKipcbiAgICogQXBwbGllcyBVbmljb2RlIGZvbGRpbmcgcnVsZXMgZm9yIGJldHRlciB0ZXh0IG1hdGNoaW5nXG4gICAqL1xuICBJQ1VfRk9MRElORyA9ICdpY3VfZm9sZGluZycsXG4gIC8qKlxuICAgKiBUYWdzIHdvcmRzIHdpdGggdGhlaXIgcGFydHMgb2Ygc3BlZWNoIGluIEtvcmVhbiB0ZXh0IGFuYWx5c2lzXG4gICAqL1xuICBOT1JJX1BBUlRfT0ZfU1BFRUNIID0gJ25vcmlfcGFydF9vZl9zcGVlY2gnLFxuICAvKipcbiAgICogQ29udmVydHMgS29yZWFuIHRleHQgdG8gaXRzIHJlYWRpbmcgZm9ybVxuICAgKi9cbiAgTk9SSV9SRUFESU5HRk9STSA9ICdub3JpX3JlYWRpbmdmb3JtJyxcbiAgLyoqXG4gICAqIE5vcm1hbGl6ZXMgS29yZWFuIG51bWJlcnMgdG8gcmVndWxhciBBcmFiaWMgbnVtYmVyc1xuICAgKi9cbiAgTk9SSV9OVU1CRVIgPSAnbm9yaV9udW1iZXInLFxufVxuIl19