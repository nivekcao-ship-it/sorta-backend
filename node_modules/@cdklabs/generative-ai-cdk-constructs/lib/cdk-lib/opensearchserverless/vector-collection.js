"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.VectorCollection = exports.VectorCollectionType = exports.VectorCollectionStandbyReplicas = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const cdk = require("aws-cdk-lib");
const cloudwatch = require("aws-cdk-lib/aws-cloudwatch");
const iam = require("aws-cdk-lib/aws-iam");
const oss = require("aws-cdk-lib/aws-opensearchserverless");
const utils_1 = require("../../common/helpers/utils");
/**
 * Configuration for standby replicas in a vector collection.
 */
var VectorCollectionStandbyReplicas;
(function (VectorCollectionStandbyReplicas) {
    /**
     * Enable standby replicas for high availability
     */
    VectorCollectionStandbyReplicas["ENABLED"] = "ENABLED";
    /**
     * Disable standby replicas to reduce costs
     */
    VectorCollectionStandbyReplicas["DISABLED"] = "DISABLED";
})(VectorCollectionStandbyReplicas || (exports.VectorCollectionStandbyReplicas = VectorCollectionStandbyReplicas = {}));
/**
 * The type of collection.
 */
var VectorCollectionType;
(function (VectorCollectionType) {
    /**
     * Search – Full-text search that powers applications in your internal networks (content management systems, legal documents) and internet-facing applications,
     * such as ecommerce website search and content search.
     */
    VectorCollectionType["SEARCH"] = "SEARCH";
    /**
     * Time series – The log analytics segment that focuses on analyzing large volumes of semi-structured,
     * machine-generated data in real-time for operational, security, user behavior, and business insights.
     */
    VectorCollectionType["TIMESERIES"] = "TIMESERIES";
    /**
     * Vector search – Semantic search on vector embeddings that simplifies vector data management and powers machine learning (ML) augmented search experiences and generative AI applications,
     * such as chatbots, personal assistants, and fraud detection.
     */
    VectorCollectionType["VECTORSEARCH"] = "VECTORSEARCH";
})(VectorCollectionType || (exports.VectorCollectionType = VectorCollectionType = {}));
/**
 * A new or imported vector collection.
 */
class VectorCollectionBase extends cdk.Resource {
    metric(metricName, props) {
        return new cloudwatch.Metric({
            namespace: 'AWS/AOSS',
            metricName,
            dimensionsMap: {
                CollectionId: this.collectionId,
            },
            ...props,
        });
    }
    metricSearchRequestCount(props) {
        return this.metric('SearchRequestCount', props);
    }
    metricIndexRequestCount(props) {
        return this.metric('IndexRequestCount', props);
    }
    metricSearchLatency(props) {
        return this.metric('SearchLatency', { statistic: 'Average', ...props });
    }
    metricSearchLatencyP90(props) {
        return this.metric('SearchLatency', { statistic: 'p90', ...props });
    }
}
/**
 * Provides a vector search collection in Amazon OpenSearch Serverless.
 */
class VectorCollection extends VectorCollectionBase {
    /**
     * Return metrics for all vector collections.
     */
    static metricAll(metricName, props) {
        return new cloudwatch.Metric({
            namespace: 'AWS/AOSS',
            metricName,
            statistic: 'Sum',
            ...props,
        });
    }
    /**
     * Metric for the total number of search requests across all collections.
     */
    static metricAllSearchRequestCount(props) {
        return this.metricAll('SearchRequestCount', props);
    }
    /**
     * Metric for the total number of index requests across all collections.
     */
    static metricAllIndexRequestCount(props) {
        return this.metricAll('IndexRequestCount', props);
    }
    /**
     * Metric for average search latency across all collections.
     */
    static metricAllSearchLatency(props) {
        return this.metricAll('SearchLatency', {
            statistic: 'Average',
            ...props,
        });
    }
    /**
     * Import an existing collection using its attributes.
     * @param constructScope The parent creating construct.
     * @param constructId The construct's name.
     * @param attrs The collection attributes to use.
     */
    static fromCollectionAttributes(constructScope, constructId, attrs) {
        class Import extends VectorCollectionBase {
            constructor(scope, id) {
                super(scope, id);
                this.collectionArn = attrs.collectionArn;
                this.collectionId = attrs.collectionId;
                this.collectionName = attrs.collectionName;
                this.standbyReplicas = attrs.standbyReplicas;
                this.collectionType = attrs.collectionType;
                this.aossPolicy = new iam.ManagedPolicy(this, 'ImportedAOSSPolicy', {
                    statements: [
                        new iam.PolicyStatement({
                            effect: iam.Effect.ALLOW,
                            actions: ['aoss:APIAccessAll'],
                            resources: [this.collectionArn],
                        }),
                    ],
                });
                this.dataAccessPolicy = new oss.CfnAccessPolicy(this, 'ImportedDataAccessPolicy', {
                    name: (0, utils_1.generatePhysicalNameV2)(this, 'DataAccessPolicy', { maxLength: 32, lower: true }),
                    type: 'data',
                    policy: '[]',
                });
            }
        }
        return new Import(constructScope, constructId);
    }
    constructor(scope, id, props) {
        super(scope, id);
        /**
         * An OpenSearch Access Policy document that will become `dataAccessPolicy`.
         * @private
         */
        this.dataAccessPolicyDocument = [];
        this.collectionName = props?.collectionName ?? (0, utils_1.generatePhysicalNameV2)(this, 'VectorStore', { maxLength: 32, lower: true });
        this.standbyReplicas = props?.standbyReplicas ?? VectorCollectionStandbyReplicas.ENABLED;
        this.collectionType = props?.collectionType ?? VectorCollectionType.VECTORSEARCH;
        const encryptionPolicyName = (0, utils_1.generatePhysicalNameV2)(this, 'EncryptionPolicy', { maxLength: 32, lower: true });
        const encryptionPolicy = new oss.CfnSecurityPolicy(this, 'EncryptionPolicy', {
            name: encryptionPolicyName,
            type: 'encryption',
            policy: JSON.stringify({
                Rules: [
                    {
                        ResourceType: 'collection',
                        Resource: [`collection/${this.collectionName}`],
                    },
                ],
                AWSOwnedKey: true,
            }),
        });
        const networkPolicyName = (0, utils_1.generatePhysicalNameV2)(this, 'NetworkPolicy', { maxLength: 32, lower: true });
        const networkPolicy = new oss.CfnSecurityPolicy(this, 'NetworkPolicy', {
            name: networkPolicyName,
            type: 'network',
            policy: JSON.stringify([
                {
                    Rules: [
                        {
                            ResourceType: 'collection',
                            Resource: [`collection/${this.collectionName}`],
                        },
                        {
                            ResourceType: 'dashboard',
                            Resource: [`collection/${this.collectionName}`],
                        },
                    ],
                    AllowFromPublic: true,
                },
            ]),
        });
        this._resource = new oss.CfnCollection(this, 'VectorCollection', {
            name: this.collectionName,
            type: this.collectionType,
            standbyReplicas: this.standbyReplicas,
            description: props?.description,
            tags: props?.tags,
        });
        this.collectionArn = this._resource.attrArn;
        this.collectionId = this._resource.attrId;
        this.collectionEndpoint = this._resource.attrCollectionEndpoint;
        this.dashboardEndpoint = this._resource.attrDashboardEndpoint;
        if (props?.customAossPolicy) {
            this.aossPolicy = props.customAossPolicy;
        }
        else {
            this.aossPolicy = new iam.ManagedPolicy(this, 'AOSSApiAccessAll', {
                statements: [
                    new iam.PolicyStatement({
                        effect: iam.Effect.ALLOW,
                        actions: [
                            'aoss:APIAccessAll',
                        ],
                        resources: [this._resource.attrArn],
                    }),
                ],
            });
        }
        this._resource.node.addDependency(encryptionPolicy);
        this._resource.node.addDependency(networkPolicy);
        const isDataAccessPolicyNotEmpty = new cdk.CfnCondition(this, 'IsDataAccessPolicyNotEmpty', {
            expression: cdk.Fn.conditionNot(cdk.Fn.conditionEquals(0, cdk.Lazy.number({
                produce: () => this.dataAccessPolicyDocument.length,
            }))),
        });
        const dataAccessPolicyName = (0, utils_1.generatePhysicalNameV2)(this, 'DataAccessPolicy', { maxLength: 32, lower: true });
        this.dataAccessPolicy = new oss.CfnAccessPolicy(this, 'DataAccessPolicy', {
            name: dataAccessPolicyName,
            type: 'data',
            policy: cdk.Lazy.string({
                produce: () => JSON.stringify(this.dataAccessPolicyDocument),
            }),
        });
        this.dataAccessPolicy.cfnOptions.condition = isDataAccessPolicyNotEmpty;
        this.node.addValidation({
            validate: () => {
                const errors = [];
                if (this.collectionName) {
                    if (!/^[a-z0-9-]+$/.test(this.collectionName)) {
                        errors.push('Collection name must contain only lowercase letters, numbers, and hyphens');
                    }
                    if (this.collectionName.length < 3 || this.collectionName.length > 32) {
                        errors.push('Collection name must be between 3 and 32 characters');
                    }
                }
                return errors;
            },
        });
        cdk.Tags.of(this).add('Name', this.collectionName);
        cdk.Tags.of(this).add('Type', 'VectorCollection');
    }
    /**
       * Grants the specified role access to data in the collection.
       * @param grantee The role to grant access to.
       */
    grantDataAccess(grantee) {
        this.dataAccessPolicyDocument.push({
            Rules: [
                {
                    Resource: [`collection/${this.collectionName}`],
                    Permission: [
                        'aoss:DescribeCollectionItems',
                        'aoss:CreateCollectionItems',
                        'aoss:UpdateCollectionItems',
                    ],
                    ResourceType: 'collection',
                },
                {
                    Resource: [`index/${this.collectionName}/*`],
                    Permission: [
                        'aoss:UpdateIndex',
                        'aoss:DescribeIndex',
                        'aoss:ReadDocument',
                        'aoss:WriteDocument',
                        'aoss:CreateIndex',
                    ],
                    ResourceType: 'index',
                },
            ],
            Principal: [
                grantee.roleArn,
            ],
            Description: '',
        });
        grantee.addManagedPolicy(this.aossPolicy);
    }
}
exports.VectorCollection = VectorCollection;
_a = JSII_RTTI_SYMBOL_1;
VectorCollection[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.opensearchserverless.VectorCollection", version: "0.1.309" };
//# sourceMappingURL=data:application/json;base64,