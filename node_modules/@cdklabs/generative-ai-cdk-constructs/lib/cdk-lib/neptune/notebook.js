"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.NeptuneGraphNotebook = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const aws_cdk_lib_1 = require("aws-cdk-lib");
const ec2 = require("aws-cdk-lib/aws-ec2");
const iam = require("aws-cdk-lib/aws-iam");
const sagemaker = require("aws-cdk-lib/aws-sagemaker");
const utils_1 = require("../../common/helpers/utils");
/**
 * Creates a Neptune Graph Notebook for a given graph.
 *
 * A Neptune Graph Notebook provides:
 * - Web-based interactive environment for querying and visualizing graph data
 * - Support for multiple query languages:
 *   - OpenCypher for property graph queries
 *   - Gremlin for traversal-based queries
 *   - SPARQL for RDF graph queries
 * - Built-in visualization capabilities for exploring graph relationships
 * - Sample notebooks and tutorials to help you get started
 * - Integration with popular data science libraries   *
 * This option is only supported when `publicConnectivity` is set to `true`. For private graphs,
 * you should create your own notebook deployment using the `NeptuneGraphNotebook` Construct and
 * configure the appropriate VPC and security group settings.
 *
 * **Note: Creating a notebook will incur additional AWS costs for the notebook instance.**
 *
 * @see https://docs.aws.amazon.com/neptune/latest/userguide/graph-notebooks.html
 */
class NeptuneGraphNotebook extends aws_cdk_lib_1.Resource {
    // ------------------------------------------------------
    // Attributes
    // ------------------------------------------------------
    constructor(scope, id, props) {
        super(scope, id);
        const region = aws_cdk_lib_1.Stack.of(scope).region;
        // Set properties
        this.volumeSize = props.volumeSize ?? aws_cdk_lib_1.Size.gibibytes(5);
        this.instanceType =
            props.instanceType ?? ec2.InstanceType.of(ec2.InstanceClass.T3, ec2.InstanceSize.MEDIUM);
        // Create lifecycle configuration for Neptune notebook
        this.lifecycleConfig = new sagemaker.CfnNotebookInstanceLifecycleConfig(this, 'NeptuneNotebookLifecycle', {
            onStart: [
                {
                    content: aws_cdk_lib_1.Fn.base64(`#!/bin/bash
sudo -u ec2-user -i <<'EOF'

echo "export GRAPH_NOTEBOOK_AUTH_MODE=IAM" >> ~/.bashrc
echo "export GRAPH_NOTEBOOK_SSL=True" >> ~/.bashrc
echo "export GRAPH_NOTEBOOK_SERVICE=neptune-graph" >> ~/.bashrc
echo "export GRAPH_NOTEBOOK_HOST=${props.graph.graphEndpoint}" >> ~/.bashrc
echo "export GRAPH_NOTEBOOK_PORT=8182" >> ~/.bashrc
echo "export NEPTUNE_LOAD_FROM_S3_ROLE_ARN=" >> ~/.bashrc
echo "export AWS_REGION=${region}" >> ~/.bashrc

aws s3 cp s3://aws-neptune-notebook-${region}/graph_notebook.tar.gz /tmp/graph_notebook.tar.gz
rm -rf /tmp/graph_notebook
tar -zxvf /tmp/graph_notebook.tar.gz -C /tmp
/tmp/graph_notebook/install.sh

EOF`),
                },
            ],
        });
        // Creates a role associated to the notebook instance
        this.role = new iam.Role(this, 'NeptuneNotebookRole', {
            assumedBy: new iam.ServicePrincipal('sagemaker.amazonaws.com'),
            managedPolicies: [
                iam.ManagedPolicy.fromAwsManagedPolicyName('AmazonSageMakerFullAccess'),
                // Allows downloading the graph_notebook package
                iam.ManagedPolicy.fromAwsManagedPolicyName('AmazonS3ReadOnlyAccess'),
            ],
        });
        // Allows the notebook to access the graph
        props.graph.grantFullAccess(this.role);
        // ------------------------------------------------------
        // Set properties or defaults
        // ------------------------------------------------------
        this.__resource = new sagemaker.CfnNotebookInstance(this, 'Resource', {
            instanceType: `ml.${this.instanceType.toString()}`,
            roleArn: this.role.roleArn,
            lifecycleConfigName: this.lifecycleConfig.attrNotebookInstanceLifecycleConfigName,
            notebookInstanceName: (0, utils_1.generatePhysicalNameV2)(this, 'aws-neptune-notebook', {
                separator: '-',
                maxLength: 63,
                lower: true,
            }),
            volumeSizeInGb: this.volumeSize.toGibibytes(),
            platformIdentifier: 'notebook-al2-v2',
            rootAccess: 'Disabled',
            instanceMetadataServiceConfiguration: {
                minimumInstanceMetadataServiceVersion: '2',
            },
            directInternetAccess: 'Enabled',
            tags: [
                {
                    key: 'aws-neptune-graph-id',
                    value: props.graph.graphId,
                },
            ],
        });
        this.graphExplorerEndpoint = `https://${this.__resource.attrNotebookInstanceName}.notebook.${region}.sagemaker.aws/proxy/9250/explorer/`;
        this.jupyterLabEndpoint = `https://${this.__resource.attrNotebookInstanceName}.notebook.${region}.sagemaker.aws/lab`;
        // Output Graph Explorer Endpoint
        new aws_cdk_lib_1.CfnOutput(this, 'GraphExplorerEndpoint', {
            value: this.graphExplorerEndpoint,
        });
    }
}
exports.NeptuneGraphNotebook = NeptuneGraphNotebook;
_a = JSII_RTTI_SYMBOL_1;
NeptuneGraphNotebook[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.neptune.NeptuneGraphNotebook", version: "0.1.309" };
//# sourceMappingURL=data:application/json;base64,