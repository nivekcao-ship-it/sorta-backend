"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.NeptuneGraph = exports.NeptuneGraphBase = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_cloudwatch_1 = require("aws-cdk-lib/aws-cloudwatch");
const iam = require("aws-cdk-lib/aws-iam");
const neptunegraph = require("aws-cdk-lib/aws-neptunegraph");
const notebook_1 = require("./notebook");
const utils_1 = require("../../common/helpers/utils");
/******************************************************************************
 *                            BASE CLASS
 *****************************************************************************/
/**
 * Abstract base class for a Neptune Graph.
 * Contains methods and attributes valid for Graphs either created with CDK or imported.
 */
class NeptuneGraphBase extends aws_cdk_lib_1.Resource {
    /**
     * Grant the given principal identity permissions to perform actions on this agent alias.
     */
    grant(grantee, actions) {
        return iam.Grant.addToPrincipal({
            grantee,
            actions,
            resourceArns: [this.graphArn],
            scope: this,
        });
    }
    /**
     * Grant the given identity full access to the Graph.
     */
    grantFullAccess(grantee) {
        return this.grant(grantee, ['neptune-graph:*']);
    }
    /**
     * Grant the given identity the permissions to query the Graph.
     */
    grantQuery(grantee) {
        return this.grant(grantee, [
            'neptune-graph:GetGraph',
            'neptune-graph:ReadDataViaQuery',
            'neptune-graph:WriteDataViaQuery',
            'neptune-graph:DeleteDataViaQuery',
            'neptune-graph:GetQueryStatus',
            'neptune-graph:CancelQuery',
        ]);
    }
    /**
     * Grant the given identity the permissions to read the Graph.
     */
    grantReadOnly(grantee) {
        return this.grant(grantee, [
            'neptune-graph:Get*',
            'neptune-graph:List*',
            'neptune-graph:Read*',
        ]);
    }
    /**
     * Grant the given identity the permissions to export the graph into columnar structured .csv and .parquet files.
     */
    grantExportTask(grantee) {
        return this.grant(grantee, [
            'neptune-graph:GetExportTask',
            'neptune-graph:ListExportTasks',
            'neptune-graph:StartExportTask',
            'neptune-graph:CancelExportTask',
        ]);
    }
    /**
     * Return the given named metric for this graph.
     *
     * By default, the metric will be calculated as a sum over a period of 5 minutes.
     * You can customize this by using the `statistic` and `period` properties.
     */
    metric(metricName, props) {
        const metricProps = {
            namespace: 'AWS/Neptune',
            metricName,
            dimensionsMap: { GraphIdentifier: this.graphId },
            ...props,
        };
        return this.configureMetric(metricProps);
    }
    /**
     * Returns metric for number of queued requests per second
     */
    metricNumQueuedRequestsPerSec(props) {
        return this.metric('NumQueuedRequestsPerSec', props);
    }
    /**
     * Returns metric for number of OpenCypher requests per second
     */
    metricNumOpenCypherRequestsPerSec(props) {
        return this.metric('NumOpenCypherRequestsPerSec', props);
    }
    /**
     * Returns metric for number of OpenCypher client errors per second
     */
    metricNumOpenCypherClientErrorsPerSec(props) {
        return this.metric('NumOpenCypherClientErrorsPerSec', props);
    }
    /**
     * Returns metric for number of OpenCypher server errors per second
     */
    metricNumOpenCypherServerErrorsPerSec(props) {
        return this.metric('NumOpenCypherServerErrorsPerSec', props);
    }
    /**
     * Returns metric for number of edge properties
     */
    metricNumEdgeProperties(props) {
        return this.metric('NumEdgeProperties', props);
    }
    /**
     * Returns metric for number of edges
     */
    metricNumEdges(props) {
        return this.metric('NumEdges', props);
    }
    /**
     * Returns metric for CPU utilization
     */
    metricCPUUtilization(props) {
        return this.metric('CPUUtilization', props);
    }
    /**
     * Returns metric for number of vectors
     */
    metricNumVectors(props) {
        return this.metric('NumVectors', props);
    }
    /**
     * Returns metric for number of vertex properties
     */
    metricNumVertexProperties(props) {
        return this.metric('NumVertexProperties', props);
    }
    /**
     * Returns metric for graph size in bytes
     */
    metricGraphSizeBytes(props) {
        return this.metric('GraphSizeBytes', props);
    }
    /**
     * Returns metric for graph storage usage percentage
     */
    metricGraphStorageUsagePercent(props) {
        return this.metric('GraphStorageUsagePercent', props);
    }
    configureMetric(props) {
        return new aws_cloudwatch_1.Metric({
            ...props,
            region: props?.region ?? this.stack.region,
            account: props?.account ?? this.stack.account,
        });
    }
    /**
     * Creates a Neptune Graph Notebook for the graph. Defaults to a ml.t3.medium instance type.
     * **Note: Creating a notebook will incur additional AWS costs for the notebook instance.**
     */
    createNotebook(params) {
        return new notebook_1.NeptuneGraphNotebook(this, 'Notebook', {
            ...params,
            graph: this,
        });
    }
}
exports.NeptuneGraphBase = NeptuneGraphBase;
_a = JSII_RTTI_SYMBOL_1;
NeptuneGraphBase[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.neptune.NeptuneGraphBase", version: "0.1.309" };
/******************************************************************************
 *                        NEW CONSTRUCT DEFINITION
 *****************************************************************************/
/**
 * Class to create an L2 Neptune Analytics Graph with CDK.
 * @cloudformationResource AWS::NeptuneGraph::Graph
 */
class NeptuneGraph extends NeptuneGraphBase {
    // ------------------------------------------------------
    // Import Methods
    // ------------------------------------------------------
    static fromGraphId(scope, id, graphId) {
        class Import extends NeptuneGraphBase {
            constructor() {
                super(...arguments);
                this.graphId = graphId;
                this.graphArn = aws_cdk_lib_1.Stack.of(scope).formatArn({
                    service: 'neptune-graph',
                    resource: 'graph',
                    resourceName: graphId,
                    arnFormat: aws_cdk_lib_1.ArnFormat.SLASH_RESOURCE_NAME,
                });
                this.graphEndpoint = `${this.graphId}.${aws_cdk_lib_1.Stack.of(scope).region}.neptune-graph.amazonaws.com`;
            }
        }
        return new Import(scope, id);
    } // ------------------------------------------------------
    constructor(scope, id, props) {
        super(scope, id);
        // ------------------------------------------------------
        // Set properties or defaults
        // ------------------------------------------------------
        this.provisionedMemory = props.provisionedMemoryNCUs ?? 16;
        this.graphName =
            props.graphName ??
                (0, utils_1.generatePhysicalNameV2)(this, 'bedrock-kb-graph', {
                    separator: '-',
                    maxLength: 63,
                    lower: true,
                });
        this.publicConnectivity = props.publicConnectivity ?? true;
        this.replicaCount = props.replicaCount ?? 0;
        // ------------------------------------------------------
        // L1 Instantiation
        // ------------------------------------------------------
        this._resource = new neptunegraph.CfnGraph(this, 'Resource', {
            provisionedMemory: this.provisionedMemory,
            graphName: this.graphName,
            publicConnectivity: this.publicConnectivity,
            replicaCount: this.replicaCount,
            vectorSearchConfiguration: props.vectorSearchDimension
                ? {
                    vectorSearchDimension: props.vectorSearchDimension,
                }
                : undefined,
            deletionProtection: props.deletionProtection ?? false,
        });
        this.graphArn = this._resource.attrGraphArn;
        this.graphId = this._resource.attrGraphId;
        this.graphEndpoint = this._resource.attrEndpoint;
    }
}
exports.NeptuneGraph = NeptuneGraph;
_b = JSII_RTTI_SYMBOL_1;
NeptuneGraph[_b] = { fqn: "@cdklabs/generative-ai-cdk-constructs.neptune.NeptuneGraph", version: "0.1.309" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JhcGguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY2RrLWxpYi9uZXB0dW5lL2dyYXBoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7Ozs7Ozs7O0dBV0c7QUFFSCw2Q0FBb0U7QUFDcEUsK0RBQWdGO0FBQ2hGLDJDQUEyQztBQUMzQyw2REFBNkQ7QUFFN0QseUNBQTZFO0FBQzdFLHNEQUFvRTtBQXdLcEU7OytFQUUrRTtBQUMvRTs7O0dBR0c7QUFDSCxNQUFzQixnQkFBaUIsU0FBUSxzQkFBUTtJQU1yRDs7T0FFRztJQUNJLEtBQUssQ0FBQyxPQUF1QixFQUFFLE9BQWlCO1FBQ3JELE9BQU8sR0FBRyxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUM7WUFDOUIsT0FBTztZQUNQLE9BQU87WUFDUCxZQUFZLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1lBQzdCLEtBQUssRUFBRSxJQUFJO1NBQ1osQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVEOztPQUVHO0lBQ0ksZUFBZSxDQUFDLE9BQXVCO1FBQzVDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVEOztPQUVHO0lBQ0ksVUFBVSxDQUFDLE9BQXVCO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUU7WUFDekIsd0JBQXdCO1lBQ3hCLGdDQUFnQztZQUNoQyxpQ0FBaUM7WUFDakMsa0NBQWtDO1lBQ2xDLDhCQUE4QjtZQUM5QiwyQkFBMkI7U0FDNUIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVEOztPQUVHO0lBQ0ksYUFBYSxDQUFDLE9BQXVCO1FBQzFDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUU7WUFDekIsb0JBQW9CO1lBQ3BCLHFCQUFxQjtZQUNyQixxQkFBcUI7U0FDdEIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJ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QUUsa0JBQWtCLEVBQUU7b0JBQy9DLFNBQVMsRUFBRSxHQUFHO29CQUNkLFNBQVMsRUFBRSxFQUFFO29CQUNiLEtBQUssRUFBRSxJQUFJO2lCQUNaLENBQUMsQ0FBQztRQUNMLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxLQUFLLENBQUMsa0JBQWtCLElBQUksSUFBSSxDQUFDO1FBQzNELElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDLFlBQVksSUFBSSxDQUFDLENBQUM7UUFFNUMseURBQXlEO1FBQ3pELG1CQUFtQjtRQUNuQix5REFBeUQ7UUFDekQsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLFlBQVksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRTtZQUMzRCxpQkFBaUIsRUFBRSxJQUFJLENBQUMsaUJBQWlCO1lBQ3pDLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUztZQUN6QixrQkFBa0IsRUFBRSxJQUFJLENBQUMsa0JBQWtCO1lBQzNDLFlBQVksRUFBRSxJQUFJLENBQUMsWUFBWTtZQUMvQix5QkFBeUIsRUFBRSxLQUFLLENBQUMscUJBQXFCO2dCQUNwRCxDQUFDLENBQUM7b0JBQ0EscUJBQXFCLEVBQUUsS0FBSyxDQUFDLHFCQUFxQjtpQkFDbkQ7Z0JBQ0QsQ0FBQyxDQUFDLFNBQVM7WUFDYixrQkFBa0IsRUFBRSxLQUFLLENBQUMsa0JBQWtCLElBQUksS0FBSztTQUN0RCxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDO1FBQzVDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUM7UUFDMUMsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQztJQUNuRCxDQUFDOztBQXBFSCxvQ0FxRUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqICBDb3B5cmlnaHQgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKS4gWW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogIHdpdGggdGhlIExpY2Vuc2UuIEEgY29weSBvZiB0aGUgTGljZW5zZSBpcyBsb2NhdGVkIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiAgb3IgaW4gdGhlICdsaWNlbnNlJyBmaWxlIGFjY29tcGFueWluZyB0aGlzIGZpbGUuIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAnQVMgSVMnIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVNcbiAqICBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9uc1xuICogIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBBcm5Gb3JtYXQsIElSZXNvdXJjZSwgUmVzb3VyY2UsIFN0YWNrIH0gZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0IHsgTWV0cmljLCBNZXRyaWNPcHRpb25zLCBNZXRyaWNQcm9wcyB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1jbG91ZHdhdGNoJztcbmltcG9ydCAqIGFzIGlhbSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtaWFtJztcbmltcG9ydCAqIGFzIG5lcHR1bmVncmFwaCBmcm9tICdhd3MtY2RrLWxpYi9hd3MtbmVwdHVuZWdyYXBoJztcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHsgTmVwdHVuZUdyYXBoTm90ZWJvb2ssIE5lcHR1bmVHcmFwaE5vdGVib29rUHJvcHMgfSBmcm9tICcuL25vdGVib29rJztcbmltcG9ydCB7IGdlbmVyYXRlUGh5c2ljYWxOYW1lVjIgfSBmcm9tICcuLi8uLi9jb21tb24vaGVscGVycy91dGlscyc7XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ09NTU9OXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKipcbiAqIEludGVyZmFjZSByZXByZXNlbnRpbmcgYSBOZXB0dW5lIEdyYXBoIGRhdGFiYXNlLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElOZXB0dW5lR3JhcGggZXh0ZW5kcyBJUmVzb3VyY2Uge1xuICAvKipcbiAgICogVGhlIE5lcHR1bmUgR3JhcGggSWRlbnRpZmllci5cbiAgICogQGV4YW1wbGUgJ2ctMTJhM2JjZGVmNCdcbiAgICovXG4gIHJlYWRvbmx5IGdyYXBoSWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIE5lcHR1bmUgR3JhcGggQVJOLlxuICAgKiBAZXhhbXBsZSAnYXJuOmF3czpuZXB0dW5lLWdyYXBoOnVzLWVhc3QtMToxMTExMjIyMjMzMzM6Z3JhcGgvZy0xMmEzYmNkZWY0J1xuICAgKi9cbiAgcmVhZG9ubHkgZ3JhcGhBcm46IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIE5lcHR1bmUgR3JhcGggZW5kcG9pbnQuXG4gICAqIEBleGFtcGxlICdnLTEyYTNiY2RlZjQudXMtZWFzdC0xLm5lcHR1bmUtZ3JhcGguYW1hem9uYXdzLmNvbSdcbiAgICovXG4gIHJlYWRvbmx5IGdyYXBoRW5kcG9pbnQ6IHN0cmluZztcblxuICAvKipcbiAgICogR3JhbnQgdGhlIGdpdmVuIHByaW5jaXBhbCBpZGVudGl0eSBwZXJtaXNzaW9ucyB0byBwZXJmb3JtIGFjdGlvbnMgb24gdGhpcyBhZ2VudCBhbGlhcy5cbiAgICovXG4gIGdyYW50KGdyYW50ZWU6IGlhbS5JR3JhbnRhYmxlLCBhY3Rpb25zOiBzdHJpbmdbXSk6IGlhbS5HcmFudDtcblxuICAvKipcbiAgICogR3JhbnQgdGhlIGdpdmVuIGlkZW50aXR5IGZ1bGwgYWNjZXNzIHRvIHRoZSBHcmFwaC5cbiAgICovXG4gIGdyYW50RnVsbEFjY2VzcyhncmFudGVlOiBpYW0uSUdyYW50YWJsZSk6IGlhbS5HcmFudDtcblxuICAvKipcbiAgICogR3JhbnQgdGhlIGdpdmVuIGlkZW50aXR5IHRoZSBwZXJtaXNzaW9ucyB0byBxdWVyeSB0aGUgR3JhcGguXG4gICAqL1xuICBncmFudFF1ZXJ5KGdyYW50ZWU6IGlhbS5JR3JhbnRhYmxlKTogaWFtLkdyYW50O1xuXG4gIC8qKlxuICAgKiBHcmFudCB0aGUgZ2l2ZW4gaWRlbnRpdHkgdGhlIHBlcm1pc3Npb25zIHRvIHJlYWQgdGhlIEdyYXBoLlxuICAgKi9cbiAgZ3JhbnRSZWFkT25seShncmFudGVlOiBpYW0uSUdyYW50YWJsZSk6IGlhbS5HcmFudDtcblxuICAvKipcbiAgICogR3JhbnQgdGhlIGdpdmVuIGlkZW50aXR5IHRoZSBwZXJtaXNzaW9ucyB0byBleHBvcnQgdGhlIGdyYXBoIGludG8gY29sdW1uYXIgc3RydWN0dXJlZCAuY3N2IGFuZCAucGFycXVldCBmaWxlcy5cbiAgICovXG4gIGdyYW50RXhwb3J0VGFzayhncmFudGVlOiBpYW0uSUdyYW50YWJsZSk6IGlhbS5HcmFudDtcblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBnaXZlbiBuYW1lZCBtZXRyaWMgZm9yIHRoaXMgZ3VhcmRyYWlsLlxuICAgKi9cbiAgbWV0cmljKG1ldHJpY05hbWU6IHN0cmluZywgcHJvcHM/OiBNZXRyaWNPcHRpb25zKTogTWV0cmljO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIG1ldHJpYyBmb3IgbnVtYmVyIG9mIHF1ZXVlZCByZXF1ZXN0cyBwZXIgc2Vjb25kXG4gICAqL1xuICBtZXRyaWNOdW1RdWV1ZWRSZXF1ZXN0c1BlclNlYyhwcm9wcz86IE1ldHJpY09wdGlvbnMpOiBNZXRyaWM7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgbWV0cmljIGZvciBudW1iZXIgb2YgT3BlbkN5cGhlciByZXF1ZXN0cyBwZXIgc2Vjb25kXG4gICAqL1xuICBtZXRyaWNOdW1PcGVuQ3lwaGVyUmVxdWVzdHNQZXJTZWMocHJvcHM/OiBNZXRyaWNPcHRpb25zKTogTWV0cmljO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIG1ldHJpYyBmb3IgbnVtYmVyIG9mIE9wZW5DeXBoZXIgY2xpZW50IGVycm9ycyBwZXIgc2Vjb25kXG4gICAqL1xuICBtZXRyaWNOdW1PcGVuQ3lwaGVyQ2xpZW50RXJyb3JzUGVyU2VjKHByb3BzPzogTWV0cmljT3B0aW9ucyk6IE1ldHJpYztcblxuICAvKipcbiAgICogUmV0dXJucyBtZXRyaWMgZm9yIG51bWJlciBvZiBPcGVuQ3lwaGVyIHNlcnZlciBlcnJvcnMgcGVyIHNlY29uZFxuICAgKi9cbiAgbWV0cmljTnVtT3BlbkN5cGhlclNlcnZlckVycm9yc1BlclNlYyhwcm9wcz86IE1ldHJpY09wdGlvbnMpOiBNZXRyaWM7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgbWV0cmljIGZvciBudW1iZXIgb2YgZWRnZSBwcm9wZXJ0aWVzXG4gICAqL1xuICBtZXRyaWNOdW1FZGdlUHJvcGVydGllcyhwcm9wcz86IE1ldHJpY09wdGlvbnMpOiBNZXRyaWM7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgbWV0cmljIGZvciBudW1iZXIgb2YgZWRnZXNcbiAgICovXG4gIG1ldHJpY051bUVkZ2VzKHByb3BzPzogTWV0cmljT3B0aW9ucyk6IE1ldHJpYztcblxuICAvKipcbiAgICogUmV0dXJucyBtZXRyaWMgZm9yIENQVSB1dGlsaXphdGlvblxuICAgKi9cbiAgbWV0cmljQ1BVVXRpbGl6YXRpb24ocHJvcHM/OiBNZXRyaWNPcHRpb25zKTogTWV0cmljO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIG1ldHJpYyBmb3IgbnVtYmVyIG9mIHZlY3RvcnNcbiAgICovXG4gIG1ldHJpY051bVZlY3RvcnMocHJvcHM/OiBNZXRyaWNPcHRpb25zKTogTWV0cmljO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIG1ldHJpYyBmb3IgbnVtYmVyIG9mIHZlcnRleCBwcm9wZXJ0aWVzXG4gICAqL1xuICBtZXRyaWNOdW1WZXJ0ZXhQcm9wZXJ0aWVzKHByb3BzPzogTWV0cmljT3B0aW9ucyk6IE1ldHJpYztcblxuICAvKipcbiAgICogUmV0dXJucyBtZXRyaWMgZm9yIGdyYXBoIHNpemUgaW4gYnl0ZXNcbiAgICovXG4gIG1ldHJpY0dyYXBoU2l6ZUJ5dGVzKHByb3BzPzogTWV0cmljT3B0aW9ucyk6IE1ldHJpYztcblxuICAvKipcbiAgICogUmV0dXJucyBtZXRyaWMgZm9yIGdyYXBoIHN0b3JhZ2UgdXNhZ2UgcGVyY2VudGFnZVxuICAgKi9cbiAgbWV0cmljR3JhcGhTdG9yYWdlVXNhZ2VQZXJjZW50KHByb3BzPzogTWV0cmljT3B0aW9ucyk6IE1ldHJpYztcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIE5lcHR1bmUgR3JhcGggTm90ZWJvb2sgZm9yIHRoZSBncmFwaC4gRGVmYXVsdHMgdG8gYSBtbC50My5tZWRpdW0gaW5zdGFuY2UgdHlwZS5cbiAgICogKipOb3RlOiBDcmVhdGluZyBhIG5vdGVib29rIHdpbGwgaW5jdXIgYWRkaXRpb25hbCBBV1MgY29zdHMgZm9yIHRoZSBub3RlYm9vayBpbnN0YW5jZS4qKlxuICAgKi9cbiAgY3JlYXRlTm90ZWJvb2socGFyYW1zPzogTmVwdHVuZUdyYXBoTm90ZWJvb2tQcm9wcyk6IE5lcHR1bmVHcmFwaE5vdGVib29rO1xufVxuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgIFBST1BTIEZPUiBORVcgQ09OU1RSVUNUXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGNyZWF0aW5nIGEgbmV3IE5lcHR1bmUgR3JhcGggZGF0YWJhc2VcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBOZXB0dW5lR3JhcGhQcm9wcyB7XG4gIC8qKlxuICAgKiBUaGUgRGltZW5zaW9uIHVzZWQgdG8gc2F2ZSB2ZWN0b3JzLlxuICAgKi9cbiAgcmVhZG9ubHkgdmVjdG9yU2VhcmNoRGltZW5zaW9uPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgYW1vdW50IG9mIG1lbW9yeSAoaW4gTmVwdHVuZSBDYXBhY2l0eSBVbml0cyBtLU5DVXMpIHRvIHVzZSBmb3IgdGhlIGdyYXBoLlxuICAgKiBAZGVmYXVsdCAxNlxuICAgKi9cbiAgcmVhZG9ubHkgcHJvdmlzaW9uZWRNZW1vcnlOQ1VzPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgZ3JhcGggbmFtZS4gVGhlIG5hbWUgbXVzdCBjb250YWluIGZyb20gMSB0byA2MyBsZXR0ZXJzLCBudW1iZXJzLCBvciBoeXBoZW5zLCBhbmQgaXRzIGZpcnN0IGNoYXJhY3RlciBtdXN0IGJlIGEgbGV0dGVyLlxuICAgKiBJdCBjYW5ub3QgZW5kIHdpdGggYSBoeXBoZW4gb3IgY29udGFpbiB0d28gY29uc2VjdXRpdmUgaHlwaGVucy5cbiAgICogQGRlZmF1bHQgLSBBIHVuaXF1ZSBncmFwaCBuYW1lIGlzIGdlbmVyYXRlZCBmb3IgeW91IHVzaW5nIHRoZSBwcmVmaXggYGdyYXBoLWZvci0ke1N0YWNrTmFtZX0tJHtVVUlEfWAuXG4gICAqL1xuICByZWFkb25seSBncmFwaE5hbWU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFNwZWNpZmllcyB3aGV0aGVyIG9yIG5vdCB0aGUgZ3JhcGggY2FuIGJlIHJlYWNoYWJsZSBvdmVyIHRoZSBpbnRlcm5ldC4gQWxsIGFjY2VzcyB0byBncmFwaHMgaXMgSUFNIGF1dGhlbnRpY2F0ZWQuXG4gICAqIFdoZW4gdGhlIGdyYXBoIGlzIHB1YmxpY2x5IGF2YWlsYWJsZSwgaXRzIGRvbWFpbiBuYW1lIHN5c3RlbSAoRE5TKSBlbmRwb2ludCByZXNvbHZlcyB0byB0aGUgcHVibGljIElQIGFkZHJlc3MgZnJvbSB0aGUgaW50ZXJuZXQuXG4gICAqIFdoZW4gdGhlIGdyYXBoIGlzbid0IHB1YmxpY2x5IGF2YWlsYWJsZSwgeW91IG5lZWQgdG8gY3JlYXRlIGEgUHJpdmF0ZUdyYXBoRW5kcG9pbnQgaW4gYSBnaXZlbiBWUEMgdG8gZW5zdXJlIHRoZSBETlMgbmFtZVxuICAgKiByZXNvbHZlcyB0byBhIHByaXZhdGUgSVAgYWRkcmVzcyB0aGF0IGlzIHJlYWNoYWJsZSBmcm9tIHRoZSBWUEMuXG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIHJlYWRvbmx5IHB1YmxpY0Nvbm5lY3Rpdml0eT86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2YgcmVwbGljYXMgaW4gb3RoZXIgQVpzLlxuICAgKiBSZXBsaWNhcyBhcmUgdHlwaWNhbGx5IG9ubHkgbmVlZGVkIGZvciBwcm9kdWN0aW9uIGNyaXRpY2FsIHdvcmtsb2FkcyB3aXRoIHN0cmljdCBhdmFpbGFiaWxpdHkgcmVxdWlyZW1lbnRzLlxuICAgKiAqKk5vdGU6IEVhY2ggcmVwbGljYSBpbmN1cnMgYWRkaXRpb25hbCBjb3N0IGFzIGl0IG1haW50YWlucyBhIGZ1bGwgY29weSBvZiB0aGUgZ3JhcGggZGF0YS4qKlxuICAgKiBAZGVmYXVsdCAwXG4gICAqL1xuICByZWFkb25seSByZXBsaWNhQ291bnQ/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEluZGljYXRlcyB3aGV0aGVyIHRoZSBHcmFwaCBzaG91bGQgaGF2ZSBkZWxldGlvbiBwcm90ZWN0aW9uIGVuYWJsZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICByZWFkb25seSBkZWxldGlvblByb3RlY3Rpb24/OiBib29sZWFuO1xufVxuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBCQVNFIENMQVNTXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKipcbiAqIEFic3RyYWN0IGJhc2UgY2xhc3MgZm9yIGEgTmVwdHVuZSBHcmFwaC5cbiAqIENvbnRhaW5zIG1ldGhvZHMgYW5kIGF0dHJpYnV0ZXMgdmFsaWQgZm9yIEdyYXBocyBlaXRoZXIgY3JlYXRlZCB3aXRoIENESyBvciBpbXBvcnRlZC5cbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIE5lcHR1bmVHcmFwaEJhc2UgZXh0ZW5kcyBSZXNvdXJjZSBpbXBsZW1lbnRzIElOZXB0dW5lR3JhcGgge1xuICAvLyBpbmhlcml0ZWRcbiAgcHVibGljIGFic3RyYWN0IHJlYWRvbmx5IGdyYXBoSWQ6IHN0cmluZztcbiAgcHVibGljIGFic3RyYWN0IHJlYWRvbmx5IGdyYXBoQXJuOiBzdHJpbmc7XG4gIHB1YmxpYyBhYnN0cmFjdCByZWFkb25seSBncmFwaEVuZHBvaW50OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEdyYW50IHRoZSBnaXZlbiBwcmluY2lwYWwgaWRlbnRpdHkgcGVybWlzc2lvbnMgdG8gcGVyZm9ybSBhY3Rpb25zIG9uIHRoaXMgYWdlbnQgYWxpYXMuXG4gICAqL1xuICBwdWJsaWMgZ3JhbnQoZ3JhbnRlZTogaWFtLklHcmFudGFibGUsIGFjdGlvbnM6IHN0cmluZ1tdKTogaWFtLkdyYW50IHtcbiAgICByZXR1cm4gaWFtLkdyYW50LmFkZFRvUHJpbmNpcGFsKHtcbiAgICAgIGdyYW50ZWUsXG4gICAgICBhY3Rpb25zLFxuICAgICAgcmVzb3VyY2VBcm5zOiBbdGhpcy5ncmFwaEFybl0sXG4gICAgICBzY29wZTogdGhpcyxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHcmFudCB0aGUgZ2l2ZW4gaWRlbnRpdHkgZnVsbCBhY2Nlc3MgdG8gdGhlIEdyYXBoLlxuICAgKi9cbiAgcHVibGljIGdyYW50RnVsbEFjY2VzcyhncmFudGVlOiBpYW0uSUdyYW50YWJsZSk6IGlhbS5HcmFudCB7XG4gICAgcmV0dXJuIHRoaXMuZ3JhbnQoZ3JhbnRlZSwgWyduZXB0dW5lLWdyYXBoOionXSk7XG4gIH1cblxuICAvKipcbiAgICogR3JhbnQgdGhlIGdpdmVuIGlkZW50aXR5IHRoZSBwZXJtaXNzaW9ucyB0byBxdWVyeSB0aGUgR3JhcGguXG4gICAqL1xuICBwdWJsaWMgZ3JhbnRRdWVyeShncmFudGVlOiBpYW0uSUdyYW50YWJsZSk6IGlhbS5HcmFudCB7XG4gICAgcmV0dXJuIHRoaXMuZ3JhbnQoZ3JhbnRlZSwgW1xuICAgICAgJ25lcHR1bmUtZ3JhcGg6R2V0R3JhcGgnLFxuICAgICAgJ25lcHR1bmUtZ3JhcGg6UmVhZERhdGFWaWFRdWVyeScsXG4gICAgICAnbmVwdHVuZS1ncmFwaDpXcml0ZURhdGFWaWFRdWVyeScsXG4gICAgICAnbmVwdHVuZS1ncmFwaDpEZWxldGVEYXRhVmlhUXVlcnknLFxuICAgICAgJ25lcHR1bmUtZ3JhcGg6R2V0UXVlcnlTdGF0dXMnLFxuICAgICAgJ25lcHR1bmUtZ3JhcGg6Q2FuY2VsUXVlcnknLFxuICAgIF0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEdyYW50IHRoZSBnaXZlbiBpZGVudGl0eSB0aGUgcGVybWlzc2lvbnMgdG8gcmVhZCB0aGUgR3JhcGguXG4gICAqL1xuICBwdWJsaWMgZ3JhbnRSZWFkT25seShncmFudGVlOiBpYW0uSUdyYW50YWJsZSk6IGlhbS5HcmFudCB7XG4gICAgcmV0dXJuIHRoaXMuZ3JhbnQoZ3JhbnRlZSwgW1xuICAgICAgJ25lcHR1bmUtZ3JhcGg6R2V0KicsXG4gICAgICAnbmVwdHVuZS1ncmFwaDpMaXN0KicsXG4gICAgICAnbmVwdHVuZS1ncmFwaDpSZWFkKicsXG4gICAgXSk7XG4gIH1cblxuICAvKipcbiAgICogR3JhbnQgdGhlIGdpdmVuIGlkZW50aXR5IHRoZSBwZXJtaXNzaW9ucyB0byBleHBvcnQgdGhlIGdyYXBoIGludG8gY29sdW1uYXIgc3RydWN0dXJlZCAuY3N2IGFuZCAucGFycXVldCBmaWxlcy5cbiAgICovXG4gIHB1YmxpYyBncmFudEV4cG9ydFRhc2soZ3JhbnRlZTogaWFtLklHcmFudGFibGUpOiBpYW0uR3JhbnQge1xuICAgIHJldHVybiB0aGlzLmdyYW50KGdyYW50ZWUsIFtcbiAgICAgICduZXB0dW5lLWdyYXBoOkdldEV4cG9ydFRhc2snLFxuICAgICAgJ25lcHR1bmUtZ3JhcGg6TGlzdEV4cG9ydFRhc2tzJyxcbiAgICAgICduZXB0dW5lLWdyYXBoOlN0YXJ0RXhwb3J0VGFzaycsXG4gICAgICAnbmVwdHVuZS1ncmFwaDpDYW5jZWxFeHBvcnRUYXNrJyxcbiAgICBdKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIGdpdmVuIG5hbWVkIG1ldHJpYyBmb3IgdGhpcyBncmFwaC5cbiAgICpcbiAgICogQnkgZGVmYXVsdCwgdGhlIG1ldHJpYyB3aWxsIGJlIGNhbGN1bGF0ZWQgYXMgYSBzdW0gb3ZlciBhIHBlcmlvZCBvZiA1IG1pbnV0ZXMuXG4gICAqIFlvdSBjYW4gY3VzdG9taXplIHRoaXMgYnkgdXNpbmcgdGhlIGBzdGF0aXN0aWNgIGFuZCBgcGVyaW9kYCBwcm9wZXJ0aWVzLlxuICAgKi9cbiAgcHVibGljIG1ldHJpYyhtZXRyaWNOYW1lOiBzdHJpbmcsIHByb3BzPzogTWV0cmljT3B0aW9ucyk6IE1ldHJpYyB7XG4gICAgY29uc3QgbWV0cmljUHJvcHM6IE1ldHJpY1Byb3BzID0ge1xuICAgICAgbmFtZXNwYWNlOiAnQVdTL05lcHR1bmUnLFxuICAgICAgbWV0cmljTmFtZSxcbiAgICAgIGRpbWVuc2lvbnNNYXA6IHsgR3JhcGhJZGVudGlmaWVyOiB0aGlzLmdyYXBoSWQgfSxcbiAgICAgIC4uLnByb3BzLFxuICAgIH07XG4gICAgcmV0dXJuIHRoaXMuY29uZmlndXJlTWV0cmljKG1ldHJpY1Byb3BzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIG1ldHJpYyBmb3IgbnVtYmVyIG9mIHF1ZXVlZCByZXF1ZXN0cyBwZXIgc2Vjb25kXG4gICAqL1xuICBwdWJsaWMgbWV0cmljTnVtUXVldWVkUmVxdWVzdHNQZXJTZWMocHJvcHM/OiBNZXRyaWNPcHRpb25zKTogTWV0cmljIHtcbiAgICByZXR1cm4gdGhpcy5tZXRyaWMoJ051bVF1ZXVlZFJlcXVlc3RzUGVyU2VjJywgcHJvcHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgbWV0cmljIGZvciBudW1iZXIgb2YgT3BlbkN5cGhlciByZXF1ZXN0cyBwZXIgc2Vjb25kXG4gICAqL1xuICBwdWJsaWMgbWV0cmljTnVtT3BlbkN5cGhlclJlcXVlc3RzUGVyU2VjKHByb3BzPzogTWV0cmljT3B0aW9ucyk6IE1ldHJpYyB7XG4gICAgcmV0dXJuIHRoaXMubWV0cmljKCdOdW1PcGVuQ3lwaGVyUmVxdWVzdHNQZXJTZWMnLCBwcm9wcyk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBtZXRyaWMgZm9yIG51bWJlciBvZiBPcGVuQ3lwaGVyIGNsaWVudCBlcnJvcnMgcGVyIHNlY29uZFxuICAgKi9cbiAgcHVibGljIG1ldHJpY051bU9wZW5DeXBoZXJDbGllbnRFcnJvcnNQZXJTZWMocHJvcHM/OiBNZXRyaWNPcHRpb25zKTogTWV0cmljIHtcbiAgICByZXR1cm4gdGhpcy5tZXRyaWMoJ051bU9wZW5DeXBoZXJDbGllbnRFcnJvcnNQZXJTZWMnLCBwcm9wcyk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBtZXRyaWMgZm9yIG51bWJlciBvZiBPcGVuQ3lwaGVyIHNlcnZlciBlcnJvcnMgcGVyIHNlY29uZFxuICAgKi9cbiAgcHVibGljIG1ldHJpY051bU9wZW5DeXBoZXJTZXJ2ZXJFcnJvcnNQZXJTZWMocHJvcHM/OiBNZXRyaWNPcHRpb25zKTogTWV0cmljIHtcbiAgICByZXR1cm4gdGhpcy5tZXRyaWMoJ051bU9wZW5DeXBoZXJTZXJ2ZXJFcnJvcnNQZXJTZWMnLCBwcm9wcyk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBtZXRyaWMgZm9yIG51bWJlciBvZiBlZGdlIHByb3BlcnRpZXNcbiAgICovXG4gIHB1YmxpYyBtZXRyaWNOdW1FZGdlUHJvcGVydGllcyhwcm9wcz86IE1ldHJpY09wdGlvbnMpOiBNZXRyaWMge1xuICAgIHJldHVybiB0aGlzLm1ldHJpYygnTnVtRWRnZVByb3BlcnRpZXMnLCBwcm9wcyk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBtZXRyaWMgZm9yIG51bWJlciBvZiBlZGdlc1xuICAgKi9cbiAgcHVibGljIG1ldHJpY051bUVkZ2VzKHByb3BzPzogTWV0cmljT3B0aW9ucyk6IE1ldHJpYyB7XG4gICAgcmV0dXJuIHRoaXMubWV0cmljKCdOdW1FZGdlcycsIHByb3BzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIG1ldHJpYyBmb3IgQ1BVIHV0aWxpemF0aW9uXG4gICAqL1xuICBwdWJsaWMgbWV0cmljQ1BVVXRpbGl6YXRpb24ocHJvcHM/OiBNZXRyaWNPcHRpb25zKTogTWV0cmljIHtcbiAgICByZXR1cm4gdGhpcy5tZXRyaWMoJ0NQVVV0aWxpemF0aW9uJywgcHJvcHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgbWV0cmljIGZvciBudW1iZXIgb2YgdmVjdG9yc1xuICAgKi9cbiAgcHVibGljIG1ldHJpY051bVZlY3RvcnMocHJvcHM/OiBNZXRyaWNPcHRpb25zKTogTWV0cmljIHtcbiAgICByZXR1cm4gdGhpcy5tZXRyaWMoJ051bVZlY3RvcnMnLCBwcm9wcyk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBtZXRyaWMgZm9yIG51bWJlciBvZiB2ZXJ0ZXggcHJvcGVydGllc1xuICAgKi9cbiAgcHVibGljIG1ldHJpY051bVZlcnRleFByb3BlcnRpZXMocHJvcHM/OiBNZXRyaWNPcHRpb25zKTogTWV0cmljIHtcbiAgICByZXR1cm4gdGhpcy5tZXRyaWMoJ051bVZlcnRleFByb3BlcnRpZXMnLCBwcm9wcyk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBtZXRyaWMgZm9yIGdyYXBoIHNpemUgaW4gYnl0ZXNcbiAgICovXG4gIHB1YmxpYyBtZXRyaWNHcmFwaFNpemVCeXRlcyhwcm9wcz86IE1ldHJpY09wdGlvbnMpOiBNZXRyaWMge1xuICAgIHJldHVybiB0aGlzLm1ldHJpYygnR3JhcGhTaXplQnl0ZXMnLCBwcm9wcyk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBtZXRyaWMgZm9yIGdyYXBoIHN0b3JhZ2UgdXNhZ2UgcGVyY2VudGFnZVxuICAgKi9cbiAgcHVibGljIG1ldHJpY0dyYXBoU3RvcmFnZVVzYWdlUGVyY2VudChwcm9wcz86IE1ldHJpY09wdGlvbnMpOiBNZXRyaWMge1xuICAgIHJldHVybiB0aGlzLm1ldHJpYygnR3JhcGhTdG9yYWdlVXNhZ2VQZXJjZW50JywgcHJvcHMpO1xuICB9XG5cbiAgcHJpdmF0ZSBjb25maWd1cmVNZXRyaWMocHJvcHM6IE1ldHJpY1Byb3BzKSB7XG4gICAgcmV0dXJuIG5ldyBNZXRyaWMoe1xuICAgICAgLi4ucHJvcHMsXG4gICAgICByZWdpb246IHByb3BzPy5yZWdpb24gPz8gdGhpcy5zdGFjay5yZWdpb24sXG4gICAgICBhY2NvdW50OiBwcm9wcz8uYWNjb3VudCA/PyB0aGlzLnN0YWNrLmFjY291bnQsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIE5lcHR1bmUgR3JhcGggTm90ZWJvb2sgZm9yIHRoZSBncmFwaC4gRGVmYXVsdHMgdG8gYSBtbC50My5tZWRpdW0gaW5zdGFuY2UgdHlwZS5cbiAgICogKipOb3RlOiBDcmVhdGluZyBhIG5vdGVib29rIHdpbGwgaW5jdXIgYWRkaXRpb25hbCBBV1MgY29zdHMgZm9yIHRoZSBub3RlYm9vayBpbnN0YW5jZS4qKlxuICAgKi9cbiAgcHVibGljIGNyZWF0ZU5vdGVib29rKHBhcmFtcz86IE5lcHR1bmVHcmFwaE5vdGVib29rUHJvcHMpOiBOZXB0dW5lR3JhcGhOb3RlYm9vayB7XG4gICAgcmV0dXJuIG5ldyBOZXB0dW5lR3JhcGhOb3RlYm9vayh0aGlzLCAnTm90ZWJvb2snLCB7XG4gICAgICAuLi5wYXJhbXMsXG4gICAgICBncmFwaDogdGhpcyxcbiAgICB9KTtcbiAgfVxufVxuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgIE5FVyBDT05TVFJVQ1QgREVGSU5JVElPTlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqXG4gKiBDbGFzcyB0byBjcmVhdGUgYW4gTDIgTmVwdHVuZSBBbmFseXRpY3MgR3JhcGggd2l0aCBDREsuXG4gKiBAY2xvdWRmb3JtYXRpb25SZXNvdXJjZSBBV1M6Ok5lcHR1bmVHcmFwaDo6R3JhcGhcbiAqL1xuZXhwb3J0IGNsYXNzIE5lcHR1bmVHcmFwaCBleHRlbmRzIE5lcHR1bmVHcmFwaEJhc2UgaW1wbGVtZW50cyBJTmVwdHVuZUdyYXBoIHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIEltcG9ydCBNZXRob2RzXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBwdWJsaWMgc3RhdGljIGZyb21HcmFwaElkKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIGdyYXBoSWQ6IHN0cmluZyk6IElOZXB0dW5lR3JhcGgge1xuICAgIGNsYXNzIEltcG9ydCBleHRlbmRzIE5lcHR1bmVHcmFwaEJhc2Uge1xuICAgICAgcHVibGljIHJlYWRvbmx5IGdyYXBoSWQgPSBncmFwaElkO1xuICAgICAgcHVibGljIHJlYWRvbmx5IGdyYXBoQXJuID0gU3RhY2sub2Yoc2NvcGUpLmZvcm1hdEFybih7XG4gICAgICAgIHNlcnZpY2U6ICduZXB0dW5lLWdyYXBoJyxcbiAgICAgICAgcmVzb3VyY2U6ICdncmFwaCcsXG4gICAgICAgIHJlc291cmNlTmFtZTogZ3JhcGhJZCxcbiAgICAgICAgYXJuRm9ybWF0OiBBcm5Gb3JtYXQuU0xBU0hfUkVTT1VSQ0VfTkFNRSxcbiAgICAgIH0pO1xuICAgICAgcHVibGljIHJlYWRvbmx5IGdyYXBoRW5kcG9pbnQgPSBgJHt0aGlzLmdyYXBoSWR9LiR7XG4gICAgICAgIFN0YWNrLm9mKHNjb3BlKS5yZWdpb25cbiAgICAgIH0ubmVwdHVuZS1ncmFwaC5hbWF6b25hd3MuY29tYDtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEltcG9ydChzY29wZSwgaWQpO1xuICB9IC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyBBdHRyaWJ1dGVzXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBwdWJsaWMgcmVhZG9ubHkgZ3JhcGhJZDogc3RyaW5nO1xuICBwdWJsaWMgcmVhZG9ubHkgZ3JhcGhBcm46IHN0cmluZztcbiAgcHVibGljIHJlYWRvbmx5IGdyYXBoRW5kcG9pbnQ6IHN0cmluZztcbiAgcHVibGljIHJlYWRvbmx5IHByb3Zpc2lvbmVkTWVtb3J5OiBudW1iZXI7XG4gIHB1YmxpYyByZWFkb25seSBncmFwaE5hbWU/OiBzdHJpbmc7XG4gIHB1YmxpYyByZWFkb25seSBwdWJsaWNDb25uZWN0aXZpdHk6IGJvb2xlYW47XG4gIHB1YmxpYyByZWFkb25seSByZXBsaWNhQ291bnQ6IG51bWJlcjtcblxuICBwcml2YXRlIHJlYWRvbmx5IF9yZXNvdXJjZTogbmVwdHVuZWdyYXBoLkNmbkdyYXBoO1xuXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBOZXB0dW5lR3JhcGhQcm9wcykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBTZXQgcHJvcGVydGllcyBvciBkZWZhdWx0c1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIHRoaXMucHJvdmlzaW9uZWRNZW1vcnkgPSBwcm9wcy5wcm92aXNpb25lZE1lbW9yeU5DVXMgPz8gMTY7XG4gICAgdGhpcy5ncmFwaE5hbWUgPVxuICAgICAgcHJvcHMuZ3JhcGhOYW1lID8/XG4gICAgICBnZW5lcmF0ZVBoeXNpY2FsTmFtZVYyKHRoaXMsICdiZWRyb2NrLWtiLWdyYXBoJywge1xuICAgICAgICBzZXBhcmF0b3I6ICctJyxcbiAgICAgICAgbWF4TGVuZ3RoOiA2MyxcbiAgICAgICAgbG93ZXI6IHRydWUsXG4gICAgICB9KTtcbiAgICB0aGlzLnB1YmxpY0Nvbm5lY3Rpdml0eSA9IHByb3BzLnB1YmxpY0Nvbm5lY3Rpdml0eSA/PyB0cnVlO1xuICAgIHRoaXMucmVwbGljYUNvdW50ID0gcHJvcHMucmVwbGljYUNvdW50ID8/IDA7XG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBMMSBJbnN0YW50aWF0aW9uXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgdGhpcy5fcmVzb3VyY2UgPSBuZXcgbmVwdHVuZWdyYXBoLkNmbkdyYXBoKHRoaXMsICdSZXNvdXJjZScsIHtcbiAgICAgIHByb3Zpc2lvbmVkTWVtb3J5OiB0aGlzLnByb3Zpc2lvbmVkTWVtb3J5LFxuICAgICAgZ3JhcGhOYW1lOiB0aGlzLmdyYXBoTmFtZSxcbiAgICAgIHB1YmxpY0Nvbm5lY3Rpdml0eTogdGhpcy5wdWJsaWNDb25uZWN0aXZpdHksXG4gICAgICByZXBsaWNhQ291bnQ6IHRoaXMucmVwbGljYUNvdW50LFxuICAgICAgdmVjdG9yU2VhcmNoQ29uZmlndXJhdGlvbjogcHJvcHMudmVjdG9yU2VhcmNoRGltZW5zaW9uXG4gICAgICAgID8ge1xuICAgICAgICAgIHZlY3RvclNlYXJjaERpbWVuc2lvbjogcHJvcHMudmVjdG9yU2VhcmNoRGltZW5zaW9uLFxuICAgICAgICB9XG4gICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgZGVsZXRpb25Qcm90ZWN0aW9uOiBwcm9wcy5kZWxldGlvblByb3RlY3Rpb24gPz8gZmFsc2UsXG4gICAgfSk7XG5cbiAgICB0aGlzLmdyYXBoQXJuID0gdGhpcy5fcmVzb3VyY2UuYXR0ckdyYXBoQXJuO1xuICAgIHRoaXMuZ3JhcGhJZCA9IHRoaXMuX3Jlc291cmNlLmF0dHJHcmFwaElkO1xuICAgIHRoaXMuZ3JhcGhFbmRwb2ludCA9IHRoaXMuX3Jlc291cmNlLmF0dHJFbmRwb2ludDtcbiAgfVxufVxuIl19