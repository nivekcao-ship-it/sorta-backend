/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
import { aws_iam as iam, aws_s3 as s3, aws_stepfunctions as sfn, Duration } from 'aws-cdk-lib';
import { Construct } from 'constructs';
export interface BedrockBatchSfnProps {
    /**
     * The S3 bucket where the Bedrock Batch Inference Job gets the input manifests.
     */
    readonly bedrockBatchInputBucket: s3.IBucket;
    /**
     * The S3 bucket where the Bedrock Batch Inference Job stores the output.
     */
    readonly bedrockBatchOutputBucket: s3.IBucket;
    /**
     * IAM policy used for Bedrock batch processing
     *
     * The policy must have the following permissions for the models and inference profiles you plan to use:
     * - bedrock:InvokeModel
     * - bedrock:CreateModelInvocationJob
     *
     * @default
     * const bedrockBatchPolicy = new iam.ManagedPolicy(this, 'BedrockBatchPolicy', {
     *         statements: [
     *           new iam.PolicyStatement({
     *             sid: 'Inference',
     *             actions: ['bedrock:InvokeModel', 'bedrock:CreateModelInvocationJob'],
     *             resources: [
     *               'arn:aws:bedrock:*::foundation-model/*',
     *               Stack.of(this).formatArn({
     *                 service: 'bedrock',
     *                 resource: 'inference-profile',
     *                 resourceName: '*',
     *               }),
     *             ],
     *           }),
     *         ],
     *       });
     */
    readonly bedrockBatchPolicy?: iam.IManagedPolicy;
    /**
     * The timeout duration for the batch inference job.
     * Must be between 24 hours and 1 week (168 hours).
     *
     * @default Duration.hours(48)
     */
    readonly timeout?: Duration;
    /**
     * JSONPath expression to select part of the state to be the input to this state.
     * May also be the special value JsonPath. DISCARD, which will cause the effective input to be the empty object {}.
     *
     * Input schema:
     * ```
     * {
     *   "job_name": string,        // Required. Name of the batch inference job
     *   "manifest_keys": string[],    // Required. List of S3 keys of the input manifest files
     *   "model_id": string        // Required. Model ID to use.
     * }
     * ```
     *
     * @default The entire task input (JSON path '$')
     */
    readonly inputPath?: string;
    /**
     * JSONPath expression to indicate where to inject the state's output
     * May also be the special value JsonPath. DISCARD, which will cause the state's input to become its output.
     *
     * Output schema:
     * ```
     * {
     *   "status": string,        // Required. Status of the batch job. One of: "Completed" or "PartiallyCompleted"
     *   "bucket": string,        // Required. S3 bucket where the output is stored
     *   "keys": string[]         // Required. Array of S3 keys for the output files
     * }
     * ```
     *
     * @default Replaces the entire input with the result (JSON path '$')
     */
    readonly resultPath?: string;
}
/**
 * A state machine fragment that creates a Bedrock Batch Inference Job and waits for its completion.
 *
 * Input schema:
 * ```
 * {
 *   "job_name": string,        // Required. Name of the batch inference job
 *   "manifest_keys": string[],    // Required. List of S3 keys of the input manifest files
 *   "model_id": string        // Required. Model ID to use.
 * }
 * ```
 *
 * Output schema:
 * ```
 * {
 *   "status": string,        // Required. Status of the batch job. One of: "Completed" or "PartiallyCompleted"
 *   "bucket": string,        // Required. S3 bucket where the output is stored
 *   "keys": string[]         // Required. Array of S3 keys for the output files
 * }
 * ```
 *
 * Error schema:
 * ```
 * {
 *   "status": string,        // Required. Status will be one of: "Failed", "Stopped", or "Expired"
 *   "error": string,         // Required. Error code
 *   "cause": string          // Required. Error message
 * }
 * ```
 */
export declare class BedrockBatchSfn extends sfn.StateMachineFragment {
    readonly endStates: sfn.INextable[];
    readonly startState: sfn.State;
    constructor(parent: Construct, id: string, props: BedrockBatchSfnProps);
}
