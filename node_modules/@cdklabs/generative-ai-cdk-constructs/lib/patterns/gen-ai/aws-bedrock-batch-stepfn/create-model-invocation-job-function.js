"use strict";
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateModelInvocationJobFunction = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const cdk_nag_1 = require("cdk-nag");
const bedrock_batch_sfn_lambda_code_1 = require("./bedrock-batch-sfn-lambda-code");
/**
 * Lambda function that creates Bedrock model invocation jobs for a Step Functions wait for callback task
 */
class CreateModelInvocationJobFunction extends aws_cdk_lib_1.aws_lambda.Function {
    constructor(scope, id, props) {
        super(scope, id, {
            code: bedrock_batch_sfn_lambda_code_1.BedrockBatchSfnLambdaCode.getOrCreate(),
            handler: 'aws_bedrock_batch_sfn.bedrock_create_model_invocation_job.handler',
            runtime: aws_cdk_lib_1.aws_lambda.Runtime.PYTHON_3_13,
            architecture: aws_cdk_lib_1.aws_lambda.Architecture.ARM_64,
            memorySize: 128,
            timeout: aws_cdk_lib_1.Duration.seconds(30),
        });
        this.addToRolePolicy(new aws_cdk_lib_1.aws_iam.PolicyStatement({
            actions: ['bedrock:CreateModelInvocationJob', 'bedrock:TagResource'],
            resources: [
                aws_cdk_lib_1.Stack.of(this).formatArn({
                    service: 'bedrock',
                    resource: 'model-invocation-job',
                    resourceName: '*',
                }),
            ],
        }));
        this.role?.addManagedPolicy(props.bedrockBatchPolicy);
        cdk_nag_1.NagSuppressions.addResourceSuppressions(this, [
            {
                id: 'AwsSolutions-IAM4',
                reason: 'Allow the use of AWS Managed Policies for Lambda execution.',
                appliesTo: [
                    'Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole',
                ],
            },
            {
                id: 'AwsSolutions-IAM5',
                reason: 'Wildcards allow create of Bedrock model invocation jobs.',
            },
        ], true);
    }
}
exports.CreateModelInvocationJobFunction = CreateModelInvocationJobFunction;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLW1vZGVsLWludm9jYXRpb24tam9iLWZ1bmN0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3BhdHRlcm5zL2dlbi1haS9hd3MtYmVkcm9jay1iYXRjaC1zdGVwZm4vY3JlYXRlLW1vZGVsLWludm9jYXRpb24tam9iLWZ1bmN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7R0FXRzs7O0FBRUgsNkNBQW9GO0FBQ3BGLHFDQUEwQztBQUUxQyxtRkFBNEU7QUFZNUU7O0dBRUc7QUFDSCxNQUFhLGdDQUFpQyxTQUFRLHdCQUFNLENBQUMsUUFBUTtJQUNuRSxZQUNFLEtBQWdCLEVBQ2hCLEVBQVUsRUFDVixLQUE0QztRQUU1QyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRTtZQUNmLElBQUksRUFBRSx5REFBeUIsQ0FBQyxXQUFXLEVBQUU7WUFDN0MsT0FBTyxFQUNMLG1FQUFtRTtZQUNyRSxPQUFPLEVBQUUsd0JBQU0sQ0FBQyxPQUFPLENBQUMsV0FBVztZQUNuQyxZQUFZLEVBQUUsd0JBQU0sQ0FBQyxZQUFZLENBQUMsTUFBTTtZQUN4QyxVQUFVLEVBQUUsR0FBRztZQUNmLE9BQU8sRUFBRSxzQkFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7U0FDOUIsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLGVBQWUsQ0FDbEIsSUFBSSxxQkFBRyxDQUFDLGVBQWUsQ0FBQztZQUN0QixPQUFPLEVBQUUsQ0FBQyxrQ0FBa0MsRUFBRSxxQkFBcUIsQ0FBQztZQUNwRSxTQUFTLEVBQUU7Z0JBQ1QsbUJBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDO29CQUN2QixPQUFPLEVBQUUsU0FBUztvQkFDbEIsUUFBUSxFQUFFLHNCQUFzQjtvQkFDaEMsWUFBWSxFQUFFLEdBQUc7aUJBQ2xCLENBQUM7YUFDSDtTQUNGLENBQUMsQ0FDSCxDQUFDO1FBRUYsSUFBSSxDQUFDLElBQUksRUFBRSxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUd0RCx5QkFBZSxDQUFDLHVCQUF1QixDQUNyQyxJQUFJLEVBQ0o7WUFDRTtnQkFDRSxFQUFFLEVBQUUsbUJBQW1CO2dCQUN2QixNQUFNLEVBQUUsNkRBQTZEO2dCQUNyRSxTQUFTLEVBQUU7b0JBQ1QsdUZBQXVGO2lCQUN4RjthQUNGO1lBQ0Q7Z0JBQ0UsRUFBRSxFQUFFLG1CQUFtQjtnQkFDdkIsTUFBTSxFQUFFLDBEQUEwRDthQUNuRTtTQUNGLEVBQ0QsSUFBSSxDQUNMLENBQUM7SUFDSixDQUFDO0NBQ0Y7QUFsREQsNEVBa0RDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiAgQ29weXJpZ2h0IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIikuIFlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqICB3aXRoIHRoZSBMaWNlbnNlLiBBIGNvcHkgb2YgdGhlIExpY2Vuc2UgaXMgbG9jYXRlZCBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogIG9yIGluIHRoZSAnbGljZW5zZScgZmlsZSBhY2NvbXBhbnlpbmcgdGhpcyBmaWxlLiBUaGlzIGZpbGUgaXMgZGlzdHJpYnV0ZWQgb24gYW4gJ0FTIElTJyBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTXG4gKiAgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnNcbiAqICBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgYXdzX2lhbSBhcyBpYW0sIGF3c19sYW1iZGEgYXMgbGFtYmRhLCBEdXJhdGlvbiwgU3RhY2sgfSBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgeyBOYWdTdXBwcmVzc2lvbnMgfSBmcm9tICdjZGstbmFnJztcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHsgQmVkcm9ja0JhdGNoU2ZuTGFtYmRhQ29kZSB9IGZyb20gJy4vYmVkcm9jay1iYXRjaC1zZm4tbGFtYmRhLWNvZGUnO1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGNyZWF0aW5nIGEgQ3JlYXRlTW9kZWxJbnZvY2F0aW9uSm9iRnVuY3Rpb25cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDcmVhdGVNb2RlbEludm9jYXRpb25Kb2JGdW5jdGlvblByb3BzIHtcbiAgLyoqXG4gICAqIElBTSBQb2xpY3kgdXNlZCBmb3IgQmVkcm9jayBiYXRjaCBwcm9jZXNzaW5nXG4gICAqL1xuICByZWFkb25seSBiZWRyb2NrQmF0Y2hQb2xpY3k6IGlhbS5JTWFuYWdlZFBvbGljeTtcbn1cblxuLyoqXG4gKiBMYW1iZGEgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIEJlZHJvY2sgbW9kZWwgaW52b2NhdGlvbiBqb2JzIGZvciBhIFN0ZXAgRnVuY3Rpb25zIHdhaXQgZm9yIGNhbGxiYWNrIHRhc2tcbiAqL1xuZXhwb3J0IGNsYXNzIENyZWF0ZU1vZGVsSW52b2NhdGlvbkpvYkZ1bmN0aW9uIGV4dGVuZHMgbGFtYmRhLkZ1bmN0aW9uIHtcbiAgY29uc3RydWN0b3IoXG4gICAgc2NvcGU6IENvbnN0cnVjdCxcbiAgICBpZDogc3RyaW5nLFxuICAgIHByb3BzOiBDcmVhdGVNb2RlbEludm9jYXRpb25Kb2JGdW5jdGlvblByb3BzLFxuICApIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIHtcbiAgICAgIGNvZGU6IEJlZHJvY2tCYXRjaFNmbkxhbWJkYUNvZGUuZ2V0T3JDcmVhdGUoKSxcbiAgICAgIGhhbmRsZXI6XG4gICAgICAgICdhd3NfYmVkcm9ja19iYXRjaF9zZm4uYmVkcm9ja19jcmVhdGVfbW9kZWxfaW52b2NhdGlvbl9qb2IuaGFuZGxlcicsXG4gICAgICBydW50aW1lOiBsYW1iZGEuUnVudGltZS5QWVRIT05fM18xMyxcbiAgICAgIGFyY2hpdGVjdHVyZTogbGFtYmRhLkFyY2hpdGVjdHVyZS5BUk1fNjQsXG4gICAgICBtZW1vcnlTaXplOiAxMjgsXG4gICAgICB0aW1lb3V0OiBEdXJhdGlvbi5zZWNvbmRzKDMwKSxcbiAgICB9KTtcblxuICAgIHRoaXMuYWRkVG9Sb2xlUG9saWN5KFxuICAgICAgbmV3IGlhbS5Qb2xpY3lTdGF0ZW1lbnQoe1xuICAgICAgICBhY3Rpb25zOiBbJ2JlZHJvY2s6Q3JlYXRlTW9kZWxJbnZvY2F0aW9uSm9iJywgJ2JlZHJvY2s6VGFnUmVzb3VyY2UnXSxcbiAgICAgICAgcmVzb3VyY2VzOiBbXG4gICAgICAgICAgU3RhY2sub2YodGhpcykuZm9ybWF0QXJuKHtcbiAgICAgICAgICAgIHNlcnZpY2U6ICdiZWRyb2NrJyxcbiAgICAgICAgICAgIHJlc291cmNlOiAnbW9kZWwtaW52b2NhdGlvbi1qb2InLFxuICAgICAgICAgICAgcmVzb3VyY2VOYW1lOiAnKicsXG4gICAgICAgICAgfSksXG4gICAgICAgIF0sXG4gICAgICB9KSxcbiAgICApO1xuXG4gICAgdGhpcy5yb2xlPy5hZGRNYW5hZ2VkUG9saWN5KHByb3BzLmJlZHJvY2tCYXRjaFBvbGljeSk7XG5cblxuICAgIE5hZ1N1cHByZXNzaW9ucy5hZGRSZXNvdXJjZVN1cHByZXNzaW9ucyhcbiAgICAgIHRoaXMsXG4gICAgICBbXG4gICAgICAgIHtcbiAgICAgICAgICBpZDogJ0F3c1NvbHV0aW9ucy1JQU00JyxcbiAgICAgICAgICByZWFzb246ICdBbGxvdyB0aGUgdXNlIG9mIEFXUyBNYW5hZ2VkIFBvbGljaWVzIGZvciBMYW1iZGEgZXhlY3V0aW9uLicsXG4gICAgICAgICAgYXBwbGllc1RvOiBbXG4gICAgICAgICAgICAnUG9saWN5Ojphcm46PEFXUzo6UGFydGl0aW9uPjppYW06OmF3czpwb2xpY3kvc2VydmljZS1yb2xlL0FXU0xhbWJkYUJhc2ljRXhlY3V0aW9uUm9sZScsXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGlkOiAnQXdzU29sdXRpb25zLUlBTTUnLFxuICAgICAgICAgIHJlYXNvbjogJ1dpbGRjYXJkcyBhbGxvdyBjcmVhdGUgb2YgQmVkcm9jayBtb2RlbCBpbnZvY2F0aW9uIGpvYnMuJyxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICB0cnVlLFxuICAgICk7XG4gIH1cbn1cblxuIl19