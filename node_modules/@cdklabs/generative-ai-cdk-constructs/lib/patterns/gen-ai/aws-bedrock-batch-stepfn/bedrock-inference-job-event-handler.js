"use strict";
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BedrockInferenceJobEventHandler = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const cdk_nag_1 = require("cdk-nag");
const constructs_1 = require("constructs");
const bedrock_batch_sfn_lambda_code_1 = require("./bedrock-batch-sfn-lambda-code");
/**
 * EventBridge Rule and Lambda function which handles events from Bedrock Batch Inference Job
 * and reports success or failure to Step Functions.
 */
class BedrockInferenceJobEventHandler extends constructs_1.Construct {
    static getOrCreate(scope) {
        if (!BedrockInferenceJobEventHandler.instance) {
            const uniqueId = 'BedrockInferenceJobEventHandler330899f022e34160002006bb8b09cc5b'; // md5 sum of "BedrockInferenceJobEventHandler"
            BedrockInferenceJobEventHandler.instance = new BedrockInferenceJobEventHandler(aws_cdk_lib_1.Stack.of(scope), uniqueId);
        }
        return BedrockInferenceJobEventHandler.instance;
    }
    constructor(scope, id) {
        super(scope, id);
        const eventHandlerLambda = new aws_cdk_lib_1.aws_lambda.Function(this, 'BedrockEventHandler', {
            code: bedrock_batch_sfn_lambda_code_1.BedrockBatchSfnLambdaCode.getOrCreate(),
            handler: 'aws_bedrock_batch_sfn.bedrock_inference_job_event.handler',
            timeout: aws_cdk_lib_1.Duration.seconds(60),
            memorySize: 128,
            runtime: aws_cdk_lib_1.aws_lambda.Runtime.PYTHON_3_13,
            architecture: aws_cdk_lib_1.aws_lambda.Architecture.ARM_64,
        });
        eventHandlerLambda.addToRolePolicy(new aws_cdk_lib_1.aws_iam.PolicyStatement({
            actions: [
                'bedrock:ListTagsForResource',
                'bedrock:GetModelInvocationJob',
            ],
            resources: [
                aws_cdk_lib_1.Stack.of(this).formatArn({
                    service: 'bedrock',
                    resource: 'model-invocation-job',
                    resourceName: '*',
                }),
            ],
        }));
        eventHandlerLambda.addToRolePolicy(new aws_cdk_lib_1.aws_iam.PolicyStatement({
            actions: ['states:SendTaskSuccess', 'states:SendTaskFailure'],
            resources: ['*'],
        }));
        this.grantPrincipal = eventHandlerLambda.grantPrincipal;
        cdk_nag_1.NagSuppressions.addResourceSuppressions(eventHandlerLambda, [
            {
                id: 'AwsSolutions-IAM4',
                reason: 'Allow the use of AWS Managed Policies for Lambda execution.',
                appliesTo: [
                    'Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole',
                ],
            },
            {
                id: 'AwsSolutions-IAM5',
                reason: `Wildcards to read any object in the Bedrock Batch S3 bucket, get tags and details of any Bedrock
            batch inference jobs, and report success or failure of tasks to Step Functions which doesn't allow resource
            restriction.`,
            },
        ], true);
        new aws_cdk_lib_1.aws_events.Rule(this, 'BedrockInferenceJobEventHandler', {
            eventPattern: {
                source: ['aws.bedrock'],
                detailType: ['Batch Inference Job State Change'],
                detail: {
                    status: ['Completed', 'PartiallyCompleted', 'Failed', 'Expired', 'Stopped'],
                },
            },
            targets: [new aws_cdk_lib_1.aws_events_targets.LambdaFunction(eventHandlerLambda, {})],
        });
    }
}
exports.BedrockInferenceJobEventHandler = BedrockInferenceJobEventHandler;
//# sourceMappingURL=data:application/json;base64,