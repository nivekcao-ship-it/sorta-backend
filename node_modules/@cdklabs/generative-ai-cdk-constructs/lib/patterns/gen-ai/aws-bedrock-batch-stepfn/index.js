"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BedrockBatchSfn = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const aws_cdk_lib_1 = require("aws-cdk-lib");
const cdk_nag_1 = require("cdk-nag");
const bedrock_inference_job_event_handler_1 = require("./bedrock-inference-job-event-handler");
const create_model_invocation_job_function_1 = require("./create-model-invocation-job-function");
/**
 * A state machine fragment that creates a Bedrock Batch Inference Job and waits for its completion.
 *
 * Input schema:
 * ```
 * {
 *   "job_name": string,        // Required. Name of the batch inference job
 *   "manifest_keys": string[],    // Required. List of S3 keys of the input manifest files
 *   "model_id": string        // Required. Model ID to use.
 * }
 * ```
 *
 * Output schema:
 * ```
 * {
 *   "status": string,        // Required. Status of the batch job. One of: "Completed" or "PartiallyCompleted"
 *   "bucket": string,        // Required. S3 bucket where the output is stored
 *   "keys": string[]         // Required. Array of S3 keys for the output files
 * }
 * ```
 *
 * Error schema:
 * ```
 * {
 *   "status": string,        // Required. Status will be one of: "Failed", "Stopped", or "Expired"
 *   "error": string,         // Required. Error code
 *   "cause": string          // Required. Error message
 * }
 * ```
 */
class BedrockBatchSfn extends aws_cdk_lib_1.aws_stepfunctions.StateMachineFragment {
    constructor(parent, id, props) {
        super(parent, id);
        if (props.timeout && (props.timeout.toHours() < 24 || props.timeout.toHours() > 168)) {
            throw new Error('Timeout must be between 24 hours and 1 week (168 hours).');
        }
        const batchJobEventHandler = bedrock_inference_job_event_handler_1.BedrockInferenceJobEventHandler.getOrCreate(this);
        props.bedrockBatchOutputBucket.grantRead(batchJobEventHandler);
        const bedrockBatchRole = new aws_cdk_lib_1.aws_iam.Role(this, 'BedrockBatchRole', {
            assumedBy: new aws_cdk_lib_1.aws_iam.ServicePrincipal('bedrock.amazonaws.com'),
        });
        let bedrockBatchPolicy;
        if (props.bedrockBatchPolicy) {
            bedrockBatchRole.addManagedPolicy(props.bedrockBatchPolicy);
            bedrockBatchPolicy = props.bedrockBatchPolicy;
        }
        else {
            bedrockBatchPolicy = new aws_cdk_lib_1.aws_iam.ManagedPolicy(this, 'BedrockBatchPolicy', {
                statements: [
                    new aws_cdk_lib_1.aws_iam.PolicyStatement({
                        sid: 'Inference',
                        actions: ['bedrock:InvokeModel', 'bedrock:CreateModelInvocationJob'],
                        resources: [
                            'arn:aws:bedrock:*::foundation-model/*',
                            aws_cdk_lib_1.Stack.of(this).formatArn({
                                service: 'bedrock',
                                resource: 'inference-profile',
                                resourceName: '*',
                            }),
                        ],
                    }),
                ],
            });
            if (bedrockBatchPolicy instanceof aws_cdk_lib_1.aws_iam.ManagedPolicy) {
                cdk_nag_1.NagSuppressions.addResourceSuppressions(bedrockBatchPolicy, [
                    {
                        id: 'AwsSolutions-IAM5',
                        reason: 'Wildcards allow Bedrock inference and model invocation jobs.',
                    },
                ], true);
            }
            bedrockBatchRole.addManagedPolicy(bedrockBatchPolicy);
        }
        bedrockBatchRole.assumeRolePolicy?.addStatements(new aws_cdk_lib_1.aws_iam.PolicyStatement({
            principals: [new aws_cdk_lib_1.aws_iam.ServicePrincipal('bedrock.amazonaws.com')],
            actions: ['sts:AssumeRole'],
            conditions: {
                StringEquals: {
                    'aws:SourceAccount': aws_cdk_lib_1.Stack.of(this).account,
                },
                ArnLike: {
                    'aws:SourceArn': aws_cdk_lib_1.Stack.of(this).formatArn({
                        service: 'bedrock',
                        resource: 'model-invocation-job',
                        resourceName: '*',
                    }),
                },
            },
        }));
        props.bedrockBatchInputBucket.grantRead(bedrockBatchRole);
        props.bedrockBatchOutputBucket.grantReadWrite(bedrockBatchRole);
        cdk_nag_1.NagSuppressions.addResourceSuppressions(this, [
            {
                id: 'AwsSolutions-IAM5',
                reason: 'This role has wildcards so any Bedrock model invocation job can work with any bedrock foundation model ' +
                    'and read and write any object in a specific S3 bucket.',
            },
        ], true);
        const createModelInvocationJobFunction = new create_model_invocation_job_function_1.CreateModelInvocationJobFunction(this, 'CreateModelInvocationJobFunction', {
            bedrockBatchPolicy: bedrockBatchPolicy,
        });
        bedrockBatchRole.grantPassRole(createModelInvocationJobFunction.role);
        const createModelInvocationJobTask = new aws_cdk_lib_1.aws_stepfunctions_tasks.LambdaInvoke(this, 'CreateModelInvocationJobTask', {
            lambdaFunction: createModelInvocationJobFunction,
            integrationPattern: aws_cdk_lib_1.aws_stepfunctions.IntegrationPattern.WAIT_FOR_TASK_TOKEN,
            heartbeatTimeout: aws_cdk_lib_1.aws_stepfunctions.Timeout.duration(props.timeout ? props.timeout : aws_cdk_lib_1.Duration.hours(48)),
            payload: aws_cdk_lib_1.aws_stepfunctions.TaskInput.fromObject({
                jobName: aws_cdk_lib_1.aws_stepfunctions.JsonPath.format('{}{}', aws_cdk_lib_1.aws_stepfunctions.JsonPath.stringAt('$.job_name'), aws_cdk_lib_1.aws_stepfunctions.JsonPath.stringAt('$.index')),
                roleArn: bedrockBatchRole.roleArn,
                modelId: aws_cdk_lib_1.aws_stepfunctions.JsonPath.stringAt('$.model_id'),
                inputDataConfig: {
                    s3InputDataConfig: {
                        s3Uri: aws_cdk_lib_1.aws_stepfunctions.JsonPath.format('s3://' + props.bedrockBatchInputBucket.bucketName + '/{}', aws_cdk_lib_1.aws_stepfunctions.JsonPath.stringAt('$.manifest_key')),
                    },
                },
                outputDataConfig: {
                    s3OutputDataConfig: {
                        s3Uri: aws_cdk_lib_1.aws_stepfunctions.JsonPath.format('s3://' + props.bedrockBatchOutputBucket.bucketName + '/output/{}/', aws_cdk_lib_1.aws_stepfunctions.JsonPath.stringAt('$.job_name')),
                    },
                },
                timeoutDurationInHours: props.timeout ? props.timeout.toHours() : 48,
                TaskToken: aws_cdk_lib_1.aws_stepfunctions.JsonPath.stringAt('$$.Task.Token'),
            }),
        });
        const batchEvaluateMap = new aws_cdk_lib_1.aws_stepfunctions.Map(this, 'BatchEvaluateMap', {
            inputPath: props.inputPath,
            itemsPath: aws_cdk_lib_1.aws_stepfunctions.JsonPath.stringAt('$.manifest_keys'),
            itemSelector: {
                job_name: aws_cdk_lib_1.aws_stepfunctions.JsonPath.stringAt('$.job_name'),
                model_id: aws_cdk_lib_1.aws_stepfunctions.JsonPath.stringAt('$.model_id'),
                index: aws_cdk_lib_1.aws_stepfunctions.JsonPath.numberAt('$$.Map.Item.Index'),
                manifest_key: aws_cdk_lib_1.aws_stepfunctions.JsonPath.stringAt('$$.Map.Item.Value'),
            },
            resultPath: props.resultPath,
        });
        batchEvaluateMap.itemProcessor(createModelInvocationJobTask);
        this.startState = batchEvaluateMap;
        this.endStates = batchEvaluateMap.endStates;
    }
}
exports.BedrockBatchSfn = BedrockBatchSfn;
_a = JSII_RTTI_SYMBOL_1;
BedrockBatchSfn[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.BedrockBatchSfn", version: "0.1.309" };
//# sourceMappingURL=data:application/json;base64,