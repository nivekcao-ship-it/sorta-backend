"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomSageMakerEndpoint = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const cdk = require("aws-cdk-lib");
const applicationautoscaling = require("aws-cdk-lib/aws-applicationautoscaling");
const iam = require("aws-cdk-lib/aws-iam");
const kms = require("aws-cdk-lib/aws-kms");
const sagemaker = require("aws-cdk-lib/aws-sagemaker");
const sns = require("aws-cdk-lib/aws-sns");
const sagemaker_endpoint_base_1 = require("./sagemaker-endpoint-base");
const base_class_1 = require("../../../common/base-class");
class CustomSageMakerEndpoint extends sagemaker_endpoint_base_1.SageMakerEndpointBase {
    constructor(scope, id, props) {
        super(scope, id);
        const baseProps = {
            constructName: base_class_1.ConstructName.CUSTOMSAGEMAKERENDPOINT,
            constructId: id,
        };
        // No lambda function to use AWS SDK for service metric
        const lambdaFunctions = [];
        this.updateConstructUsageMetricCode(baseProps, scope, lambdaFunctions);
        this.instanceType = props.instanceType;
        this.modelId = props.modelId;
        this.instanceCount = Math.max(1, props.instanceCount ?? 1);
        this.role = props.role ?? this.createSageMakerRole();
        this.grantPrincipal = this.role;
        this.modelDataUrl = props.modelDataUrl;
        this.startupHealthCheckTimeoutInSeconds = props.startupHealthCheckTimeoutInSeconds ?? 600;
        this.environment = props.environment;
        this.modelDataDownloadTimeoutInSeconds = props.modelDataDownloadTimeoutInSeconds ?? 600;
        const image = props.container.bind(this, this.grantPrincipal).imageName;
        const modelIdStr = this.modelId.split('/').join('-').split('.').join('-');
        const isArtifactCompressed = this.modelDataUrl.endsWith('.tar.gz');
        const model = new sagemaker.CfnModel(scope, `${modelIdStr}-model-${id}`, {
            executionRoleArn: this.role.roleArn,
            primaryContainer: isArtifactCompressed ? {
                image,
                mode: 'SingleModel',
                modelDataUrl: this.modelDataUrl,
                environment: {
                    SAGEMAKER_REGION: cdk.Aws.REGION,
                    ...this.environment,
                },
            } : {
                image,
                mode: 'SingleModel',
                modelDataSource: {
                    s3DataSource: {
                        compressionType: 'None',
                        s3DataType: 'S3Prefix',
                        s3Uri: this.modelDataUrl,
                    },
                },
                environment: {
                    SAGEMAKER_REGION: cdk.Aws.REGION,
                    ...this.environment,
                },
            },
            tags: [
                {
                    key: 'modelId',
                    value: this.modelId,
                },
            ],
            vpcConfig: props.vpcConfig,
        });
        const productionVariant = {
            instanceType: this.instanceType.toString(),
            initialVariantWeight: 1,
            initialInstanceCount: this.instanceCount,
            variantName: 'AllTraffic',
            volumeSizeInGb: props.volumeSizeInGb,
            modelName: model.getAtt('ModelName').toString(),
            containerStartupHealthCheckTimeoutInSeconds: this.startupHealthCheckTimeoutInSeconds,
            modelDataDownloadTimeoutInSeconds: this.modelDataDownloadTimeoutInSeconds,
        };
        const endpointConfig = new sagemaker.CfnEndpointConfig(scope, `EndpointConfig-${id}`, {
            productionVariants: [productionVariant],
        });
        if (props.asyncInference) {
            // build sns topics for success and failure
            const successTopic = this.buildSnsTopic(`success-topic-${id}`, 'Success Topic');
            const failureTopic = this.buildSnsTopic(`failure-topic-${id}`, 'Failure Topic');
            this.errorTopic = failureTopic;
            this.successTopic = successTopic;
            // configure async inference
            const asyncInferenceConfigProperty = {
                outputConfig: {
                    s3FailurePath: props.asyncInference.failurePath,
                    s3OutputPath: props.asyncInference.outputPath,
                    notificationConfig: {
                        successTopic: successTopic.topicArn,
                        errorTopic: failureTopic.topicArn,
                    },
                },
                clientConfig: {
                    maxConcurrentInvocationsPerInstance: props.asyncInference.maxConcurrentInvocationsPerInstance ?? 10,
                },
            };
            endpointConfig.asyncInferenceConfig = asyncInferenceConfigProperty;
        }
        endpointConfig.addDependency(model);
        const endpoint = new sagemaker.CfnEndpoint(scope, `${modelIdStr}-endpoint-${id}`, {
            endpointName: props.endpointName,
            endpointConfigName: endpointConfig.getAtt('EndpointConfigName').toString(),
            tags: [
                {
                    key: 'modelId',
                    value: this.modelId,
                },
            ],
        });
        endpoint.addDependency(endpointConfig);
        this.cfnModel = model;
        this.cfnEndpoint = endpoint;
        this.cfnEndpointConfig = endpointConfig;
        this.endpointArn = endpoint.ref;
        this.scalingPolicy = this.buildScalingPolicy(endpoint, productionVariant, props);
    }
    addToRolePolicy(statement) {
        if (!this.role) {
            return;
        }
        this.role.addToPolicy(statement);
    }
    grantInvoke(grantee) {
        return iam.Grant.addToPrincipal({
            grantee,
            actions: ['sagemaker:InvokeEndpoint'],
            resourceArns: [this.endpointArn],
        });
    }
    buildScalingPolicy(endpoint, productionVariants, props) {
        const resourceId = `endpoint/${endpoint.attrEndpointName}/variant/${productionVariants.variantName}`;
        const scalableTarget = new applicationautoscaling.ScalableTarget(this, 'ScalableTarget', {
            serviceNamespace: applicationautoscaling.ServiceNamespace.SAGEMAKER,
            resourceId: resourceId,
            scalableDimension: 'sagemaker:variant:DesiredInstanceCount',
            minCapacity: props.minCapacity ?? 1,
            maxCapacity: props.maxCapacity ?? 2,
        });
        scalableTarget.node.addDependency(endpoint);
        const approximateBacklogMetric = new cdk.aws_cloudwatch.Metric({
            namespace: 'AWS/SageMaker',
            metricName: 'ApproximateBacklogSizePerInstance',
            dimensionsMap: {
                Endpoint: endpoint.attrEndpointName,
                Variant: productionVariants.variantName,
            },
            statistic: 'Average',
            period: cdk.Duration.minutes(5),
        });
        const scalingPolicy = new applicationautoscaling.StepScalingPolicy(this, 'ScalingPolicy', {
            scalingTarget: scalableTarget,
            adjustmentType: applicationautoscaling.AdjustmentType.CHANGE_IN_CAPACITY,
            metric: approximateBacklogMetric,
            scalingSteps: [
                { upper: 0, change: -1, lower: 0 },
                { change: 1, lower: 0.5 },
            ],
            cooldown: cdk.Duration.minutes(5),
            datapointsToAlarm: 1,
            evaluationPeriods: 1,
        });
        return scalingPolicy;
    }
    buildSnsTopic(topicName, displayName) {
        const masterKey = kms.Alias.fromAliasName(this, `aws-managed-key-${topicName}`, 'alias/aws/sns');
        const topic = new sns.Topic(this, topicName, {
            topicName,
            displayName,
            masterKey: masterKey,
        });
        topic.grantPublish(this.role);
        topic.addToResourcePolicy(new iam.PolicyStatement({
            actions: ['sns:Publish'],
            effect: iam.Effect.DENY,
            resources: [topic.topicArn],
            conditions: {
                Bool: {
                    'aws:SecureTransport': 'false',
                },
            },
            principals: [new iam.AnyPrincipal()],
        }));
        return topic;
    }
}
exports.CustomSageMakerEndpoint = CustomSageMakerEndpoint;
_a = JSII_RTTI_SYMBOL_1;
CustomSageMakerEndpoint[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.CustomSageMakerEndpoint", version: "0.1.309" };
//# sourceMappingURL=data:application/json;base64,