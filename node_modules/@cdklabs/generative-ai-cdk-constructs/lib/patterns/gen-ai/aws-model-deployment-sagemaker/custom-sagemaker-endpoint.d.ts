/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
import * as applicationautoscaling from 'aws-cdk-lib/aws-applicationautoscaling';
import * as iam from 'aws-cdk-lib/aws-iam';
import * as sagemaker from 'aws-cdk-lib/aws-sagemaker';
import * as sns from 'aws-cdk-lib/aws-sns';
import { Construct } from 'constructs';
import { ContainerImage } from './container-image';
import { SageMakerEndpointBase } from './sagemaker-endpoint-base';
import { SageMakerInstanceType } from './sagemaker-instance-type';
export interface AsyncInferenceConfig {
    readonly failurePath: string;
    readonly outputPath: string;
    readonly maxConcurrentInvocationsPerInstance?: number;
}
export interface CustomSageMakerEndpointProps {
    readonly modelId: string;
    readonly endpointName: string;
    readonly instanceType: SageMakerInstanceType;
    readonly minCapacity?: number;
    readonly maxCapacity?: number;
    readonly container: ContainerImage;
    readonly instanceCount?: number;
    readonly role?: iam.Role;
    readonly environment?: {
        [key: string]: string;
    };
    readonly startupHealthCheckTimeoutInSeconds?: number;
    readonly modelDataDownloadTimeoutInSeconds?: number;
    readonly volumeSizeInGb?: number | undefined;
    readonly vpcConfig?: sagemaker.CfnModel.VpcConfigProperty | undefined;
    readonly modelDataUrl: string;
    readonly asyncInference?: AsyncInferenceConfig | undefined;
}
export declare class CustomSageMakerEndpoint extends SageMakerEndpointBase implements iam.IGrantable {
    readonly grantPrincipal: iam.IPrincipal;
    readonly endpointArn: string;
    readonly cfnModel: sagemaker.CfnModel;
    readonly cfnEndpoint: sagemaker.CfnEndpoint;
    readonly cfnEndpointConfig: sagemaker.CfnEndpointConfig;
    readonly scalingPolicy: applicationautoscaling.StepScalingPolicy;
    readonly successTopic?: sns.Topic;
    readonly errorTopic?: sns.Topic;
    readonly instanceType?: SageMakerInstanceType;
    readonly instanceCount: number;
    readonly role: iam.Role;
    readonly modelDataUrl: string;
    readonly modelId: string;
    readonly modelDataDownloadTimeoutInSeconds: number;
    private readonly startupHealthCheckTimeoutInSeconds;
    private readonly environment?;
    constructor(scope: Construct, id: string, props: CustomSageMakerEndpointProps);
    addToRolePolicy(statement: iam.PolicyStatement): void;
    grantInvoke(grantee: iam.IGrantable): iam.Grant;
    private buildScalingPolicy;
    private buildSnsTopic;
}
