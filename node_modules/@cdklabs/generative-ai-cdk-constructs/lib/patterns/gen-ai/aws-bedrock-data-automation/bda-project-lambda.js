"use strict";
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BdaProjectLambda = void 0;
const path = require("path");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const cdk_nag_1 = require("cdk-nag");
/**
 * Lambda function that manages BDA project creation
 */
class BdaProjectLambda extends aws_cdk_lib_1.aws_lambda.Function {
    constructor(scope, id, props) {
        const role = new aws_cdk_lib_1.aws_iam.Role(scope, `${id}manageProject`, {
            assumedBy: new aws_cdk_lib_1.aws_iam.ServicePrincipal('lambda.amazonaws.com'),
        });
        super(scope, id, {
            runtime: aws_cdk_lib_1.aws_lambda.Runtime.PYTHON_3_13,
            handler: 'lambda.handler',
            code: aws_cdk_lib_1.aws_lambda.Code.fromAsset(path.join(__dirname, '../../../../lambda/aws-bedrock-data-automation/bda_project')),
            layers: props.lambdaLayers,
            description: 'BDA control plane for BDA project operations',
            environment: {
                INPUT_BUCKET: props.inputBucket.bucketName,
                POWERTOOLS_SERVICE_NAME: 'BEDROCK_PROJECT',
            },
            memorySize: 1024,
            role: role,
            architecture: aws_cdk_lib_1.aws_lambda.Architecture.X86_64,
            timeout: aws_cdk_lib_1.Duration.minutes(15),
        });
        // Add basic permissions for CloudWatch logs
        const cloudwatchLogsPolicy = new aws_cdk_lib_1.aws_iam.Policy(scope, `${id}LambdaBasicExecPolicy`, {
            statements: [
                new aws_cdk_lib_1.aws_iam.PolicyStatement({
                    effect: aws_cdk_lib_1.aws_iam.Effect.ALLOW,
                    actions: [
                        'logs:CreateLogGroup',
                        'logs:CreateLogStream',
                        'logs:PutLogEvents',
                    ],
                    resources: [
                        `arn:aws:logs:${aws_cdk_lib_1.Aws.REGION}:${aws_cdk_lib_1.Aws.ACCOUNT_ID}:log-group:/aws/lambda/${this.functionName}`,
                        `arn:aws:logs:${aws_cdk_lib_1.Aws.REGION}:${aws_cdk_lib_1.Aws.ACCOUNT_ID}:log-group:/aws/lambda/${this.functionName}:*`,
                    ],
                }),
            ],
        });
        cdk_nag_1.NagSuppressions.addResourceSuppressions(cloudwatchLogsPolicy, [{ id: 'AwsSolutions-IAM5', reason: 'Lambda requires CloudWatch logs permissions with log group name patterns' }]);
        role.attachInlinePolicy(cloudwatchLogsPolicy);
        // Permissions for BDA
        const bedrockBDAPolicy = new aws_cdk_lib_1.aws_iam.Policy(scope, `${id}BedrockBDAProjectPolicy`, {
            statements: [
                new aws_cdk_lib_1.aws_iam.PolicyStatement({
                    effect: aws_cdk_lib_1.aws_iam.Effect.ALLOW,
                    actions: [
                        'bedrock:CreateDataAutomationProject',
                        'bedrock:ListDataAutomationProjects',
                        'bedrock:DeleteDataAutomationProject',
                        'bedrock:GetDataAutomationProject',
                    ],
                    resources: ['*'],
                }),
            ],
        });
        cdk_nag_1.NagSuppressions.addResourceSuppressions(bedrockBDAPolicy, [{
                id: 'AwsSolutions-IAM5',
                reason: 'Project Lambda need access for managing data processing projects',
            }], true);
        role.attachInlinePolicy(bedrockBDAPolicy);
        // Give Lambda access to the bucket
        if (this.role) {
            props.inputBucket.grantReadWrite(this.role);
        }
        cdk_nag_1.NagSuppressions.addResourceSuppressions(role, [{
                id: 'AwsSolutions-IAM5',
                reason: 'Lambda needs read access to process files from the input bucket',
            }], true);
    }
}
exports.BdaProjectLambda = BdaProjectLambda;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmRhLXByb2plY3QtbGFtYmRhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3BhdHRlcm5zL2dlbi1haS9hd3MtYmVkcm9jay1kYXRhLWF1dG9tYXRpb24vYmRhLXByb2plY3QtbGFtYmRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7R0FXRzs7O0FBRUgsNkJBQTZCO0FBQzdCLDZDQUFrRjtBQUVsRixxQ0FBMEM7QUFtQjFDOztHQUVHO0FBQ0gsTUFBYSxnQkFBaUIsU0FBUSx3QkFBTSxDQUFDLFFBQVE7SUFFbkQsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUE0QjtRQUVwRSxNQUFNLElBQUksR0FBRyxJQUFJLHFCQUFHLENBQUMsSUFBSSxDQUN2QixLQUFLLEVBQ0wsR0FBRyxFQUFFLGVBQWUsRUFDcEI7WUFDRSxTQUFTLEVBQUUsSUFBSSxxQkFBRyxDQUFDLGdCQUFnQixDQUFDLHNCQUFzQixDQUFDO1NBQzVELENBQ0YsQ0FBQztRQUVGLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFO1lBRWYsT0FBTyxFQUFFLHdCQUFNLENBQUMsT0FBTyxDQUFDLFdBQVc7WUFDbkMsT0FBTyxFQUFFLGdCQUFnQjtZQUN6QixJQUFJLEVBQUUsd0JBQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLDREQUE0RCxDQUFDLENBQUM7WUFDL0csTUFBTSxFQUFFLEtBQUssQ0FBQyxZQUFZO1lBQzFCLFdBQVcsRUFBRSw4Q0FBOEM7WUFDM0QsV0FBVyxFQUFFO2dCQUNYLFlBQVksRUFBRSxLQUFLLENBQUMsV0FBVyxDQUFDLFVBQVU7Z0JBQzFDLHVCQUF1QixFQUFFLGlCQUFpQjthQUMzQztZQUNELFVBQVUsRUFBRSxJQUFJO1lBQ2hCLElBQUksRUFBRSxJQUFJO1lBQ1YsWUFBWSxFQUFFLHdCQUFNLENBQUMsWUFBWSxDQUFDLE1BQU07WUFDeEMsT0FBTyxFQUFFLHNCQUFRLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztTQUM5QixDQUFDLENBQUM7UUFFSCw0Q0FBNEM7UUFDNUMsTUFBTSxvQkFBb0IsR0FBRyxJQUFJLHFCQUFHLENBQUMsTUFBTSxDQUN6QyxLQUFLLEVBQ0wsR0FBRyxFQUFFLHVCQUF1QixFQUM1QjtZQUNFLFVBQVUsRUFBRTtnQkFDVixJQUFJLHFCQUFHLENBQUMsZUFBZSxDQUFDO29CQUN0QixNQUFNLEVBQUUscUJBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSztvQkFDeEIsT0FBTyxFQUFFO3dCQUNQLHFCQUFxQjt3QkFDckIsc0JBQXNCO3dCQUN0QixtQkFBbUI7cUJBQ3BCO29CQUNELFNBQVMsRUFBRTt3QkFDVCxnQkFBZ0IsaUJBQUcsQ0FBQyxNQUFNLElBQUksaUJBQUcsQ0FBQyxVQUFVLDBCQUEwQixJQUFJLENBQUMsWUFBWSxFQUFFO3dCQUN6RixnQkFBZ0IsaUJBQUcsQ0FBQyxNQUFNLElBQUksaUJBQUcsQ0FBQyxVQUFVLDBCQUEwQixJQUFJLENBQUMsWUFBWSxJQUFJO3FCQUM1RjtpQkFDRixDQUFDO2FBQ0g7U0FDRixDQUNGLENBQUM7UUFFRix5QkFBZSxDQUFDLHVCQUF1QixDQUNyQyxvQkFBb0IsRUFDcEIsQ0FBQyxFQUFFLEVBQUUsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLEVBQUUsMEVBQTBFLEVBQUUsQ0FBQyxDQUNsSCxDQUFDO1FBRUYsSUFBSSxDQUFDLGtCQUFrQixDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFFOUMsc0JBQXNCO1FBQ3RCLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxxQkFBRyxDQUFDLE1BQU0sQ0FDckMsS0FBSyxFQUNMLEdBQUcsRUFBRSx5QkFBeUIsRUFDOUI7WUFDRSxVQUFVLEVBQUU7Z0JBQ1YsSUFBSSxxQkFBRyxDQUFDLGVBQWUsQ0FBQztvQkFDdEIsTUFBTSxFQUFFLHFCQUFHLENBQUMsTUFBTSxDQUFDLEtBQUs7b0JBQ3hCLE9BQU8sRUFBRTt3QkFDUCxxQ0FBcUM7d0JBQ3JDLG9DQUFvQzt3QkFDcEMscUNBQXFDO3dCQUNyQyxrQ0FBa0M7cUJBQ25DO29CQUNELFNBQVMsRUFBRSxDQUFDLEdBQUcsQ0FBQztpQkFDakIsQ0FBQzthQUNIO1NBQ0YsQ0FDRixDQUFDO1FBRUYseUJBQWUsQ0FBQyx1QkFBdUIsQ0FDckMsZ0JBQWdCLEVBQ2hCLENBQUM7Z0JBQ0MsRUFBRSxFQUFFLG1CQUFtQjtnQkFDdkIsTUFBTSxFQUFFLGtFQUFrRTthQUMzRSxDQUFDLEVBQ0YsSUFBSSxDQUNMLENBQUM7UUFDRixJQUFJLENBQUMsa0JBQWtCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUUxQyxtQ0FBbUM7UUFDbkMsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDZCxLQUFLLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUMsQ0FBQztRQUVELHlCQUFlLENBQUMsdUJBQXVCLENBQ3JDLElBQUksRUFDSixDQUFDO2dCQUNDLEVBQUUsRUFBRSxtQkFBbUI7Z0JBQ3ZCLE1BQU0sRUFBRSxpRUFBaUU7YUFDMUUsQ0FBQyxFQUNGLElBQUksQ0FDTCxDQUFDO0lBRUosQ0FBQztDQUNGO0FBdkdELDRDQXVHQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogIENvcHlyaWdodCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpLiBZb3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiAgd2l0aCB0aGUgTGljZW5zZS4gQSBjb3B5IG9mIHRoZSBMaWNlbnNlIGlzIGxvY2F0ZWQgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqICBvciBpbiB0aGUgJ2xpY2Vuc2UnIGZpbGUgYWNjb21wYW55aW5nIHRoaXMgZmlsZS4gVGhpcyBmaWxlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICdBUyBJUycgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFU1xuICogIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zXG4gKiAgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBhd3NfaWFtIGFzIGlhbSwgYXdzX2xhbWJkYSBhcyBsYW1iZGEsIER1cmF0aW9uLCBBd3MgfSBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgKiBhcyBzMyBmcm9tICdhd3MtY2RrLWxpYi9hd3MtczMnO1xuaW1wb3J0IHsgTmFnU3VwcHJlc3Npb25zIH0gZnJvbSAnY2RrLW5hZyc7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBjcmVhdGluZyBhIEJkYVByb2plY3RMYW1iZGFQcm9wc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIEJkYVByb2plY3RMYW1iZGFQcm9wcyB7XG4gIC8qKlxuICAgKiBUaGUgUzMgYnVja2V0XG4gICAqIGZvciBpbnB1dCBkYXRhIHVzZWQgYnkgdGhlIEJlZHJvY2sgRGF0YSBBdXRvbWF0aW9uIHByb2Nlc3MuXG4gICAqIElmIG5vdCBwcm92aWRlZCwgYSBuZXcgYnVja2V0IHdpbGwgYmUgY3JlYXRlZC5cbiAgICovXG4gIHJlYWRvbmx5IGlucHV0QnVja2V0OiBzMy5JQnVja2V0O1xuICAvKipcbiAgICogVGhlIGxheWVycyB0byBhcHBseSB0byB0aGlzIGxhbWJkYSBmdW5jdGlvbi5cbiAgICovXG4gIHJlYWRvbmx5IGxhbWJkYUxheWVyczogbGFtYmRhLklMYXllclZlcnNpb25bXTtcbn1cblxuLyoqXG4gKiBMYW1iZGEgZnVuY3Rpb24gdGhhdCBtYW5hZ2VzIEJEQSBwcm9qZWN0IGNyZWF0aW9uXG4gKi9cbmV4cG9ydCBjbGFzcyBCZGFQcm9qZWN0TGFtYmRhIGV4dGVuZHMgbGFtYmRhLkZ1bmN0aW9uIHtcblxuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogQmRhUHJvamVjdExhbWJkYVByb3BzKSB7XG5cbiAgICBjb25zdCByb2xlID0gbmV3IGlhbS5Sb2xlKFxuICAgICAgc2NvcGUsXG4gICAgICBgJHtpZH1tYW5hZ2VQcm9qZWN0YCxcbiAgICAgIHtcbiAgICAgICAgYXNzdW1lZEJ5OiBuZXcgaWFtLlNlcnZpY2VQcmluY2lwYWwoJ2xhbWJkYS5hbWF6b25hd3MuY29tJyksXG4gICAgICB9LFxuICAgICk7XG5cbiAgICBzdXBlcihzY29wZSwgaWQsIHtcblxuICAgICAgcnVudGltZTogbGFtYmRhLlJ1bnRpbWUuUFlUSE9OXzNfMTMsXG4gICAgICBoYW5kbGVyOiAnbGFtYmRhLmhhbmRsZXInLFxuICAgICAgY29kZTogbGFtYmRhLkNvZGUuZnJvbUFzc2V0KHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi8uLi8uLi8uLi9sYW1iZGEvYXdzLWJlZHJvY2stZGF0YS1hdXRvbWF0aW9uL2JkYV9wcm9qZWN0JykpLFxuICAgICAgbGF5ZXJzOiBwcm9wcy5sYW1iZGFMYXllcnMsXG4gICAgICBkZXNjcmlwdGlvbjogJ0JEQSBjb250cm9sIHBsYW5lIGZvciBCREEgcHJvamVjdCBvcGVyYXRpb25zJyxcbiAgICAgIGVudmlyb25tZW50OiB7XG4gICAgICAgIElOUFVUX0JVQ0tFVDogcHJvcHMuaW5wdXRCdWNrZXQuYnVja2V0TmFtZSxcbiAgICAgICAgUE9XRVJUT09MU19TRVJWSUNFX05BTUU6ICdCRURST0NLX1BST0pFQ1QnLFxuICAgICAgfSxcbiAgICAgIG1lbW9yeVNpemU6IDEwMjQsXG4gICAgICByb2xlOiByb2xlLFxuICAgICAgYXJjaGl0ZWN0dXJlOiBsYW1iZGEuQXJjaGl0ZWN0dXJlLlg4Nl82NCxcbiAgICAgIHRpbWVvdXQ6IER1cmF0aW9uLm1pbnV0ZXMoMTUpLFxuICAgIH0pO1xuXG4gICAgLy8gQWRkIGJhc2ljIHBlcm1pc3Npb25zIGZvciBDbG91ZFdhdGNoIGxvZ3NcbiAgICBjb25zdCBjbG91ZHdhdGNoTG9nc1BvbGljeSA9IG5ldyBpYW0uUG9saWN5KFxuICAgICAgc2NvcGUsXG4gICAgICBgJHtpZH1MYW1iZGFCYXNpY0V4ZWNQb2xpY3lgLFxuICAgICAge1xuICAgICAgICBzdGF0ZW1lbnRzOiBbXG4gICAgICAgICAgbmV3IGlhbS5Qb2xpY3lTdGF0ZW1lbnQoe1xuICAgICAgICAgICAgZWZmZWN0OiBpYW0uRWZmZWN0LkFMTE9XLFxuICAgICAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAgICAnbG9nczpDcmVhdGVMb2dHcm91cCcsXG4gICAgICAgICAgICAgICdsb2dzOkNyZWF0ZUxvZ1N0cmVhbScsXG4gICAgICAgICAgICAgICdsb2dzOlB1dExvZ0V2ZW50cycsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgcmVzb3VyY2VzOiBbXG4gICAgICAgICAgICAgIGBhcm46YXdzOmxvZ3M6JHtBd3MuUkVHSU9OfToke0F3cy5BQ0NPVU5UX0lEfTpsb2ctZ3JvdXA6L2F3cy9sYW1iZGEvJHt0aGlzLmZ1bmN0aW9uTmFtZX1gLFxuICAgICAgICAgICAgICBgYXJuOmF3czpsb2dzOiR7QXdzLlJFR0lPTn06JHtBd3MuQUNDT1VOVF9JRH06bG9nLWdyb3VwOi9hd3MvbGFtYmRhLyR7dGhpcy5mdW5jdGlvbk5hbWV9OipgLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgXSxcbiAgICAgIH0sXG4gICAgKTtcblxuICAgIE5hZ1N1cHByZXNzaW9ucy5hZGRSZXNvdXJjZVN1cHByZXNzaW9ucyhcbiAgICAgIGNsb3Vkd2F0Y2hMb2dzUG9saWN5LFxuICAgICAgW3sgaWQ6ICdBd3NTb2x1dGlvbnMtSUFNNScsIHJlYXNvbjogJ0xhbWJkYSByZXF1aXJlcyBDbG91ZFdhdGNoIGxvZ3MgcGVybWlzc2lvbnMgd2l0aCBsb2cgZ3JvdXAgbmFtZSBwYXR0ZXJucycgfV0sXG4gICAgKTtcblxuICAgIHJvbGUuYXR0YWNoSW5saW5lUG9saWN5KGNsb3Vkd2F0Y2hMb2dzUG9saWN5KTtcblxuICAgIC8vIFBlcm1pc3Npb25zIGZvciBCREFcbiAgICBjb25zdCBiZWRyb2NrQkRBUG9saWN5ID0gbmV3IGlhbS5Qb2xpY3koXG4gICAgICBzY29wZSxcbiAgICAgIGAke2lkfUJlZHJvY2tCREFQcm9qZWN0UG9saWN5YCxcbiAgICAgIHtcbiAgICAgICAgc3RhdGVtZW50czogW1xuICAgICAgICAgIG5ldyBpYW0uUG9saWN5U3RhdGVtZW50KHtcbiAgICAgICAgICAgIGVmZmVjdDogaWFtLkVmZmVjdC5BTExPVyxcbiAgICAgICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgICAgJ2JlZHJvY2s6Q3JlYXRlRGF0YUF1dG9tYXRpb25Qcm9qZWN0JyxcbiAgICAgICAgICAgICAgJ2JlZHJvY2s6TGlzdERhdGFBdXRvbWF0aW9uUHJvamVjdHMnLFxuICAgICAgICAgICAgICAnYmVkcm9jazpEZWxldGVEYXRhQXV0b21hdGlvblByb2plY3QnLFxuICAgICAgICAgICAgICAnYmVkcm9jazpHZXREYXRhQXV0b21hdGlvblByb2plY3QnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIHJlc291cmNlczogWycqJ10sXG4gICAgICAgICAgfSksXG4gICAgICAgIF0sXG4gICAgICB9LFxuICAgICk7XG5cbiAgICBOYWdTdXBwcmVzc2lvbnMuYWRkUmVzb3VyY2VTdXBwcmVzc2lvbnMoXG4gICAgICBiZWRyb2NrQkRBUG9saWN5LFxuICAgICAgW3tcbiAgICAgICAgaWQ6ICdBd3NTb2x1dGlvbnMtSUFNNScsXG4gICAgICAgIHJlYXNvbjogJ1Byb2plY3QgTGFtYmRhIG5lZWQgYWNjZXNzIGZvciBtYW5hZ2luZyBkYXRhIHByb2Nlc3NpbmcgcHJvamVjdHMnLFxuICAgICAgfV0sXG4gICAgICB0cnVlLFxuICAgICk7XG4gICAgcm9sZS5hdHRhY2hJbmxpbmVQb2xpY3koYmVkcm9ja0JEQVBvbGljeSk7XG5cbiAgICAvLyBHaXZlIExhbWJkYSBhY2Nlc3MgdG8gdGhlIGJ1Y2tldFxuICAgIGlmICh0aGlzLnJvbGUpIHtcbiAgICAgIHByb3BzLmlucHV0QnVja2V0LmdyYW50UmVhZFdyaXRlKHRoaXMucm9sZSk7XG4gICAgfVxuXG4gICAgTmFnU3VwcHJlc3Npb25zLmFkZFJlc291cmNlU3VwcHJlc3Npb25zKFxuICAgICAgcm9sZSxcbiAgICAgIFt7XG4gICAgICAgIGlkOiAnQXdzU29sdXRpb25zLUlBTTUnLFxuICAgICAgICByZWFzb246ICdMYW1iZGEgbmVlZHMgcmVhZCBhY2Nlc3MgdG8gcHJvY2VzcyBmaWxlcyBmcm9tIHRoZSBpbnB1dCBidWNrZXQnLFxuICAgICAgfV0sXG4gICAgICB0cnVlLFxuICAgICk7XG5cbiAgfVxufSJdfQ==