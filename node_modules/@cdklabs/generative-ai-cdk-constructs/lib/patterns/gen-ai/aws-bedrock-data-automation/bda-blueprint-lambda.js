"use strict";
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BdaBlueprintLambda = void 0;
const path = require("path");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const cdk_nag_1 = require("cdk-nag");
/**
 * Lambda function that manages BDA blueprint creation
 */
class BdaBlueprintLambda extends aws_cdk_lib_1.aws_lambda.Function {
    constructor(scope, id, props) {
        const role = new aws_cdk_lib_1.aws_iam.Role(scope, `${id}manageBlueprint`, {
            assumedBy: new aws_cdk_lib_1.aws_iam.ServicePrincipal('lambda.amazonaws.com'),
        });
        super(scope, id, {
            runtime: aws_cdk_lib_1.aws_lambda.Runtime.PYTHON_3_13,
            handler: 'lambda.handler',
            code: aws_cdk_lib_1.aws_lambda.Code.fromAsset(path.join(__dirname, '../../../../lambda/aws-bedrock-data-automation/bda_blueprint')),
            layers: props.lambdaLayers,
            description: 'BDA control plane for BDA blueprint operations',
            environment: {
                INPUT_BUCKET: props.inputBucket.bucketName,
                POWERTOOLS_SERVICE_NAME: 'BEDROCK_BLUEPRINT',
            },
            memorySize: 1024,
            role: role,
            architecture: aws_cdk_lib_1.aws_lambda.Architecture.X86_64,
            timeout: aws_cdk_lib_1.Duration.minutes(15),
        });
        // Add basic permissions for CloudWatch logs
        const cloudwatchLogsPolicy = new aws_cdk_lib_1.aws_iam.Policy(scope, `${id}LambdaBasicExecPolicy`, {
            statements: [
                new aws_cdk_lib_1.aws_iam.PolicyStatement({
                    effect: aws_cdk_lib_1.aws_iam.Effect.ALLOW,
                    actions: [
                        'logs:CreateLogGroup',
                        'logs:CreateLogStream',
                        'logs:PutLogEvents',
                    ],
                    resources: [
                        `arn:aws:logs:${aws_cdk_lib_1.Aws.REGION}:${aws_cdk_lib_1.Aws.ACCOUNT_ID}:log-group:/aws/lambda/${this.functionName}`,
                        `arn:aws:logs:${aws_cdk_lib_1.Aws.REGION}:${aws_cdk_lib_1.Aws.ACCOUNT_ID}:log-group:/aws/lambda/${this.functionName}:*`,
                    ],
                }),
            ],
        });
        cdk_nag_1.NagSuppressions.addResourceSuppressions(cloudwatchLogsPolicy, [{ id: 'AwsSolutions-IAM5', reason: 'Lambda requires CloudWatch logs permissions with log group name patterns' }]);
        role.attachInlinePolicy(cloudwatchLogsPolicy);
        // Permissions for BDA
        const BedrockBDABPPolicy = new aws_cdk_lib_1.aws_iam.Policy(scope, `${id}BedrockBDABPPolicy`, {
            statements: [
                new aws_cdk_lib_1.aws_iam.PolicyStatement({
                    effect: aws_cdk_lib_1.aws_iam.Effect.ALLOW,
                    actions: [
                        'bedrock:ListBlueprints',
                        'bedrock:DeleteBlueprint',
                        'bedrock:InvokeBlueprint',
                        'bedrock:ListBlueprintInvocations',
                        'bedrock:GetBlueprintInvocation',
                    ],
                    resources: ['*'],
                }),
            ],
        });
        cdk_nag_1.NagSuppressions.addResourceSuppressions(BedrockBDABPPolicy, [{
                id: 'AwsSolutions-IAM5',
                reason: 'Bedrock Blueprint operations require access to all blueprints as resource-level permissions are not supported',
            }], true);
        role.attachInlinePolicy(BedrockBDABPPolicy);
        const bedrockBDABPVersionPolicy = new aws_cdk_lib_1.aws_iam.Policy(scope, `${id}BedrockBDABPVersionPolicy`, {
            statements: [
                new aws_cdk_lib_1.aws_iam.PolicyStatement({
                    effect: aws_cdk_lib_1.aws_iam.Effect.ALLOW,
                    actions: [
                        'bedrock:CreateBlueprint',
                        'bedrock:CreateBlueprintVersion',
                    ],
                    resources: ['*'],
                }),
            ],
        });
        cdk_nag_1.NagSuppressions.addResourceSuppressions(bedrockBDABPVersionPolicy, [{
                id: 'AwsSolutions-IAM5',
                reason: 'Bedrock Blueprint version creation operations require access to all blueprints as resource-level permissions are not supported',
            }], true);
        role.attachInlinePolicy(bedrockBDABPVersionPolicy);
        // Give Lambda access to the bucket
        if (this.role) {
            props.inputBucket.grantRead(this.role);
        }
        cdk_nag_1.NagSuppressions.addResourceSuppressions(role, [{
                id: 'AwsSolutions-IAM5',
                reason: 'Lambda needs read access to process files from the input bucket',
            }], true);
    }
}
exports.BdaBlueprintLambda = BdaBlueprintLambda;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmRhLWJsdWVwcmludC1sYW1iZGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvcGF0dGVybnMvZ2VuLWFpL2F3cy1iZWRyb2NrLWRhdGEtYXV0b21hdGlvbi9iZGEtYmx1ZXByaW50LWxhbWJkYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7O0dBV0c7OztBQUVILDZCQUE2QjtBQUM3Qiw2Q0FBa0Y7QUFFbEYscUNBQTBDO0FBbUIxQzs7R0FFRztBQUNILE1BQWEsa0JBQW1CLFNBQVEsd0JBQU0sQ0FBQyxRQUFRO0lBRXJELFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBOEI7UUFFdEUsTUFBTSxJQUFJLEdBQUcsSUFBSSxxQkFBRyxDQUFDLElBQUksQ0FDdkIsS0FBSyxFQUNMLEdBQUcsRUFBRSxpQkFBaUIsRUFDdEI7WUFDRSxTQUFTLEVBQUUsSUFBSSxxQkFBRyxDQUFDLGdCQUFnQixDQUFDLHNCQUFzQixDQUFDO1NBQzVELENBQ0YsQ0FBQztRQUVGLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFO1lBRWYsT0FBTyxFQUFFLHdCQUFNLENBQUMsT0FBTyxDQUFDLFdBQVc7WUFDbkMsT0FBTyxFQUFFLGdCQUFnQjtZQUN6QixJQUFJLEVBQUUsd0JBQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLDhEQUE4RCxDQUFDLENBQUM7WUFDakgsTUFBTSxFQUFFLEtBQUssQ0FBQyxZQUFZO1lBQzFCLFdBQVcsRUFBRSxnREFBZ0Q7WUFDN0QsV0FBVyxFQUFFO2dCQUNYLFlBQVksRUFBRSxLQUFLLENBQUMsV0FBVyxDQUFDLFVBQVU7Z0JBQzFDLHVCQUF1QixFQUFFLG1CQUFtQjthQUM3QztZQUNELFVBQVUsRUFBRSxJQUFJO1lBQ2hCLElBQUksRUFBRSxJQUFJO1lBQ1YsWUFBWSxFQUFFLHdCQUFNLENBQUMsWUFBWSxDQUFDLE1B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SSxFQUNKLENBQUM7Z0JBQ0MsRUFBRSxFQUFFLG1CQUFtQjtnQkFDdkIsTUFBTSxFQUFFLGlFQUFpRTthQUMxRSxDQUFDLEVBQ0YsSUFBSSxDQUNMLENBQUM7SUFDSixDQUFDO0NBQ0Y7QUF0SUQsZ0RBc0lDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiAgQ29weXJpZ2h0IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIikuIFlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqICB3aXRoIHRoZSBMaWNlbnNlLiBBIGNvcHkgb2YgdGhlIExpY2Vuc2UgaXMgbG9jYXRlZCBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogIG9yIGluIHRoZSAnbGljZW5zZScgZmlsZSBhY2NvbXBhbnlpbmcgdGhpcyBmaWxlLiBUaGlzIGZpbGUgaXMgZGlzdHJpYnV0ZWQgb24gYW4gJ0FTIElTJyBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTXG4gKiAgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnNcbiAqICBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IGF3c19pYW0gYXMgaWFtLCBhd3NfbGFtYmRhIGFzIGxhbWJkYSwgRHVyYXRpb24sIEF3cyB9IGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCAqIGFzIHMzIGZyb20gJ2F3cy1jZGstbGliL2F3cy1zMyc7XG5pbXBvcnQgeyBOYWdTdXBwcmVzc2lvbnMgfSBmcm9tICdjZGstbmFnJztcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGNyZWF0aW5nIGEgQmRhQmx1ZXByaW50TGFtYmRhXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQmRhQmx1ZXByaW50TGFtYmRhUHJvcHMge1xuICAvKipcbiAgICogVGhlIFMzIGJ1Y2tldFxuICAgKiBmb3IgaW5wdXQgZGF0YSB1c2VkIGJ5IHRoZSBCZWRyb2NrIERhdGEgQXV0b21hdGlvbiBwcm9jZXNzLlxuICAgKiBJZiBub3QgcHJvdmlkZWQsIGEgbmV3IGJ1Y2tldCB3aWxsIGJlIGNyZWF0ZWQuXG4gICAqL1xuICByZWFkb25seSBpbnB1dEJ1Y2tldDogczMuSUJ1Y2tldDtcbiAgLyoqXG4gICAqIFRoZSBsYXllcnMgdG8gYXBwbHkgdG8gdGhpcyBsYW1iZGEgZnVuY3Rpb24uXG4gICAqL1xuICByZWFkb25seSBsYW1iZGFMYXllcnM6IGxhbWJkYS5JTGF5ZXJWZXJzaW9uW107XG59XG5cbi8qKlxuICogTGFtYmRhIGZ1bmN0aW9uIHRoYXQgbWFuYWdlcyBCREEgYmx1ZXByaW50IGNyZWF0aW9uXG4gKi9cbmV4cG9ydCBjbGFzcyBCZGFCbHVlcHJpbnRMYW1iZGEgZXh0ZW5kcyBsYW1iZGEuRnVuY3Rpb24ge1xuXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBCZGFCbHVlcHJpbnRMYW1iZGFQcm9wcykge1xuXG4gICAgY29uc3Qgcm9sZSA9IG5ldyBpYW0uUm9sZShcbiAgICAgIHNjb3BlLFxuICAgICAgYCR7aWR9bWFuYWdlQmx1ZXByaW50YCxcbiAgICAgIHtcbiAgICAgICAgYXNzdW1lZEJ5OiBuZXcgaWFtLlNlcnZpY2VQcmluY2lwYWwoJ2xhbWJkYS5hbWF6b25hd3MuY29tJyksXG4gICAgICB9LFxuICAgICk7XG5cbiAgICBzdXBlcihzY29wZSwgaWQsIHtcblxuICAgICAgcnVudGltZTogbGFtYmRhLlJ1bnRpbWUuUFlUSE9OXzNfMTMsXG4gICAgICBoYW5kbGVyOiAnbGFtYmRhLmhhbmRsZXInLFxuICAgICAgY29kZTogbGFtYmRhLkNvZGUuZnJvbUFzc2V0KHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi8uLi8uLi8uLi9sYW1iZGEvYXdzLWJlZHJvY2stZGF0YS1hdXRvbWF0aW9uL2JkYV9ibHVlcHJpbnQnKSksXG4gICAgICBsYXllcnM6IHByb3BzLmxhbWJkYUxheWVycyxcbiAgICAgIGRlc2NyaXB0aW9uOiAnQkRBIGNvbnRyb2wgcGxhbmUgZm9yIEJEQSBibHVlcHJpbnQgb3BlcmF0aW9ucycsXG4gICAgICBlbnZpcm9ubWVudDoge1xuICAgICAgICBJTlBVVF9CVUNLRVQ6IHByb3BzLmlucHV0QnVja2V0LmJ1Y2tldE5hbWUsXG4gICAgICAgIFBPV0VSVE9PTFNfU0VSVklDRV9OQU1FOiAnQkVEUk9DS19CTFVFUFJJTlQnLFxuICAgICAgfSxcbiAgICAgIG1lbW9yeVNpemU6IDEwMjQsXG4gICAgICByb2xlOiByb2xlLFxuICAgICAgYXJjaGl0ZWN0dXJlOiBsYW1iZGEuQXJjaGl0ZWN0dXJlLlg4Nl82NCxcbiAgICAgIHRpbWVvdXQ6IER1cmF0aW9uLm1pbnV0ZXMoMTUpLFxuICAgIH0pO1xuXG4gICAgLy8gQWRkIGJhc2ljIHBlcm1pc3Npb25zIGZvciBDbG91ZFdhdGNoIGxvZ3NcbiAgICBjb25zdCBjbG91ZHdhdGNoTG9nc1BvbGljeSA9IG5ldyBpYW0uUG9saWN5KFxuICAgICAgc2NvcGUsXG4gICAgICBgJHtpZH1MYW1iZGFCYXNpY0V4ZWNQb2xpY3lgLFxuICAgICAge1xuICAgICAgICBzdGF0ZW1lbnRzOiBbXG4gICAgICAgICAgbmV3IGlhbS5Qb2xpY3lTdGF0ZW1lbnQoe1xuICAgICAgICAgICAgZWZmZWN0OiBpYW0uRWZmZWN0LkFMTE9XLFxuICAgICAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAgICAnbG9nczpDcmVhdGVMb2dHcm91cCcsXG4gICAgICAgICAgICAgICdsb2dzOkNyZWF0ZUxvZ1N0cmVhbScsXG4gICAgICAgICAgICAgICdsb2dzOlB1dExvZ0V2ZW50cycsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgcmVzb3VyY2VzOiBbXG4gICAgICAgICAgICAgIGBhcm46YXdzOmxvZ3M6JHtBd3MuUkVHSU9OfToke0F3cy5BQ0NPVU5UX0lEfTpsb2ctZ3JvdXA6L2F3cy9sYW1iZGEvJHt0aGlzLmZ1bmN0aW9uTmFtZX1gLFxuICAgICAgICAgICAgICBgYXJuOmF3czpsb2dzOiR7QXdzLlJFR0lPTn06JHtBd3MuQUNDT1VOVF9JRH06bG9nLWdyb3VwOi9hd3MvbGFtYmRhLyR7dGhpcy5mdW5jdGlvbk5hbWV9OipgLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgXSxcbiAgICAgIH0sXG4gICAgKTtcblxuICAgIE5hZ1N1cHByZXNzaW9ucy5hZGRSZXNvdXJjZVN1cHByZXNzaW9ucyhcbiAgICAgIGNsb3Vkd2F0Y2hMb2dzUG9saWN5LFxuICAgICAgW3sgaWQ6ICdBd3NTb2x1dGlvbnMtSUFNNScsIHJlYXNvbjogJ0xhbWJkYSByZXF1aXJlcyBDbG91ZFdhdGNoIGxvZ3MgcGVybWlzc2lvbnMgd2l0aCBsb2cgZ3JvdXAgbmFtZSBwYXR0ZXJucycgfV0sXG4gICAgKTtcblxuICAgIHJvbGUuYXR0YWNoSW5saW5lUG9saWN5KGNsb3Vkd2F0Y2hMb2dzUG9saWN5KTtcblxuICAgIC8vIFBlcm1pc3Npb25zIGZvciBCREFcbiAgICBjb25zdCBCZWRyb2NrQkRBQlBQb2xpY3kgPSBuZXcgaWFtLlBvbGljeShcbiAgICAgIHNjb3BlLFxuICAgICAgYCR7aWR9QmVkcm9ja0JEQUJQUG9saWN5YCxcbiAgICAgIHtcbiAgICAgICAgc3RhdGVtZW50czogW1xuICAgICAgICAgIG5ldyBpYW0uUG9saWN5U3RhdGVtZW50KHtcbiAgICAgICAgICAgIGVmZmVjdDogaWFtLkVmZmVjdC5BTExPVyxcbiAgICAgICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgICAgJ2JlZHJvY2s6TGlzdEJsdWVwcmludHMnLFxuICAgICAgICAgICAgICAnYmVkcm9jazpEZWxldGVCbHVlcHJpbnQnLFxuICAgICAgICAgICAgICAnYmVkcm9jazpJbnZva2VCbHVlcHJpbnQnLFxuICAgICAgICAgICAgICAnYmVkcm9jazpMaXN0Qmx1ZXByaW50SW52b2NhdGlvbnMnLFxuICAgICAgICAgICAgICAnYmVkcm9jazpHZXRCbHVlcHJpbnRJbnZvY2F0aW9uJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICByZXNvdXJjZXM6IFsnKiddLFxuICAgICAgICAgIH0pLFxuICAgICAgICBdLFxuICAgICAgfSxcbiAgICApO1xuXG4gICAgTmFnU3VwcHJlc3Npb25zLmFkZFJlc291cmNlU3VwcHJlc3Npb25zKFxuICAgICAgQmVkcm9ja0JEQUJQUG9saWN5LFxuICAgICAgW3tcbiAgICAgICAgaWQ6ICdBd3NTb2x1dGlvbnMtSUFNNScsXG4gICAgICAgIHJlYXNvbjogJ0JlZHJvY2sgQmx1ZXByaW50IG9wZXJhdGlvbnMgcmVxdWlyZSBhY2Nlc3MgdG8gYWxsIGJsdWVwcmludHMgYXMgcmVzb3VyY2UtbGV2ZWwgcGVybWlzc2lvbnMgYXJlIG5vdCBzdXBwb3J0ZWQnLFxuICAgICAgfV0sXG4gICAgICB0cnVlLFxuICAgICk7XG5cbiAgICByb2xlLmF0dGFjaElubGluZVBvbGljeShCZWRyb2NrQkRBQlBQb2xpY3kpO1xuXG5cbiAgICBjb25zdCBiZWRyb2NrQkRBQlBWZXJzaW9uUG9saWN5ID0gbmV3IGlhbS5Qb2xpY3koXG4gICAgICBzY29wZSxcbiAgICAgIGAke2lkfUJlZHJvY2tCREFCUFZlcnNpb25Qb2xpY3lgLFxuICAgICAge1xuICAgICAgICBzdGF0ZW1lbnRzOiBbXG4gICAgICAgICAgbmV3IGlhbS5Qb2xpY3lTdGF0ZW1lbnQoe1xuICAgICAgICAgICAgZWZmZWN0OiBpYW0uRWZmZWN0LkFMTE9XLFxuICAgICAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAgICAnYmVkcm9jazpDcmVhdGVCbHVlcHJpbnQnLFxuICAgICAgICAgICAgICAnYmVkcm9jazpDcmVhdGVCbHVlcHJpbnRWZXJzaW9uJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICByZXNvdXJjZXM6IFsnKiddLFxuICAgICAgICAgIH0pLFxuICAgICAgICBdLFxuICAgICAgfSxcbiAgICApO1xuXG4gICAgTmFnU3VwcHJlc3Npb25zLmFkZFJlc291cmNlU3VwcHJlc3Npb25zKFxuICAgICAgYmVkcm9ja0JEQUJQVmVyc2lvblBvbGljeSxcbiAgICAgIFt7XG4gICAgICAgIGlkOiAnQXdzU29sdXRpb25zLUlBTTUnLFxuICAgICAgICByZWFzb246ICdCZWRyb2NrIEJsdWVwcmludCB2ZXJzaW9uIGNyZWF0aW9uIG9wZXJhdGlvbnMgcmVxdWlyZSBhY2Nlc3MgdG8gYWxsIGJsdWVwcmludHMgYXMgcmVzb3VyY2UtbGV2ZWwgcGVybWlzc2lvbnMgYXJlIG5vdCBzdXBwb3J0ZWQnLFxuICAgICAgfV0sXG4gICAgICB0cnVlLFxuICAgICk7XG5cblxuICAgIHJvbGUuYXR0YWNoSW5saW5lUG9saWN5KGJlZHJvY2tCREFCUFZlcnNpb25Qb2xpY3kpO1xuXG4gICAgLy8gR2l2ZSBMYW1iZGEgYWNjZXNzIHRvIHRoZSBidWNrZXRcbiAgICBpZiAodGhpcy5yb2xlKSB7XG4gICAgICBwcm9wcy5pbnB1dEJ1Y2tldC5ncmFudFJlYWQodGhpcy5yb2xlKTtcbiAgICB9XG5cbiAgICBOYWdTdXBwcmVzc2lvbnMuYWRkUmVzb3VyY2VTdXBwcmVzc2lvbnMoXG4gICAgICByb2xlLFxuICAgICAgW3tcbiAgICAgICAgaWQ6ICdBd3NTb2x1dGlvbnMtSUFNNScsXG4gICAgICAgIHJlYXNvbjogJ0xhbWJkYSBuZWVkcyByZWFkIGFjY2VzcyB0byBwcm9jZXNzIGZpbGVzIGZyb20gdGhlIGlucHV0IGJ1Y2tldCcsXG4gICAgICB9XSxcbiAgICAgIHRydWUsXG4gICAgKTtcbiAgfVxufSJdfQ==