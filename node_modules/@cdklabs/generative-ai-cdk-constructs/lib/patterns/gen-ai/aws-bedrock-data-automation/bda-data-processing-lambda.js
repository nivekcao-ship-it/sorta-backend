"use strict";
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BdaDataProcessingLambda = void 0;
const path = require("path");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const cdk_nag_1 = require("cdk-nag");
/**
 * Lambda function that manages BDA data processing
 */
class BdaDataProcessingLambda extends aws_cdk_lib_1.aws_lambda.Function {
    constructor(scope, id, props) {
        const role = new aws_cdk_lib_1.aws_iam.Role(scope, `${id}createDataProcessing`, {
            assumedBy: new aws_cdk_lib_1.aws_iam.ServicePrincipal('lambda.amazonaws.com'),
        });
        super(scope, id, {
            runtime: aws_cdk_lib_1.aws_lambda.Runtime.PYTHON_3_13,
            handler: 'lambda.handler', // Adjust this based on your actual handler
            code: aws_cdk_lib_1.aws_lambda.Code.fromAsset(path.join(__dirname, '../../../../lambda/aws-bedrock-data-automation/data_processing')),
            layers: props.lambdaLayers,
            description: 'BDA runtime for BDA data processing',
            environment: {
                INPUT_BUCKET: props.inputBucket.bucketName,
                OUTPUT_BUCKET: props.outputBucket.bucketName,
                OUTPUT_FILENAME: '',
                POWERTOOLS_SERVICE_NAME: 'BEDROCK_INVOKE',
            },
            memorySize: 1024,
            role: role,
            architecture: aws_cdk_lib_1.aws_lambda.Architecture.X86_64,
            timeout: aws_cdk_lib_1.Duration.minutes(15),
        });
        // Add basic permissions for CloudWatch logs
        const cloudwatchLogsPolicy = new aws_cdk_lib_1.aws_iam.Policy(scope, `${id}LambdaBasicExecPolicy`, {
            statements: [
                new aws_cdk_lib_1.aws_iam.PolicyStatement({
                    effect: aws_cdk_lib_1.aws_iam.Effect.ALLOW,
                    actions: [
                        'logs:CreateLogGroup',
                        'logs:CreateLogStream',
                        'logs:PutLogEvents',
                    ],
                    resources: [
                        `arn:aws:logs:${aws_cdk_lib_1.Aws.REGION}:${aws_cdk_lib_1.Aws.ACCOUNT_ID}:log-group:/aws/lambda/${this.functionName}`,
                        `arn:aws:logs:${aws_cdk_lib_1.Aws.REGION}:${aws_cdk_lib_1.Aws.ACCOUNT_ID}:log-group:/aws/lambda/${this.functionName}:*`,
                    ],
                }),
            ],
        });
        cdk_nag_1.NagSuppressions.addResourceSuppressions(cloudwatchLogsPolicy, [{ id: 'AwsSolutions-IAM5', reason: 'Lambda requires CloudWatch logs permissions with log group name patterns' }]);
        role.attachInlinePolicy(cloudwatchLogsPolicy);
        // Permissions for BDA
        const bedrockBDAPolicy = new aws_cdk_lib_1.aws_iam.Policy(scope, `${id}BedrockBDAProcessingPolicy`, {
            statements: [
                new aws_cdk_lib_1.aws_iam.PolicyStatement({
                    effect: aws_cdk_lib_1.aws_iam.Effect.ALLOW,
                    actions: [
                        'bedrock:InvokeDataAutomationAsync',
                    ],
                    resources: ['*'],
                }),
            ],
        });
        cdk_nag_1.NagSuppressions.addResourceSuppressions(bedrockBDAPolicy, [{
                id: 'AwsSolutions-IAM5',
                reason: 'Invocation Lambda needs access for data processing operations',
            }], true);
        role.attachInlinePolicy(bedrockBDAPolicy);
        // Give Lambda access to the buckets
        if (this.role) {
            props.inputBucket.grantReadWrite(this.role);
            props.outputBucket.grantReadWrite(this.role);
        }
        cdk_nag_1.NagSuppressions.addResourceSuppressions(role, [{
                id: 'AwsSolutions-IAM5',
                reason: 'Lambda needs read access to process files from the input bucket',
            }], true);
    }
}
exports.BdaDataProcessingLambda = BdaDataProcessingLambda;
//# sourceMappingURL=data:application/json;base64,