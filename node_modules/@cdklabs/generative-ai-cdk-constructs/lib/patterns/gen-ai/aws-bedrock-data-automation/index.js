"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BedrockDataAutomation = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const path = require("path");
const aws_lambda_python_alpha_1 = require("@aws-cdk/aws-lambda-python-alpha");
const cdk = require("aws-cdk-lib");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const lambda = require("aws-cdk-lib/aws-lambda");
const s3 = require("aws-cdk-lib/aws-s3");
const helpers_internal_1 = require("aws-cdk-lib/core/lib/helpers-internal");
const bda_blueprint_lambda_1 = require("./bda-blueprint-lambda");
const bda_data_processing_lambda_1 = require("./bda-data-processing-lambda");
const bda_project_lambda_1 = require("./bda-project-lambda");
const bda_results_lambda_1 = require("./bda-results-lambda");
const base_class_1 = require("../../../common/base-class");
;
/******************************************************************************
 *                        NEW CONSTRUCT DEFINITION
 *****************************************************************************/
/**
 * Class to create a BDA pattern with CDK.
 */
class BedrockDataAutomation extends base_class_1.BaseClass {
    // ------------------------------------------------------
    // CONSTRUCTOR
    // ------------------------------------------------------
    constructor(scope, id, props) {
        super(scope, id);
        // ------------------------------------------------------
        // Set properties and defaults
        // ------------------------------------------------------
        this.powertoolsLayer = lambda.LayerVersion.fromLayerVersionArn(this, 'PowertoolsLayer', `arn:aws:lambda:${cdk.Stack.of(this).region}:017000801446:layer:AWSLambdaPowertoolsPythonV3-python313-x86_64:8`);
        this.boto3Layer = new aws_lambda_python_alpha_1.PythonLayerVersion(this, 'Boto3Layer', {
            entry: path.join(__dirname, '../../../../layer'),
            compatibleRuntimes: [lambda.Runtime.PYTHON_3_13],
            description: 'Latest boto3 layer for Bedrock Data Automation',
            removalPolicy: cdk.RemovalPolicy.DESTROY,
        });
        // Compute hash used for bucket name
        const hash = (0, helpers_internal_1.md5hash)(id + aws_cdk_lib_1.Aws.ACCOUNT_ID + aws_cdk_lib_1.Aws.REGION);
        // Manage input bucket if needed
        if (props.isCustomBDABlueprintRequired || props.isBDAInvocationRequired) {
            this.bdaInputBucket = this.handleS3Bucket(props.inputBucket, 'input', hash);
        }
        // Manage output bucket if needed
        if (props.isCustomBDABlueprintRequired || props.isBDAInvocationRequired) {
            this.bdaOutputBucket = this.handleS3Bucket(props.outputBucket, 'output', hash);
        }
        if (props.isCustomBDABlueprintRequired && this.bdaInputBucket) {
            this.bdaBlueprintLambdaFunction = new bda_blueprint_lambda_1.BdaBlueprintLambda(this, 'bdablueprintlambda', {
                inputBucket: this.bdaInputBucket,
                lambdaLayers: [this.powertoolsLayer, this.boto3Layer],
            });
        }
        if (props.isBDAProjectRequired && this.bdaInputBucket) {
            this.bdaProjectFunction = new bda_project_lambda_1.BdaProjectLambda(this, 'bdaprojectlambda', {
                inputBucket: this.bdaInputBucket,
                lambdaLayers: [this.powertoolsLayer, this.boto3Layer],
            });
        }
        if (props.isBDAInvocationRequired && this.bdaInputBucket && this.bdaOutputBucket) {
            this.bdaInvocationFunction = new bda_data_processing_lambda_1.BdaDataProcessingLambda(this, 'bdainvocationlambda', {
                inputBucket: this.bdaInputBucket,
                outputBucket: this.bdaOutputBucket,
                lambdaLayers: [this.powertoolsLayer, this.boto3Layer],
            });
        }
        if (props.isStatusRequired && this.bdaOutputBucket) {
            this.bdaResultStatusFunction = new bda_results_lambda_1.BdaResultsambda(this, 'bdaresultslambda', {
                lambdaLayers: [this.powertoolsLayer, this.boto3Layer],
                outputBucket: this.bdaOutputBucket,
            });
        }
    }
    /**
     * Handles the creation or retrieval of an S3 bucket.
     *
     * @param existing_bucket - An optional existing S3 bucket to use.
     * @param type - A string indicating the type of bucket (e.g., 'input' or 'output').
     * @returns The existing bucket if provided, or a newly created S3 bucket.
     */
    handleS3Bucket(existing_bucket, type, hash) {
        if (existing_bucket) {
            return existing_bucket;
        }
        else {
            // bucket for storing server access logging
            const serverAccessLogBucket = new s3.Bucket(this, `${hash}-${type}-serveraccesslogbucket`, {
                blockPublicAccess: s3.BlockPublicAccess.BLOCK_ALL,
                encryption: s3.BucketEncryption.S3_MANAGED,
                enforceSSL: true,
                versioned: true,
                lifecycleRules: [
                    {
                        expiration: cdk.Duration.days(90),
                    },
                ],
            });
            // create the bucket
            return new s3.Bucket(this, `${hash}-${type}-bucket`, {
                encryption: s3.BucketEncryption.S3_MANAGED,
                enforceSSL: true,
                blockPublicAccess: s3.BlockPublicAccess.BLOCK_ALL,
                versioned: true,
                serverAccessLogsBucket: serverAccessLogBucket,
                serverAccessLogsPrefix: `${type}-bucket-logs/`,
                objectOwnership: s3.ObjectOwnership.BUCKET_OWNER_ENFORCED,
                removalPolicy: cdk.RemovalPolicy.DESTROY,
                autoDeleteObjects: true,
                cors: [
                    {
                        allowedMethods: [
                            s3.HttpMethods.GET,
                            s3.HttpMethods.POST,
                            s3.HttpMethods.PUT,
                            s3.HttpMethods.DELETE,
                        ],
                        allowedOrigins: ['*'],
                        allowedHeaders: ['*'],
                        exposedHeaders: ['x-amz-server-side-encryption',
                            'x-amz-request-id',
                            'x-amz-id-2',
                            'ETag',
                            'Content-Type',
                            'Content-Disposition',
                            'Access-Control-Allow-Origin'],
                    },
                ],
            });
        }
    }
}
exports.BedrockDataAutomation = BedrockDataAutomation;
_a = JSII_RTTI_SYMBOL_1;
BedrockDataAutomation[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.BedrockDataAutomation", version: "0.1.309" };
//# sourceMappingURL=data:application/json;base64,