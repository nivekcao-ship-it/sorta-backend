"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BedrockCwDashboard = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_cloudwatch_1 = require("aws-cdk-lib/aws-cloudwatch");
const constructs_1 = require("constructs");
const bedrock_1 = require("../../../cdk-lib/bedrock");
/**
 * The BedrockCwDashboard class.
 */
class BedrockCwDashboard extends constructs_1.Construct {
    /**
     * Constructs a new instance of the BedrockCwDashboard class.
     * @param {cdk.App} scope - represents the scope for all the resources.
     * @param {string} id - this is a a scope-unique id.
     * @param {BedrockCwDashboardProps} props - user provided props for the construct.
     * @since 0.0.0
     * @public
     */
    constructor(scope, id, props = {}) {
        super(scope, id);
        this.dashboard =
            props.existingDashboard ??
                new aws_cloudwatch_1.Dashboard(this, `BedrockMetricsDashboard${id}`, {
                    dashboardName: props.dashboardName ?? 'BedrockMetricsDashboard',
                });
        const cloudwatchDashboardURL = 'https://' +
            aws_cdk_lib_1.Aws.REGION +
            '.console.aws.amazon.com/cloudwatch/home?region=' +
            aws_cdk_lib_1.Aws.REGION +
            '#dashboards:name=' +
            this.dashboard.dashboardName;
        new aws_cdk_lib_1.CfnOutput(this, `BedrockMetricsDashboardOutput${id}`, {
            value: cloudwatchDashboardURL,
        });
    }
    /* Provide metrics for a specific model id in Bedrock
     * @param {string} modelName - Model name as it will appear in the dashboard row widget.
     * @param {string} modelId - Bedrock model id as defined in https://docs.aws.amazon.com/bedrock/latest/userguide/model-ids.html
     * @param {ModelMonitoringProps} props - user provided props for the monitoring.
     */
    addModelMonitoring(modelName, modelId, props = {}) {
        const period = props.period ?? aws_cdk_lib_1.Duration.hours(1);
        const outputImageCountDimension = modelId + props.imageSize + props.bucketedStepSize;
        const modelInputTokensMetric = new aws_cloudwatch_1.Metric({
            namespace: 'AWS/Bedrock',
            metricName: 'InputTokenCount',
            dimensionsMap: {
                ModelId: modelId,
            },
            statistic: aws_cloudwatch_1.Stats.SUM,
            period: period,
        });
        const modelOutputTokensMetric = new aws_cloudwatch_1.Metric({
            namespace: 'AWS/Bedrock',
            metricName: 'OutputTokenCount',
            dimensionsMap: {
                ModelId: modelId,
            },
            statistic: aws_cloudwatch_1.Stats.SUM,
            period: period,
        });
        const modelOutputImageMetric = new aws_cloudwatch_1.Metric({
            namespace: 'AWS/Bedrock',
            metricName: 'OutputImageCount',
            dimensionsMap: {
                ModelId: outputImageCountDimension,
            },
            statistic: aws_cloudwatch_1.Stats.SUM,
            period: period,
        });
        const modelLatencyAvgMetric = new aws_cloudwatch_1.Metric({
            namespace: 'AWS/Bedrock',
            metricName: 'InvocationLatency',
            dimensionsMap: {
                ModelId: modelId,
            },
            statistic: aws_cloudwatch_1.Stats.AVERAGE,
            period: period,
        });
        const modelLatencyMinMetric = new aws_cloudwatch_1.Metric({
            namespace: 'AWS/Bedrock',
            metricName: 'InvocationLatency',
            dimensionsMap: {
                ModelId: modelId,
            },
            statistic: aws_cloudwatch_1.Stats.MINIMUM,
            period: period,
        });
        const modelLatencyMaxMetric = new aws_cloudwatch_1.Metric({
            namespace: 'AWS/Bedrock',
            metricName: 'InvocationLatency',
            dimensionsMap: {
                ModelId: modelId,
            },
            statistic: aws_cloudwatch_1.Stats.MAXIMUM,
            period: period,
        });
        const modelInvocationsCountMetric = new aws_cloudwatch_1.Metric({
            namespace: 'AWS/Bedrock',
            metricName: 'Invocations',
            dimensionsMap: {
                ModelId: modelId,
            },
            statistic: aws_cloudwatch_1.Stats.SAMPLE_COUNT,
            period: period,
        });
        const modelInvocationsClientErrorsMetric = new aws_cloudwatch_1.Metric({
            namespace: 'AWS/Bedrock',
            metricName: 'InvocationClientErrors',
            dimensionsMap: {
                ModelId: modelId,
            },
            statistic: aws_cloudwatch_1.Stats.SAMPLE_COUNT,
            period: period,
        });
        const modelInvocationsServerErrorsMetric = new aws_cloudwatch_1.Metric({
            namespace: 'AWS/Bedrock',
            metricName: 'InvocationServerErrors',
            dimensionsMap: {
                ModelId: modelId,
            },
            statistic: aws_cloudwatch_1.Stats.SAMPLE_COUNT,
            period: period,
        });
        const modelInvocationsThrottlesErrorsMetric = new aws_cloudwatch_1.Metric({
            namespace: 'AWS/Bedrock',
            metricName: 'InvocationThrottles',
            dimensionsMap: {
                ModelId: modelId,
            },
            statistic: aws_cloudwatch_1.Stats.SAMPLE_COUNT,
            period: period,
        });
        const modelInvocationsLegacysMetric = new aws_cloudwatch_1.Metric({
            namespace: 'AWS/Bedrock',
            metricName: 'LegacyModelInvocations',
            dimensionsMap: {
                ModelId: modelId,
            },
            statistic: aws_cloudwatch_1.Stats.SAMPLE_COUNT,
            period: period,
        });
        this.dashboard.addWidgets(new aws_cloudwatch_1.Row(new aws_cloudwatch_1.TextWidget({
            markdown: `# ${modelName}`,
            width: 24,
        })));
        this.dashboard.addWidgets(new aws_cloudwatch_1.Row(new aws_cloudwatch_1.SingleValueWidget({
            title: 'Average Latency',
            metrics: [modelLatencyAvgMetric],
            width: 8,
        }), new aws_cloudwatch_1.SingleValueWidget({
            title: 'Min Latency',
            metrics: [modelLatencyMinMetric],
            width: 8,
        }), new aws_cloudwatch_1.SingleValueWidget({
            title: 'Max Latency',
            metrics: [modelLatencyMaxMetric],
            width: 8,
        })));
        let pricingWidget;
        if (props.inputTokenPrice && props.outputTokenPrice) {
            pricingWidget = new aws_cloudwatch_1.GraphWidget({
                title: 'Token Cost (USD)',
                left: [
                    new aws_cloudwatch_1.MathExpression({
                        expression: `inputTokens / 1000 * ${props.inputTokenPrice}`,
                        usingMetrics: {
                            inputTokens: modelInputTokensMetric,
                        },
                        label: 'Input Token Cost',
                    }),
                    new aws_cloudwatch_1.MathExpression({
                        expression: `outputTokens / 1000 * ${props.outputTokenPrice}`,
                        usingMetrics: {
                            outputTokens: modelOutputTokensMetric,
                        },
                        label: 'Output Token Cost',
                    }),
                ],
                leftYAxis: {
                    label: 'Input and Output',
                    showUnits: false,
                },
                right: [
                    new aws_cloudwatch_1.MathExpression({
                        expression: `inputTokens / 1000 * ${props.inputTokenPrice} + outputTokens / 1000 * ${props.outputTokenPrice}`,
                        usingMetrics: {
                            inputTokens: modelInputTokensMetric,
                            outputTokens: modelOutputTokensMetric,
                        },
                        label: 'Total Cost',
                    }),
                ],
                rightYAxis: {
                    label: 'Total',
                    showUnits: false,
                },
                width: 12,
                height: 10,
            });
        }
        this.dashboard.addWidgets(new aws_cloudwatch_1.Row(new aws_cloudwatch_1.GraphWidget({
            title: 'Input and Output Token Counts',
            left: [modelInputTokensMetric],
            right: [modelOutputTokensMetric],
            period: period,
            width: 12,
            height: 10,
        }), ...(pricingWidget ? [pricingWidget] : [])));
        this.dashboard.addWidgets(new aws_cloudwatch_1.SingleValueWidget({
            title: 'Invocations',
            metrics: [modelInvocationsCountMetric],
            width: 4,
        }), new aws_cloudwatch_1.SingleValueWidget({
            title: 'Client Errors',
            metrics: [modelInvocationsClientErrorsMetric],
            width: 4,
        }), new aws_cloudwatch_1.SingleValueWidget({
            title: 'Server Errors',
            metrics: [modelInvocationsServerErrorsMetric],
            width: 4,
        }), new aws_cloudwatch_1.SingleValueWidget({
            title: 'Throttled invocations',
            metrics: [modelInvocationsThrottlesErrorsMetric],
            width: 4,
        }), new aws_cloudwatch_1.SingleValueWidget({
            title: 'Legacy invocations',
            metrics: [modelInvocationsLegacysMetric],
            width: 4,
        }), new aws_cloudwatch_1.SingleValueWidget({
            title: 'OutputImageCount',
            metrics: [modelOutputImageMetric],
            width: 4,
        }));
    }
    /* Add a new row to the dashboard providing metrics across all model ids in Bedrock
     * @param {ModelMonitoringProps} props - user provided props for the monitoring.
     */
    addAllModelsMonitoring(props = {}) {
        const period = props.period ?? aws_cdk_lib_1.Duration.hours(1);
        // Metrics across all Model Ids
        const inputTokensAllModelsMetric = new aws_cloudwatch_1.Metric({
            namespace: 'AWS/Bedrock',
            metricName: 'InputTokenCount',
            statistic: aws_cloudwatch_1.Stats.SUM,
            period: period,
        });
        const outputTokensAllModelsMetric = new aws_cloudwatch_1.Metric({
            namespace: 'AWS/Bedrock',
            metricName: 'OutputTokenCount',
            statistic: aws_cloudwatch_1.Stats.SUM,
            period: period,
        });
        const outputImageMetric = new aws_cloudwatch_1.Metric({
            namespace: 'AWS/Bedrock',
            metricName: 'OutputImageCount',
            statistic: aws_cloudwatch_1.Stats.SUM,
            period: period,
        });
        const latencyAvgAllModelsMetric = new aws_cloudwatch_1.Metric({
            namespace: 'AWS/Bedrock',
            metricName: 'InvocationLatency',
            statistic: aws_cloudwatch_1.Stats.AVERAGE,
            period: period,
        });
        const latencyMinAllModelsMetric = new aws_cloudwatch_1.Metric({
            namespace: 'AWS/Bedrock',
            metricName: 'InvocationLatency',
            statistic: aws_cloudwatch_1.Stats.MINIMUM,
            period: period,
        });
        const latencyMaxAllModelsMetric = new aws_cloudwatch_1.Metric({
            namespace: 'AWS/Bedrock',
            metricName: 'InvocationLatency',
            statistic: aws_cloudwatch_1.Stats.MAXIMUM,
            period: period,
        });
        const invocationsCountAllModelsMetric = new aws_cloudwatch_1.Metric({
            namespace: 'AWS/Bedrock',
            metricName: 'Invocations',
            statistic: aws_cloudwatch_1.Stats.SAMPLE_COUNT,
            period: period,
        });
        const invocationsClientErrorsAllModelsMetric = new aws_cloudwatch_1.Metric({
            namespace: 'AWS/Bedrock',
            metricName: 'InvocationClientErrors',
            statistic: aws_cloudwatch_1.Stats.SAMPLE_COUNT,
            period: period,
        });
        const invocationsServerErrorsAllModelsMetric = new aws_cloudwatch_1.Metric({
            namespace: 'AWS/Bedrock',
            metricName: 'InvocationServerErrors',
            statistic: aws_cloudwatch_1.Stats.SAMPLE_COUNT,
            period: period,
        });
        const invocationsThrottlesErrorsMetric = new aws_cloudwatch_1.Metric({
            namespace: 'AWS/Bedrock',
            metricName: 'InvocationThrottles',
            statistic: aws_cloudwatch_1.Stats.SAMPLE_COUNT,
            period: period,
        });
        const invocationsLegacyModelMetric = new aws_cloudwatch_1.Metric({
            namespace: 'AWS/Bedrock',
            metricName: 'LegacyModelInvocations',
            statistic: aws_cloudwatch_1.Stats.SAMPLE_COUNT,
            period: period,
        });
        this.dashboard.addWidgets(new aws_cloudwatch_1.Row(new aws_cloudwatch_1.TextWidget({
            markdown: '# Metrics Across All Models',
            width: 24,
        })));
        this.dashboard.addWidgets(new aws_cloudwatch_1.Row(new aws_cloudwatch_1.SingleValueWidget({
            title: 'Average Latency (All Models)',
            metrics: [latencyAvgAllModelsMetric],
            width: 8,
        }), new aws_cloudwatch_1.SingleValueWidget({
            title: 'Min Latency (All Models)',
            metrics: [latencyMinAllModelsMetric],
            width: 8,
        }), new aws_cloudwatch_1.SingleValueWidget({
            title: 'Max Latency (All Models)',
            metrics: [latencyMaxAllModelsMetric],
            width: 8,
        })));
        this.dashboard.addWidgets(new aws_cloudwatch_1.Row(new aws_cloudwatch_1.GraphWidget({
            title: 'Input and Output Tokens (All Models)',
            left: [inputTokensAllModelsMetric],
            right: [outputTokensAllModelsMetric],
            period: period,
            width: 12,
        }), new aws_cloudwatch_1.SingleValueWidget({
            title: 'Invocations (All Models)',
            metrics: [invocationsCountAllModelsMetric],
            width: 4,
        }), new aws_cloudwatch_1.SingleValueWidget({
            title: 'Output Image Count (All Models)',
            metrics: [outputImageMetric],
            width: 4,
        }), new aws_cloudwatch_1.SingleValueWidget({
            title: 'Client Errors (All Models)',
            metrics: [invocationsClientErrorsAllModelsMetric],
            width: 4,
        }), new aws_cloudwatch_1.SingleValueWidget({
            title: 'Server Errors (All Models)',
            metrics: [invocationsServerErrorsAllModelsMetric],
            width: 4,
        }), new aws_cloudwatch_1.SingleValueWidget({
            title: 'Throttling Errors (All Models)',
            metrics: [invocationsThrottlesErrorsMetric],
            width: 4,
        }), new aws_cloudwatch_1.SingleValueWidget({
            title: 'Legacy invocations (All Models)',
            metrics: [invocationsLegacyModelMetric],
            width: 4,
        })));
    }
    /**
     * Add guardrail monitoring to the dashboard
     * @param {IGuardrail} guardrail - The guardrail to monitor
     */
    addGuardrailMonitoring(guardrail) {
        this.dashboard.addWidgets(new aws_cloudwatch_1.Row(new aws_cloudwatch_1.TextWidget({
            markdown: `# Guardrail Metrics: ${guardrail.guardrailId}`,
            width: 24,
        }), new aws_cloudwatch_1.GraphWidget({
            title: 'Guardrail Activity Over Time',
            left: [guardrail.metricInvocations({ statistic: aws_cloudwatch_1.Stats.SUM })],
            leftYAxis: {
                label: 'Invocations',
                showUnits: false,
            },
            right: [guardrail.metricInvocationsIntervened({ statistic: aws_cloudwatch_1.Stats.SUM })],
            rightYAxis: {
                label: 'Interventions',
                showUnits: false,
            },
            width: 24,
            height: 6,
        })));
    }
    /**
     * Add guardrail monitoring to the dashboard
     */
    addAllGuardrailsMonitoring() {
        this.dashboard.addWidgets(new aws_cloudwatch_1.Row(new aws_cloudwatch_1.TextWidget({
            markdown: '# Guardrail Metrics Across All Guardrails',
            width: 24,
        }), new aws_cloudwatch_1.GraphWidget({
            title: 'Guardrail Activity Over Time',
            left: [bedrock_1.Guardrail.metricAllInvocations({ statistic: aws_cloudwatch_1.Stats.SUM })],
            leftYAxis: {
                label: 'Invocations',
                showUnits: false,
            },
            right: [bedrock_1.Guardrail.metricAllInvocationsIntervened({ statistic: aws_cloudwatch_1.Stats.SUM })],
            rightYAxis: {
                label: 'Interventions',
                showUnits: false,
            },
            width: 24,
            height: 6,
        })));
    }
}
exports.BedrockCwDashboard = BedrockCwDashboard;
_a = JSII_RTTI_SYMBOL_1;
BedrockCwDashboard[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.BedrockCwDashboard", version: "0.1.309" };
//# sourceMappingURL=data:application/json;base64,