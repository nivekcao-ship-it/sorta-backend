/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
import * as appsync from 'aws-cdk-lib/aws-appsync';
import * as lambda from 'aws-cdk-lib/aws-lambda';
import * as logs from 'aws-cdk-lib/aws-logs';
import { Construct } from 'constructs';
import { ConstructName } from './construct-name-enum';
export interface BaseClassProps {
    /**
     * Value will be appended to resources name.
     *
     * @default - _dev
     */
    readonly stage?: string;
    /**
     * name of the construct.
     *
     */
    readonly constructName: ConstructName;
    /**
     * construct id.
     *
     */
    readonly constructId: string;
    /**
     * Enable observability. Warning: associated cost with the services
     * used. Best practice to enable by default.
     *
     * @default - true
     */
    readonly observability?: boolean;
}
export declare class BaseClass extends Construct {
    /**
     * Record<string, number> , maps construct name with number of deployments
     */
    protected static usageMetricMap: Record<string, number>;
    /**
     * construct usage metric , added in template description
     */
    readonly constructUsageMetric = "uksb-1tupboc45";
    /**
     * Value will be appended to resources name.
     *
     * @default - _dev
     */
    stage: string;
    /**
     * enable disable lambda tracing
     *
     * @default - Active
     */
    lambdaTracing: lambda.Tracing;
    /**
     * enable disable xray tracing
     *
     * @default - True
     */
    enablexray: boolean;
    /**
     * Default  log config for all constructs
     */
    fieldLogLevel: appsync.FieldLogLevel;
    /**
     * Default  log retention config for all constructs
     */
    retention: logs.RetentionDays;
    constructor(scope: Construct, id: string);
    protected updateEnvSuffix(props: BaseClassProps): void;
    protected updateConstructUsageMetricCode(props: BaseClassProps, scope: Construct, lambdaFunctions: lambda.DockerImageFunction[]): void;
    protected addObservabilityToConstruct(props: BaseClassProps): void;
}
