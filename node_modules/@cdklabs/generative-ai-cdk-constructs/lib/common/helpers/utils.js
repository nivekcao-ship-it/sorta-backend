"use strict";
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.recommendedMaximumLambdaMemorySize = exports.maximumLambdaMemorySizeContextItem = exports.version = void 0;
exports.generatePhysicalName = generatePhysicalName;
exports.generatePhysicalNameV2 = generatePhysicalNameV2;
exports.lambdaMemorySizeLimiter = lambdaMemorySizeLimiter;
exports.addCfnSuppressRules = addCfnSuppressRules;
exports.isPlainObject = isPlainObject;
const crypto_1 = require("crypto");
const cdk = require("aws-cdk-lib");
/**
 * The version of this package
 */
// eslint-disable-next-line @typescript-eslint/no-require-imports
exports.version = require('../../../package.json').version;
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 *
 * @summary Creates a physical resource name in the style of the CDK (string+hash) - this value incorporates Stack ID,
 * so it will remain static in multiple updates of a single stack, but will be different in a separate stack instance
 * @param {string} prefix - the prefix for the name
 * @param {string[]} parts - the various string components of the name (eg - stackName, solutions construct ID, L2 construct ID)
 * @param {number} maxLength - the longest string that can be returned
 * @returns {string} - a string with concatenated parts (truncated if necessary) + a hash of the full concatenated parts
 *
 * @deprecated This function is deprecated and will be removed in a future major version.
 * Please use the new function generatePhysicalNameV2 instead.
 */
function generatePhysicalName(prefix, parts, maxLength) {
    // The result will consist of:
    //    -The prefix - unaltered
    //    -The parts concatenated, but reduced in size to meet the maxLength limit for the overall name
    //    -A hyphen delimiter
    //    -The GUID portion of the stack arn
    const stackIdGuidLength = 36;
    const prefixLength = prefix.length;
    const maxPartsLength = maxLength - prefixLength - 1 - stackIdGuidLength; // 1 is the hyphen
    // Extract the Stack ID Guid
    const uniqueStackIdPart = cdk.Fn.select(2, cdk.Fn.split('/', `${cdk.Aws.STACK_ID}`));
    let allParts = '';
    parts.forEach((part) => {
        allParts += part;
    });
    if (allParts.length > maxPartsLength) {
        const subStringLength = maxPartsLength / 2;
        allParts = allParts.substring(0, subStringLength) + allParts.substring(allParts.length - subStringLength);
    }
    if (prefix.length + allParts.length + stackIdGuidLength + 1 /* hyphen */ > maxLength) {
        throw new Error(`The generated name is longer than the maximum length of ${maxLength}`);
    }
    return prefix.toLowerCase() + allParts + '-' + uniqueStackIdPart;
}
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 *
 * @summary Creates a physical resource name in the style of the CDK (string+hash) - this value incorporates
 * the Stack Name and node ID, so it will remain static in multiple updates of a single stack, but will be
 * different in a separate stack instance.
 *
 * This new version allows for names shorter than 36 characters with control over casing.
 *
 * The minimum length is the length of the prefix and separator plus 10.
 */
function generatePhysicalNameV2(
/**
 * The CDK scope of the resource.
 */
scope, 
/**
 * The prefix for the name.
 */
prefix, 
/**
 * Options for generating the name.
 */
options) {
    function objectToHash(obj) {
        // Nothing to hash if undefined
        if (obj === undefined) {
            return '';
        }
        // Convert the object to a JSON string
        const jsonString = JSON.stringify(obj);
        // Create a SHA-256 hash
        const hash = (0, crypto_1.createHash)('sha256');
        // Update the hash with the JSON string and get the digest in hexadecimal format
        // Shorten it (modeled after seven characters like git commit hash shortening)
        return hash.update(jsonString).digest('hex').slice(0, 7);
    }
    const { maxLength = 256, lower = false, separator = '', allowedSpecialCharacters = undefined, destroyCreate = undefined, } = options ?? {};
    const hash = objectToHash(destroyCreate);
    if (maxLength < (prefix + hash + separator).length) {
        throw new Error('The prefix is longer than the maximum length.');
    }
    const uniqueName = cdk.Names.uniqueResourceName(scope, { maxLength: maxLength - (prefix + hash + separator).length, separator, allowedSpecialCharacters });
    const name = `${prefix}${hash}${separator}${uniqueName}`;
    if (name.length > maxLength) {
        throw new Error(`The generated name is longer than the maximum length of ${maxLength}`);
    }
    return lower ? name.toLowerCase() : name;
}
exports.maximumLambdaMemorySizeContextItem = 'maximumLambdaMemorySize';
exports.recommendedMaximumLambdaMemorySize = 7076;
function lambdaMemorySizeLimiter(construct, requestedMemorySizeInMegabytes) {
    const maximumLambaMemorySize = construct.node.tryGetContext(exports.maximumLambdaMemorySizeContextItem) === undefined ?
        exports.recommendedMaximumLambdaMemorySize :
        parseInt(construct.node.tryGetContext(exports.maximumLambdaMemorySizeContextItem));
    if (maximumLambaMemorySize < exports.recommendedMaximumLambdaMemorySize) {
        console.warn(`Maximum Lambda memorySize, ${maximumLambaMemorySize}, is less than the recommended ${exports.recommendedMaximumLambdaMemorySize}.`);
    }
    if (requestedMemorySizeInMegabytes > maximumLambaMemorySize) {
        console.warn(`Reducing Lambda memorySize, ${requestedMemorySizeInMegabytes} to ${maximumLambaMemorySize} for ${construct.constructor.name}`);
        return maximumLambaMemorySize;
    }
    else {
        return requestedMemorySizeInMegabytes;
    }
}
/**
 * Adds CFN NAG suppress rules to the CDK resource.
 * @param resource The CDK resource
 * @param rules The CFN NAG suppress rules
 */
function addCfnSuppressRules(resource, rules) {
    if (resource instanceof cdk.Resource) {
        resource = resource.node.defaultChild;
    }
    if (resource.cfnOptions.metadata?.cfn_nag?.rules_to_suppress) {
        resource.cfnOptions.metadata?.cfn_nag.rules_to_suppress.push(...rules);
    }
    else {
        resource.addMetadata('cfn_nag', {
            rules_to_suppress: rules,
        });
    }
}
function isObject(val) {
    return val !== null && typeof val === 'object' && !Array.isArray(val);
}
function isPlainObject(o) {
    if (!isObject(o))
        return false;
    if (Object.getPrototypeOf(o) === null)
        return true;
    let proto = o;
    while (Object.getPrototypeOf(proto) !== null) {
        proto = Object.getPrototypeOf(proto);
    }
    return Object.getPrototypeOf(o) === proto;
}
//# sourceMappingURL=data:application/json;base64,