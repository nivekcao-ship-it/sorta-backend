"use strict";
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildMergedAPI = buildMergedAPI;
exports.checkAppsyncMergedApiProps = checkAppsyncMergedApiProps;
exports.setMergedApiRole = setMergedApiRole;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const appsync = require("aws-cdk-lib/aws-appsync");
const iam = require("aws-cdk-lib/aws-iam");
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 *
 * build app sync merge api with source api associations
 *
 * @param AppsyncMergedApiProps The  props to be used by the construct
 * @param  apiType - MERGED, GRAPHQL
 * @returns App sync merge api
 */
function buildMergedAPI(scope, id, props) {
    if (props.existingMergeApi) {
        return props.existingMergeApi;
    }
    else {
        const mergeAPIname = props.cfnGraphQLApiProps?.name || 'appsyncmergeAPI';
        const apiType = props.cfnGraphQLApiProps?.apiType || 'MERGED';
        const fieldLogLevel = props?.fieldLogLevel || appsync.FieldLogLevel.NONE;
        const excludeVerboseContent = props?.excludeVerboseContent || false;
        const xRayEnabled = props?.xRayEnabled || false;
        let mergedApi = new appsync.CfnGraphQLApi(scope, id, {
            apiType: apiType,
            name: mergeAPIname,
            authenticationType: props.cfnGraphQLApiProps.authenticationType,
            userPoolConfig: props.cfnGraphQLApiProps?.userPoolConfig,
            additionalAuthenticationProviders: [{
                    authenticationType: 'AWS_IAM',
                }],
            logConfig: {
                cloudWatchLogsRoleArn: setAppsyncCloudWatchlogsRole(scope, props).roleArn,
                fieldLogLevel: fieldLogLevel,
                excludeVerboseContent: excludeVerboseContent,
            },
            xrayEnabled: xRayEnabled,
            mergedApiExecutionRoleArn: props.mergedApiRole.roleArn,
            ownerContact: props?.cfnGraphQLApiProps.ownerContact,
        });
        return mergedApi;
    }
}
function checkAppsyncMergedApiProps(propsObject) {
    let errorMessages = '';
    let errorFound = false;
    if (propsObject.existingMergeApi && propsObject.cfnGraphQLApiProps) {
        errorMessages += 'Error - Either provide existingMergeApi or cfnGraphQLApiProps, but not both.\n';
        errorFound = true;
    }
    if (!propsObject.existingMergeApi && !propsObject.cfnGraphQLApiProps) {
        errorMessages += 'Error - Atleast one is required either existingMergeApi or cfnGraphQLApiProps.\n';
        errorFound = true;
    }
    if (errorFound) {
        throw new Error(errorMessages);
    }
}
/**
 * @internal This is an internal core function and should not be called directly
 * by Solutions Constructs clients.
 * set the merge api role to access source api associations
 *
 * @param AppsyncMergedApiProps The  props to be used by the construct
 * @param mergedAPI app sync graphql api
 * @param mergedApiRole iam role
 * @returns App sync merge api role
 */
function setMergedApiRole(mergedApiID, sourceApiId, mergedApiRole) {
    mergedApiRole.addToPolicy(new iam.PolicyStatement({
        effect: iam.Effect.ALLOW,
        actions: ['appsync:SourceGraphQL',
            'appsync:StartSchemaMerge'],
        resources: [
            'arn:' + aws_cdk_lib_1.Aws.PARTITION + ':appsync:' + aws_cdk_lib_1.Aws.REGION + ':' + aws_cdk_lib_1.Aws.ACCOUNT_ID
                + ':apis/' + sourceApiId + '/*',
            'arn:' + aws_cdk_lib_1.Aws.PARTITION + ':appsync:' + aws_cdk_lib_1.Aws.REGION + ':' + aws_cdk_lib_1.Aws.ACCOUNT_ID + ':apis/' + mergedApiID + '/sourceApiAssociations/*',
            'arn:' + aws_cdk_lib_1.Aws.PARTITION + ':appsync:' + aws_cdk_lib_1.Aws.REGION + ':' + aws_cdk_lib_1.Aws.ACCOUNT_ID + ':apis/' + sourceApiId + '/sourceApiAssociations/*',
        ],
    }));
    return mergedApiRole;
}
function setAppsyncCloudWatchlogsRole(scope, props) {
    const appsyncServicePrincipleRole = props.appsyncServicePrincipleRole || 'appsync.amazonaws.com';
    let appsynccloudWatchlogsRole = new iam.Role(scope, 'appsynccloudWatchlogsRole', {
        assumedBy: new iam.ServicePrincipal(appsyncServicePrincipleRole),
    });
    appsynccloudWatchlogsRole.addToPolicy(new iam.PolicyStatement({
        effect: iam.Effect.ALLOW,
        actions: ['logs:CreateLogGroup', 'logs:CreateLogStream', 'logs:PutLogEvents'],
        resources: ['*'],
    }));
    return appsynccloudWatchlogsRole;
}
//# sourceMappingURL=data:application/json;base64,