"use strict";
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildCustomResourceProvider = buildCustomResourceProvider;
const cdk = require("aws-cdk-lib");
const ec2 = require("aws-cdk-lib/aws-ec2");
const iam = require("aws-cdk-lib/aws-iam");
const lambda = require("aws-cdk-lib/aws-lambda");
const logs = require("aws-cdk-lib/aws-logs");
const cr = require("aws-cdk-lib/custom-resources");
const cdk_nag_1 = require("cdk-nag");
const constructs_1 = require("constructs");
function buildCustomResourceProvider(props) {
    const { providerName, codePath, handler, runtime, layers, vpc, securityGroup } = props;
    class CRProvider extends constructs_1.Construct {
        static getProvider(scope) {
            const stack = cdk.Stack.of(scope);
            const existing = stack.node.tryFindChild(providerName);
            if (existing) {
                return existing;
            }
            return new CRProvider(cdk.Stack.of(scope), providerName);
        }
        constructor(scope, id) {
            super(scope, id);
            this.role = new iam.Role(this, 'CRRole', {
                assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),
                managedPolicies: [
                    iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AWSLambdaBasicExecutionRole'),
                ],
            });
            const customResourceFunction = new lambda.Function(this, 'CustomResourcesFunction', {
                code: lambda.Code.fromDockerBuild(codePath),
                handler,
                runtime,
                layers,
                role: this.role,
                timeout: cdk.Duration.minutes(15),
                memorySize: 128,
                vpc,
                vpcSubnets: vpc ? { subnetType: ec2.SubnetType.PRIVATE_ISOLATED } : undefined,
                securityGroups: vpc && securityGroup ? [securityGroup] : undefined,
                logRetention: logs.RetentionDays.ONE_WEEK,
                description: 'Custom Resource Provider',
            });
            const providerRole = new iam.Role(this, 'ProviderRole', {
                assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),
                managedPolicies: [
                    iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AWSLambdaBasicExecutionRole'),
                ],
            });
            this.provider = new cr.Provider(this, 'Provider', {
                onEventHandler: customResourceFunction,
                logRetention: logs.RetentionDays.ONE_WEEK,
                role: providerRole,
            });
            this.serviceToken = this.provider.serviceToken;
            cdk_nag_1.NagSuppressions.addResourceSuppressions(customResourceFunction, [
                {
                    id: 'AwsSolutions-L1',
                    reason: 'Lambda runtime version is managed upstream by CDK.',
                },
            ], true);
            cdk_nag_1.NagSuppressions.addResourceSuppressionsByPath(cdk.Stack.of(this), `${this.provider.node.path}/framework-onEvent/Resource`, [
                {
                    id: 'AwsSolutions-L1',
                    reason: 'Lambda runtime version is managed upstream by CDK.',
                },
            ]);
            for (let role of [this.role, providerRole]) {
                cdk_nag_1.NagSuppressions.addResourceSuppressions(role, [
                    {
                        id: 'AwsSolutions-IAM4',
                        reason: 'CDK CustomResource Lambda uses the AWSLambdaBasicExecutionRole AWS Managed Policy.',
                    },
                ]);
            }
            cdk_nag_1.NagSuppressions.addResourceSuppressions(providerRole, [
                {
                    id: 'AwsSolutions-IAM5',
                    reason: 'CDK CustomResource Provider has a wildcard to invoke any version of the specific Custom Resource function.',
                    appliesTo: [{ regex: `/^Resource::<${id}${customResourceFunction.node.id}[A-Z0-9]+\\.Arn>:\\*$/g` }],
                },
            ], true);
        }
    }
    return CRProvider;
}
//# sourceMappingURL=data:application/json;base64,