"use strict";
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceEndpointTypeEnum = exports.EndpointTypes = void 0;
exports.CheckVpcProps = CheckVpcProps;
exports.buildVpc = buildVpc;
exports.getPrivateSubnetIDs = getPrivateSubnetIDs;
exports.getlambdaSecuritygroup = getlambdaSecuritygroup;
exports.DefaultVpcProps = DefaultVpcProps;
exports.createOpenSearchVpcEndpoint = createOpenSearchVpcEndpoint;
exports.suppressMapPublicIpWarnings = suppressMapPublicIpWarnings;
exports.suppressEncryptedLogWarnings = suppressEncryptedLogWarnings;
exports.buildSecurityGroup = buildSecurityGroup;
exports.createDefaultVpcProps = createDefaultVpcProps;
exports.AddAwsServiceEndpoint = AddAwsServiceEndpoint;
const ec2 = require("aws-cdk-lib/aws-ec2");
const aws_ec2_1 = require("aws-cdk-lib/aws-ec2");
const aws_opensearchserverless_1 = require("aws-cdk-lib/aws-opensearchserverless");
const utils_1 = require("./utils");
var EndpointTypes;
(function (EndpointTypes) {
    EndpointTypes["GATEWAY"] = "Gateway";
    EndpointTypes["INTERFACE"] = "Interface";
})(EndpointTypes || (exports.EndpointTypes = EndpointTypes = {}));
var ServiceEndpointTypeEnum;
(function (ServiceEndpointTypeEnum) {
    ServiceEndpointTypeEnum["DYNAMODB"] = "DDB";
    ServiceEndpointTypeEnum["ECR_API"] = "ECR_API";
    ServiceEndpointTypeEnum["ECR_DKR"] = "ECR_DKR";
    ServiceEndpointTypeEnum["EVENTS"] = "CLOUDWATCH_EVENTS";
    ServiceEndpointTypeEnum["KENDRA"] = "KENDRA";
    ServiceEndpointTypeEnum["KINESIS_FIREHOSE"] = "KINESIS_FIREHOSE";
    ServiceEndpointTypeEnum["KINESIS_STREAMS"] = "KINESIS_STREAMS";
    ServiceEndpointTypeEnum["S3"] = "S3";
    ServiceEndpointTypeEnum["SAGEMAKER_RUNTIME"] = "SAGEMAKER_RUNTIME";
    ServiceEndpointTypeEnum["SECRETS_MANAGER"] = "SECRETS_MANAGER";
    ServiceEndpointTypeEnum["SNS"] = "SNS";
    ServiceEndpointTypeEnum["SQS"] = "SQS";
    ServiceEndpointTypeEnum["SSM"] = "SSM";
    ServiceEndpointTypeEnum["STEP_FUNCTIONS"] = "STEP_FUNCTIONS";
    ServiceEndpointTypeEnum["BEDROCK_RUNTIME"] = "BEDROCK_RUNTIME";
    ServiceEndpointTypeEnum["COMPREHEND"] = "COMPREHEND";
    ServiceEndpointTypeEnum["REKOGNITION"] = "REKOGNITION";
    ServiceEndpointTypeEnum["APP_SYNC"] = "APP_SYNC";
})(ServiceEndpointTypeEnum || (exports.ServiceEndpointTypeEnum = ServiceEndpointTypeEnum = {}));
function CheckVpcProps(propsObject) {
    let errorMessages = '';
    let errorFound = false;
    if ((propsObject.deployVpc || propsObject.vpcProps) && propsObject.existingVpc) {
        errorMessages += 'Error - Either provide an existingVpc or some combination of deployVpc and vpcProps, but not both.\n';
        errorFound = true;
    }
    if (errorFound) {
        throw new Error(errorMessages);
    }
}
function buildVpc(scope, props) {
    if (props?.existingVpc) {
        return props?.existingVpc;
    }
    let defaultVpcProps = createDefaultVpcProps();
    let cumulativeProps = defaultVpcProps;
    // Merge props provided by construct builder and by the end user
    // If user provided props are empty, the vpc will use only the builder provided props
    //cumulativeProps = consolidateProps(cumulativeProps, props?.userVpcProps, props?.constructVpcProps);
    const vpc = new aws_ec2_1.Vpc(scope, props.vpcName, cumulativeProps);
    // Add VPC FlowLogs with the default setting of trafficType:ALL and destination: CloudWatch Logs
    const flowLog = vpc.addFlowLog('FlowLog');
    suppressMapPublicIpWarnings(vpc);
    suppressEncryptedLogWarnings(flowLog);
    return vpc;
}
// get subnet id for passed vpc.
function getPrivateSubnetIDs(vpc) {
    return vpc.privateSubnets.map(subnet => subnet.subnetId);
}
// get lambda security group for passed VPC
function getlambdaSecuritygroup(scope, vpc, id) {
    let lambdaSecurityGroup = new aws_ec2_1.SecurityGroup(scope, 'lambdaSecurityGroup', {
        vpc: vpc,
        allowAllOutbound: true,
        description: 'security group for lambda',
        securityGroupName: `lambdaSecurityGroup-${id}`,
    });
    return lambdaSecurityGroup;
}
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 *
 * Creates the default vpc props with public , private_with_egress and private_isolated subnet configuration.
 */
function DefaultVpcProps() {
    return {
        subnetConfiguration: [
            {
                name: 'public',
                subnetType: aws_ec2_1.SubnetType.PUBLIC,
                cidrMask: 24,
            },
            {
                name: 'private',
                subnetType: aws_ec2_1.SubnetType.PRIVATE_WITH_EGRESS,
                cidrMask: 24,
            },
            {
                name: 'isolated',
                subnetType: aws_ec2_1.SubnetType.PRIVATE_ISOLATED,
                cidrMask: 24,
            },
        ],
        ipAddresses: aws_ec2_1.IpAddresses.cidr('10.0.0.0/16'),
    };
}
function createOpenSearchVpcEndpoint(scope, vpc, sg, props) {
    if (props?.existingOpensearchServerlessCollection) {
        new aws_opensearchserverless_1.CfnVpcEndpoint(scope, `${vpc.node.id}-VpcEndpoint`, {
            name: `${vpc.node.id.toLocaleLowerCase()}-ep`,
            vpcId: vpc.vpcId,
            subnetIds: vpc.selectSubnets({ subnetType: ec2.SubnetType.PRIVATE_ISOLATED }).subnetIds,
            securityGroupIds: [sg.securityGroupId],
        });
    }
}
function suppressMapPublicIpWarnings(vpc) {
    // Add Cfn Nag suppression for PUBLIC subnets to suppress WARN W33: EC2 Subnet should not have MapPublicIpOnLaunch set to true
    vpc.publicSubnets.forEach((subnet) => {
        const cfnSubnet = subnet.node.defaultChild;
        (0, utils_1.addCfnSuppressRules)(cfnSubnet, [
            {
                id: 'W33',
                reason: 'Allow Public Subnets to have MapPublicIpOnLaunch set to true',
            },
        ]);
    });
}
function suppressEncryptedLogWarnings(flowLog) {
    // Add Cfn Nag suppression for CloudWatchLogs LogGroups data is encrypted
    const cfnLogGroup = flowLog.logGroup?.node.defaultChild;
    (0, utils_1.addCfnSuppressRules)(cfnLogGroup, [
        {
            id: 'W84',
            reason: 'By default CloudWatchLogs LogGroups data is encrypted using the CloudWatch server-side encryption keys (AWS Managed Keys)',
        },
    ]);
}
function buildSecurityGroup(scope, name, props, ingressRules, egressRules) {
    const newSecurityGroup = new aws_ec2_1.SecurityGroup(scope, `${name}-security-group`, props);
    ingressRules.forEach(rule => {
        newSecurityGroup.addIngressRule(rule.peer, rule.connection, rule.description, rule.remoteRule);
    });
    egressRules.forEach(rule => {
        newSecurityGroup.addEgressRule(rule.peer, rule.connection, rule.description, rule.remoteRule);
    });
    (0, utils_1.addCfnSuppressRules)(newSecurityGroup, [
        {
            id: 'W5',
            reason: 'Egress of 0.0.0.0/0 is default and generally considered OK',
        },
        {
            id: 'W40',
            reason: 'Egress IPProtocol of -1 is default and generally considered OK',
        },
    ]);
    return newSecurityGroup;
}
function AddInterfaceEndpoint(scope, vpc, service, interfaceTag) {
    const endpointDefaultSecurityGroup = buildSecurityGroup(scope, `${scope.node.id}-${service.endpointName}-${vpc.node.id}`, {
        vpc,
        allowAllOutbound: true,
    }, [{ peer: aws_ec2_1.Peer.ipv4(vpc.vpcCidrBlock), connection: aws_ec2_1.Port.tcp(443) }], []);
    vpc.addInterfaceEndpoint(interfaceTag, {
        service: service.endpointInterfaceService,
        securityGroups: [endpointDefaultSecurityGroup],
    });
}
function createDefaultVpcProps() {
    return {
        subnetConfiguration: [
            {
                cidrMask: 24,
                name: 'public',
                subnetType: aws_ec2_1.SubnetType.PUBLIC,
            },
            {
                cidrMask: 24,
                name: 'private_isolated',
                subnetType: aws_ec2_1.SubnetType.PRIVATE_ISOLATED,
            },
            {
                cidrMask: 24,
                name: 'private_egress',
                subnetType: aws_ec2_1.SubnetType.PRIVATE_WITH_EGRESS,
            },
        ],
        ipAddresses: ec2.IpAddresses.cidr('10.0.0.0/16'),
    };
}
function AddGatewayEndpoint(vpc, service, interfaceTag) {
    vpc.addGatewayEndpoint(interfaceTag, {
        service: service.endpointGatewayService,
    });
}
function CheckIfEndpointAlreadyExists(vpc, interfaceTag) {
    return vpc.node.children.some((child) => child.node.id === interfaceTag);
}
const endpointSettings = [
    {
        endpointName: ServiceEndpointTypeEnum.DYNAMODB,
        endpointType: EndpointTypes.GATEWAY,
        endpointGatewayService: aws_ec2_1.GatewayVpcEndpointAwsService.DYNAMODB,
    },
    {
        endpointName: ServiceEndpointTypeEnum.S3,
        endpointType: EndpointTypes.GATEWAY,
        endpointGatewayService: aws_ec2_1.GatewayVpcEndpointAwsService.S3,
    },
    {
        endpointName: ServiceEndpointTypeEnum.STEP_FUNCTIONS,
        endpointType: EndpointTypes.INTERFACE,
        endpointInterfaceService: aws_ec2_1.InterfaceVpcEndpointAwsService.STEP_FUNCTIONS,
    },
    {
        endpointName: ServiceEndpointTypeEnum.SNS,
        endpointType: EndpointTypes.INTERFACE,
        endpointInterfaceService: aws_ec2_1.InterfaceVpcEndpointAwsService.SNS,
    },
    {
        endpointName: ServiceEndpointTypeEnum.SQS,
        endpointType: EndpointTypes.INTERFACE,
        endpointInterfaceService: aws_ec2_1.InterfaceVpcEndpointAwsService.SQS,
    },
    {
        endpointName: ServiceEndpointTypeEnum.SAGEMAKER_RUNTIME,
        endpointType: EndpointTypes.INTERFACE,
        endpointInterfaceService: aws_ec2_1.InterfaceVpcEndpointAwsService.SAGEMAKER_RUNTIME,
    },
    {
        endpointName: ServiceEndpointTypeEnum.SECRETS_MANAGER,
        endpointType: EndpointTypes.INTERFACE,
        endpointInterfaceService: aws_ec2_1.InterfaceVpcEndpointAwsService.SECRETS_MANAGER,
    },
    {
        endpointName: ServiceEndpointTypeEnum.SSM,
        endpointType: EndpointTypes.INTERFACE,
        endpointInterfaceService: aws_ec2_1.InterfaceVpcEndpointAwsService.SSM,
    },
    {
        endpointName: ServiceEndpointTypeEnum.ECR_API,
        endpointType: EndpointTypes.INTERFACE,
        endpointInterfaceService: aws_ec2_1.InterfaceVpcEndpointAwsService.ECR,
    },
    {
        endpointName: ServiceEndpointTypeEnum.ECR_DKR,
        endpointType: EndpointTypes.INTERFACE,
        endpointInterfaceService: aws_ec2_1.InterfaceVpcEndpointAwsService.ECR_DOCKER,
    },
    {
        endpointName: ServiceEndpointTypeEnum.EVENTS,
        endpointType: EndpointTypes.INTERFACE,
        endpointInterfaceService: aws_ec2_1.InterfaceVpcEndpointAwsService.CLOUDWATCH_EVENTS,
    },
    {
        endpointName: ServiceEndpointTypeEnum.KINESIS_FIREHOSE,
        endpointType: EndpointTypes.INTERFACE,
        endpointInterfaceService: aws_ec2_1.InterfaceVpcEndpointAwsService.KINESIS_FIREHOSE,
    },
    {
        endpointName: ServiceEndpointTypeEnum.KINESIS_STREAMS,
        endpointType: EndpointTypes.INTERFACE,
        endpointInterfaceService: aws_ec2_1.InterfaceVpcEndpointAwsService.KINESIS_STREAMS,
    },
    {
        endpointName: ServiceEndpointTypeEnum.KENDRA,
        endpointType: EndpointTypes.INTERFACE,
        endpointInterfaceService: aws_ec2_1.InterfaceVpcEndpointAwsService.KENDRA,
    },
    {
        endpointName: ServiceEndpointTypeEnum.BEDROCK_RUNTIME,
        endpointType: EndpointTypes.INTERFACE,
        endpointInterfaceService: aws_ec2_1.InterfaceVpcEndpointAwsService.BEDROCK_RUNTIME,
    },
    {
        endpointName: ServiceEndpointTypeEnum.COMPREHEND,
        endpointType: EndpointTypes.INTERFACE,
        endpointInterfaceService: aws_ec2_1.InterfaceVpcEndpointAwsService.COMPREHEND,
    },
    {
        endpointName: ServiceEndpointTypeEnum.REKOGNITION,
        endpointType: EndpointTypes.INTERFACE,
        endpointInterfaceService: aws_ec2_1.InterfaceVpcEndpointAwsService.REKOGNITION,
    },
    {
        endpointName: ServiceEndpointTypeEnum.APP_SYNC,
        endpointType: EndpointTypes.INTERFACE,
        endpointInterfaceService: aws_ec2_1.InterfaceVpcEndpointAwsService.APP_SYNC,
    },
];
function AddAwsServiceEndpoint(scope, vpc, interfaceTags) {
    interfaceTags.forEach((interfaceTag) => {
        if (CheckIfEndpointAlreadyExists(vpc, interfaceTag)) {
            return;
        }
        const service = endpointSettings.find((endpoint) => endpoint.endpointName === interfaceTag);
        if (!service) {
            throw new Error('Unsupported Service sent to AddServiceEndpoint');
        }
        if (service.endpointType === EndpointTypes.GATEWAY) {
            AddGatewayEndpoint(vpc, service, interfaceTag);
        }
        if (service.endpointType === EndpointTypes.INTERFACE) {
            AddInterfaceEndpoint(scope, vpc, service, interfaceTag);
        }
        // ESLint requires this return statement, so disabling SonarQube warning
        return; // NOSONAR
    });
}
//# sourceMappingURL=data:application/json;base64,