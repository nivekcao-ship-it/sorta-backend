"use strict";
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildRedisCluster = buildRedisCluster;
exports.getRedisSecurityGroup = getRedisSecurityGroup;
exports.setInboundRules = setInboundRules;
exports.CheckRedisClusterProps = CheckRedisClusterProps;
const ec2 = require("aws-cdk-lib/aws-ec2");
const elasticache = require("aws-cdk-lib/aws-elasticache");
function buildRedisCluster(scope, props) {
    const cacheNodeType = props.cfnCacheClusterProps?.cacheNodeType || 'cache.r6g.xlarge';
    const engine = props.cfnCacheClusterProps?.engine || 'redis';
    const numCacheNodes = props.cfnCacheClusterProps?.numCacheNodes || 1;
    let redisCulster = new elasticache.CfnCacheCluster(scope, 'redisCluster', {
        cacheNodeType: cacheNodeType,
        engine: engine,
        numCacheNodes: numCacheNodes,
        cacheSubnetGroupName: getRedisSubnetGroup(scope, props).ref,
        vpcSecurityGroupIds: [props.redisSecurityGroup.securityGroupId],
        port: props.redisPort,
    });
    return redisCulster;
}
// get redis subnet group from existing vpc
function getRedisSubnetGroup(scope, props) {
    let redisSubnetGroup = new elasticache.CfnSubnetGroup(scope, 'redisSubnetGroup', {
        description: 'Redis subnet group',
        subnetIds: props.subnetIds,
    });
    return redisSubnetGroup;
}
// get redis security group from existing vpc
function getRedisSecurityGroup(scope, props) {
    let redisSecurityGroup = new ec2.SecurityGroup(scope, 'redisSecurityGroup', {
        vpc: props.existingVpc,
        allowAllOutbound: true,
        description: 'security group for elasticache',
    });
    return redisSecurityGroup;
}
function setInboundRules(redisSecurityGroup, sourceSecuritygroup, redisPort) {
    redisSecurityGroup.connections.allowFrom(sourceSecuritygroup, ec2.Port.tcp(redisPort));
}
function CheckRedisClusterProps(propsObject) {
    let errorMessages = '';
    let errorFound = false;
    if (propsObject.existingRedisCulster && propsObject.cfnCacheClusterProps) {
        errorMessages += 'Error - Either provide existingRedisCulster or cfnCacheClusterProps, but not both.\n';
        errorFound = true;
    }
    if (errorFound) {
        throw new Error(errorMessages);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVkaXMtaGVscGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbW1vbi9oZWxwZXJzL3JlZGlzLWhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7O0dBV0c7O0FBZ0VILDhDQWdCQztBQWFELHNEQVNDO0FBRUQsMENBS0M7QUFHRCx3REFZQztBQTFIRCwyQ0FBMkM7QUFDM0MsMkRBQTJEO0FBNkQzRCxTQUFnQixpQkFBaUIsQ0FBQyxLQUFnQixFQUFFLEtBQWlCO0lBR25FLE1BQU0sYUFBYSxHQUFHLEtBQUssQ0FBQyxvQkFBb0IsRUFBRSxhQUFhLElBQUksa0JBQWtCLENBQUM7SUFDdEYsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLG9CQUFvQixFQUFFLE1BQU0sSUFBSSxPQUFPLENBQUM7SUFDN0QsTUFBTSxhQUFhLEdBQUcsS0FBSyxDQUFDLG9CQUFvQixFQUFFLGFBQWEsSUFBSSxDQUFDLENBQUM7SUFFckUsSUFBSSxZQUFZLEdBQUcsSUFBSSxXQUFXLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRSxjQUFjLEVBQUU7UUFDeEUsYUFBYSxFQUFFLGFBQWE7UUFDNUIsTUFBTSxFQUFFLE1BQU07UUFDZCxhQUFhLEVBQUUsYUFBYTtRQUM1QixvQkFBb0IsRUFBRSxtQkFBbUIsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUMsR0FBRztRQUMzRCxtQkFBbUIsRUFBRSxDQUFDLEtBQUssQ0FBQyxrQkFBbUIsQ0FBQyxlQUFlLENBQUM7UUFDaEUsSUFBSSxFQUFFLEtBQUssQ0FBQyxTQUFTO0tBQ3RCLENBQUMsQ0FBQztJQUNILE9BQU8sWUFBWSxDQUFDO0FBQ3RCLENBQUM7QUFHRCwyQ0FBMkM7QUFDM0MsU0FBUyxtQkFBbUIsQ0FBQyxLQUFnQixFQUFFLEtBQWlCO0lBQzlELElBQUksZ0JBQWdCLEdBQUcsSUFBSSxXQUFXLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxrQkFBa0IsRUFBRTtRQUMvRSxXQUFXLEVBQUUsb0JBQW9CO1FBQ2pDLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztLQUMzQixDQUFDLENBQUM7SUFDSCxPQUFPLGdCQUFnQixDQUFDO0FBQzFCLENBQUM7QUFFRCw2Q0FBNkM7QUFDN0MsU0FBZ0IscUJBQXFCLENBQUMsS0FBZ0IsRUFDcEQsS0FBdUI7SUFDdkIsSUFBSSxrQkFBa0IsR0FBRyxJQUFJLEdBQUcsQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLG9CQUFvQixFQUFFO1FBQzFFLEdBQUcsRUFBRSxLQUFLLENBQUMsV0FBVztRQUN0QixnQkFBZ0IsRUFBRSxJQUFJO1FBQ3RCLFdBQVcsRUFBRSxnQ0FBZ0M7S0FDOUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxrQkFBa0IsQ0FBQztBQUM1QixDQUFDO0FBRUQsU0FBZ0IsZUFBZSxDQUFDLGtCQUFvQyxFQUNsRSxtQkFBc0MsRUFDdEMsU0FBZ0I7SUFDaEIsa0JBQWtCLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsRUFDMUQsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztBQUM3QixDQUFDO0FBR0QsU0FBZ0Isc0JBQXNCLENBQUMsV0FBNkI7SUFDbEUsSUFBSSxhQUFhLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUksVUFBVSxHQUFHLEtBQUssQ0FBQztJQUV2QixJQUFJLFdBQVcsQ0FBQyxvQkFBb0IsSUFBSSxXQUFXLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztRQUN6RSxhQUFhLElBQUksc0ZBQXNGLENBQUM7UUFDeEcsVUFBVSxHQUFHLElBQUksQ0FBQztJQUNwQixDQUFDO0lBRUQsSUFBSSxVQUFVLEVBQUUsQ0FBQztRQUNmLE1BQU0sSUFBSSxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDakMsQ0FBQztBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqICBDb3B5cmlnaHQgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKS4gWW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogIHdpdGggdGhlIExpY2Vuc2UuIEEgY29weSBvZiB0aGUgTGljZW5zZSBpcyBsb2NhdGVkIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiAgb3IgaW4gdGhlICdsaWNlbnNlJyBmaWxlIGFjY29tcGFueWluZyB0aGlzIGZpbGUuIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAnQVMgSVMnIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVNcbiAqICBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9uc1xuICogIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgKiBhcyBlYzIgZnJvbSAnYXdzLWNkay1saWIvYXdzLWVjMic7XG5pbXBvcnQgKiBhcyBlbGFzdGljYWNoZSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtZWxhc3RpY2FjaGUnO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVkaXNQcm9wcyB7XG5cbiAgLyoqXG4gICAqIFJlcXVpcmVkLiBFeGlzdGluZyBpbnN0YW5jZSBvZiBhIFZQQywgaWYgdGhpcyBpcyBzZXQgdGhlbiB0aGUgYWxsIFByb3BzIGFyZSBpZ25vcmVkLFxuICAgKiBpZiB0aGlzIGlzIG5vdCBzZXQgdGhlbiBkZWFmdWx0VlBDIFByb3BzIGFyZSB1c2VkLlxuICAgKi9cbiAgcmVhZG9ubHkgZXhpc3RpbmdWcGM6IGVjMi5JVnBjO1xuXG4gIC8qKlxuICAgKiBPcHRpb25hbCBjZm5DYWNoZUNsdXN0ZXJQcm9wc1xuICAgKiBAZGVmYXVsdCBjYWNoZU5vZGVUeXBlIC0gICdjYWNoZS5yNmcueGxhcmdlJ1xuICAgKiBAZGVmYXVsdCBudW1DYWNoZU5vZGVzLSAxXG4gICAqL1xuICByZWFkb25seSBjZm5DYWNoZUNsdXN0ZXJQcm9wcz86IGVsYXN0aWNhY2hlLkNmbkNhY2hlQ2x1c3RlclByb3BzO1xuXG4gIC8qKlxuICAqIE9wdGlvbmFsLiBFeGlzdGluZyBSZWRpcyBjbHVzdGVyIHRvIGNhY2hlIHRoZSBnZW5lcmF0ZWQgc3VtbWFyeVxuICAqIGZvciBzdWJzZXF1ZW50IHJlcXVlc3Qgb2Ygc2FtZSBkb2N1bWVudC5cbiAgKlxuICAqIEBkZWZhdWx0IC0gbm9uZVxuICAqL1xuICByZWFkb25seSBleGlzdGluZ1JlZGlzQ3Vsc3Rlcj86IGVsYXN0aWNhY2hlLkNmbkNhY2hlQ2x1c3RlcjtcblxuICAvKipcbiAgICogT3B0aW9uYWwgLm5hbWUgIG9mIHJlZGlzIFNlY3VyaXR5IEdyb3VwXG4gICAqIEBkZWZhdWx0ICdyZWRpc1NlY3VyaXR5R3JvdXAnXG4gICAqL1xuICByZWFkb25seSByZWRpc1NlY3VyaXR5R3JvdXBuYW1lPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBSZXF1aXJlZC4gcmVkaXMgU2VjdXJpdHkgR3JvdXBcbiAgICpcbiAgICovXG4gIHJlYWRvbmx5IHJlZGlzU2VjdXJpdHlHcm91cDogZWMyLlNlY3VyaXR5R3JvdXA7XG5cbiAgLyoqXG4gICAqIFJlcXVpcmVkLiBsaXN0IG9mIHN1Ym5ldCBJZHNcbiAgICogQGRlZmF1bHQgTm9uZVxuICAgKi9cbiAgcmVhZG9ubHkgc3VibmV0SWRzOiBzdHJpbmcgW107XG5cblxuICAvKipcbiAgICogUmVxdWlyZWQuIGxhbWJkYSBzZWN1cml0eSBncm91cCB3aGljaCB3aWxsIGFjY2VzIHRoZSByZWRpcyBjbHVzdGVyXG4gICAqXG4gICAqL1xuICByZWFkb25seSBpbmJvdW5kU2VjdXJpdHlHcm91cDogZWMyLklTZWN1cml0eUdyb3VwO1xuXG4gIC8qKlxuICAgKiBPcHRpb25hbC4gcmVkaXMgcG9ydCBudW1iZXJcbiAgICogQGRlZmF1bHQgcmVkaXNQb3J0XG4gICAqL1xuICByZWFkb25seSByZWRpc1BvcnQ/OiBudW1iZXI7XG5cblxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBidWlsZFJlZGlzQ2x1c3RlcihzY29wZTogQ29uc3RydWN0LCBwcm9wczogUmVkaXNQcm9wcyk6IGVsYXN0aWNhY2hlLkNmbkNhY2hlQ2x1c3RlciB7XG5cblxuICBjb25zdCBjYWNoZU5vZGVUeXBlID0gcHJvcHMuY2ZuQ2FjaGVDbHVzdGVyUHJvcHM/LmNhY2hlTm9kZVR5cGUgfHwgJ2NhY2hlLnI2Zy54bGFyZ2UnO1xuICBjb25zdCBlbmdpbmUgPSBwcm9wcy5jZm5DYWNoZUNsdXN0ZXJQcm9wcz8uZW5naW5lIHx8ICdyZWRpcyc7XG4gIGNvbnN0IG51bUNhY2hlTm9kZXMgPSBwcm9wcy5jZm5DYWNoZUNsdXN0ZXJQcm9wcz8ubnVtQ2FjaGVOb2RlcyB8fCAxO1xuXG4gIGxldCByZWRpc0N1bHN0ZXIgPSBuZXcgZWxhc3RpY2FjaGUuQ2ZuQ2FjaGVDbHVzdGVyKHNjb3BlLCAncmVkaXNDbHVzdGVyJywge1xuICAgIGNhY2hlTm9kZVR5cGU6IGNhY2hlTm9kZVR5cGUsXG4gICAgZW5naW5lOiBlbmdpbmUsXG4gICAgbnVtQ2FjaGVOb2RlczogbnVtQ2FjaGVOb2RlcyxcbiAgICBjYWNoZVN1Ym5ldEdyb3VwTmFtZTogZ2V0UmVkaXNTdWJuZXRHcm91cChzY29wZSwgcHJvcHMpLnJlZixcbiAgICB2cGNTZWN1cml0eUdyb3VwSWRzOiBbcHJvcHMucmVkaXNTZWN1cml0eUdyb3VwIS5zZWN1cml0eUdyb3VwSWRdLFxuICAgIHBvcnQ6IHByb3BzLnJlZGlzUG9ydCxcbiAgfSk7XG4gIHJldHVybiByZWRpc0N1bHN0ZXI7XG59XG5cblxuLy8gZ2V0IHJlZGlzIHN1Ym5ldCBncm91cCBmcm9tIGV4aXN0aW5nIHZwY1xuZnVuY3Rpb24gZ2V0UmVkaXNTdWJuZXRHcm91cChzY29wZTogQ29uc3RydWN0LCBwcm9wczogUmVkaXNQcm9wcyk6IGVsYXN0aWNhY2hlLkNmblN1Ym5ldEdyb3VwIHtcbiAgbGV0IHJlZGlzU3VibmV0R3JvdXAgPSBuZXcgZWxhc3RpY2FjaGUuQ2ZuU3VibmV0R3JvdXAoc2NvcGUsICdyZWRpc1N1Ym5ldEdyb3VwJywge1xuICAgIGRlc2NyaXB0aW9uOiAnUmVkaXMgc3VibmV0IGdyb3VwJyxcbiAgICBzdWJuZXRJZHM6IHByb3BzLnN1Ym5ldElkcyxcbiAgfSk7XG4gIHJldHVybiByZWRpc1N1Ym5ldEdyb3VwO1xufVxuXG4vLyBnZXQgcmVkaXMgc2VjdXJpdHkgZ3JvdXAgZnJvbSBleGlzdGluZyB2cGNcbmV4cG9ydCBmdW5jdGlvbiBnZXRSZWRpc1NlY3VyaXR5R3JvdXAoc2NvcGU6IENvbnN0cnVjdCxcbiAgcHJvcHM6IFJlZGlzUHJvcHMgfCBhbnkgKTogZWMyLlNlY3VyaXR5R3JvdXAge1xuICBsZXQgcmVkaXNTZWN1cml0eUdyb3VwID0gbmV3IGVjMi5TZWN1cml0eUdyb3VwKHNjb3BlLCAncmVkaXNTZWN1cml0eUdyb3VwJywge1xuICAgIHZwYzogcHJvcHMuZXhpc3RpbmdWcGMsXG4gICAgYWxsb3dBbGxPdXRib3VuZDogdHJ1ZSxcbiAgICBkZXNjcmlwdGlvbjogJ3NlY3VyaXR5IGdyb3VwIGZvciBlbGFzdGljYWNoZScsXG4gIH0pO1xuXG4gIHJldHVybiByZWRpc1NlY3VyaXR5R3JvdXA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRJbmJvdW5kUnVsZXMocmVkaXNTZWN1cml0eUdyb3VwOmVjMi5TZWN1cml0eUdyb3VwLFxuICBzb3VyY2VTZWN1cml0eWdyb3VwOmVjMi5JU2VjdXJpdHlHcm91cCxcbiAgcmVkaXNQb3J0Om51bWJlcikge1xuICByZWRpc1NlY3VyaXR5R3JvdXAuY29ubmVjdGlvbnMuYWxsb3dGcm9tKHNvdXJjZVNlY3VyaXR5Z3JvdXAsXG4gICAgZWMyLlBvcnQudGNwKHJlZGlzUG9ydCkpO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBDaGVja1JlZGlzQ2x1c3RlclByb3BzKHByb3BzT2JqZWN0OiBSZWRpc1Byb3BzIHwgYW55KSB7XG4gIGxldCBlcnJvck1lc3NhZ2VzID0gJyc7XG4gIGxldCBlcnJvckZvdW5kID0gZmFsc2U7XG5cbiAgaWYgKHByb3BzT2JqZWN0LmV4aXN0aW5nUmVkaXNDdWxzdGVyICYmIHByb3BzT2JqZWN0LmNmbkNhY2hlQ2x1c3RlclByb3BzKSB7XG4gICAgZXJyb3JNZXNzYWdlcyArPSAnRXJyb3IgLSBFaXRoZXIgcHJvdmlkZSBleGlzdGluZ1JlZGlzQ3Vsc3RlciBvciBjZm5DYWNoZUNsdXN0ZXJQcm9wcywgYnV0IG5vdCBib3RoLlxcbic7XG4gICAgZXJyb3JGb3VuZCA9IHRydWU7XG4gIH1cblxuICBpZiAoZXJyb3JGb3VuZCkge1xuICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2VzKTtcbiAgfVxufVxuIl19